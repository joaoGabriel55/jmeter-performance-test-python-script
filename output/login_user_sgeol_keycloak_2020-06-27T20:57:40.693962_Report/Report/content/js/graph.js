/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1793.0, "minX": 0.0, "maxY": 54179.0, "series": [{"data": [[0.0, 1793.0], [0.1, 4048.0], [0.2, 5592.0], [0.3, 7422.0], [0.4, 10321.0], [0.5, 12769.0], [0.6, 14529.0], [0.7, 15063.0], [0.8, 15367.0], [0.9, 15690.0], [1.0, 15881.0], [1.1, 16161.0], [1.2, 16416.0], [1.3, 16850.0], [1.4, 17154.0], [1.5, 17353.0], [1.6, 17635.0], [1.7, 17776.0], [1.8, 17887.0], [1.9, 18116.0], [2.0, 18256.0], [2.1, 18322.0], [2.2, 18594.0], [2.3, 18826.0], [2.4, 18977.0], [2.5, 19034.0], [2.6, 19157.0], [2.7, 19241.0], [2.8, 19307.0], [2.9, 19657.0], [3.0, 19918.0], [3.1, 20009.0], [3.2, 20087.0], [3.3, 20213.0], [3.4, 20298.0], [3.5, 20404.0], [3.6, 20604.0], [3.7, 20797.0], [3.8, 20849.0], [3.9, 20934.0], [4.0, 21090.0], [4.1, 21157.0], [4.2, 21263.0], [4.3, 21352.0], [4.4, 21430.0], [4.5, 21542.0], [4.6, 21627.0], [4.7, 21696.0], [4.8, 21762.0], [4.9, 21808.0], [5.0, 21882.0], [5.1, 21959.0], [5.2, 21992.0], [5.3, 22042.0], [5.4, 22128.0], [5.5, 22150.0], [5.6, 22250.0], [5.7, 22322.0], [5.8, 22378.0], [5.9, 22437.0], [6.0, 22503.0], [6.1, 22571.0], [6.2, 22596.0], [6.3, 22667.0], [6.4, 22716.0], [6.5, 22752.0], [6.6, 22801.0], [6.7, 22854.0], [6.8, 22876.0], [6.9, 22951.0], [7.0, 23008.0], [7.1, 23051.0], [7.2, 23109.0], [7.3, 23180.0], [7.4, 23238.0], [7.5, 23272.0], [7.6, 23325.0], [7.7, 23391.0], [7.8, 23433.0], [7.9, 23464.0], [8.0, 23555.0], [8.1, 23577.0], [8.2, 23627.0], [8.3, 23629.0], [8.4, 23654.0], [8.5, 23664.0], [8.6, 23729.0], [8.7, 23754.0], [8.8, 23780.0], [8.9, 23811.0], [9.0, 23833.0], [9.1, 23858.0], [9.2, 23865.0], [9.3, 23881.0], [9.4, 23893.0], [9.5, 23965.0], [9.6, 24020.0], [9.7, 24065.0], [9.8, 24104.0], [9.9, 24141.0], [10.0, 24186.0], [10.1, 24207.0], [10.2, 24223.0], [10.3, 24249.0], [10.4, 24260.0], [10.5, 24288.0], [10.6, 24302.0], [10.7, 24313.0], [10.8, 24331.0], [10.9, 24351.0], [11.0, 24376.0], [11.1, 24385.0], [11.2, 24423.0], [11.3, 24448.0], [11.4, 24482.0], [11.5, 24511.0], [11.6, 24535.0], [11.7, 24583.0], [11.8, 24646.0], [11.9, 24666.0], [12.0, 24676.0], [12.1, 24715.0], [12.2, 24736.0], [12.3, 24746.0], [12.4, 24809.0], [12.5, 24817.0], [12.6, 24837.0], [12.7, 24847.0], [12.8, 24870.0], [12.9, 24883.0], [13.0, 24922.0], [13.1, 24952.0], [13.2, 24978.0], [13.3, 24995.0], [13.4, 25014.0], [13.5, 25055.0], [13.6, 25064.0], [13.7, 25082.0], [13.8, 25111.0], [13.9, 25134.0], [14.0, 25147.0], [14.1, 25164.0], [14.2, 25172.0], [14.3, 25188.0], [14.4, 25205.0], [14.5, 25227.0], [14.6, 25254.0], [14.7, 25272.0], [14.8, 25302.0], [14.9, 25334.0], [15.0, 25366.0], [15.1, 25387.0], [15.2, 25403.0], [15.3, 25420.0], [15.4, 25453.0], [15.5, 25465.0], [15.6, 25485.0], [15.7, 25493.0], [15.8, 25509.0], [15.9, 25524.0], [16.0, 25533.0], [16.1, 25566.0], [16.2, 25580.0], [16.3, 25592.0], [16.4, 25605.0], [16.5, 25632.0], [16.6, 25652.0], [16.7, 25677.0], [16.8, 25692.0], [16.9, 25718.0], [17.0, 25730.0], [17.1, 25740.0], [17.2, 25763.0], [17.3, 25780.0], [17.4, 25797.0], [17.5, 25814.0], [17.6, 25828.0], [17.7, 25847.0], [17.8, 25859.0], [17.9, 25875.0], [18.0, 25889.0], [18.1, 25901.0], [18.2, 25915.0], [18.3, 25925.0], [18.4, 25961.0], [18.5, 25976.0], [18.6, 25999.0], [18.7, 26012.0], [18.8, 26067.0], [18.9, 26090.0], [19.0, 26097.0], [19.1, 26109.0], [19.2, 26136.0], [19.3, 26159.0], [19.4, 26169.0], [19.5, 26190.0], [19.6, 26213.0], [19.7, 26222.0], [19.8, 26238.0], [19.9, 26252.0], [20.0, 26285.0], [20.1, 26298.0], [20.2, 26324.0], [20.3, 26334.0], [20.4, 26342.0], [20.5, 26357.0], [20.6, 26371.0], [20.7, 26374.0], [20.8, 26391.0], [20.9, 26406.0], [21.0, 26422.0], [21.1, 26438.0], [21.2, 26454.0], [21.3, 26468.0], [21.4, 26480.0], [21.5, 26493.0], [21.6, 26506.0], [21.7, 26538.0], [21.8, 26550.0], [21.9, 26578.0], [22.0, 26594.0], [22.1, 26608.0], [22.2, 26625.0], [22.3, 26636.0], [22.4, 26651.0], [22.5, 26666.0], [22.6, 26674.0], [22.7, 26688.0], [22.8, 26690.0], [22.9, 26711.0], [23.0, 26725.0], [23.1, 26749.0], [23.2, 26770.0], [23.3, 26774.0], [23.4, 26782.0], [23.5, 26799.0], [23.6, 26833.0], [23.7, 26844.0], [23.8, 26854.0], [23.9, 26859.0], [24.0, 26875.0], [24.1, 26884.0], [24.2, 26894.0], [24.3, 26903.0], [24.4, 26921.0], [24.5, 26940.0], [24.6, 26947.0], [24.7, 26951.0], [24.8, 26955.0], [24.9, 26963.0], [25.0, 26975.0], [25.1, 26995.0], [25.2, 27003.0], [25.3, 27019.0], [25.4, 27043.0], [25.5, 27075.0], [25.6, 27084.0], [25.7, 27094.0], [25.8, 27117.0], [25.9, 27126.0], [26.0, 27138.0], [26.1, 27144.0], [26.2, 27149.0], [26.3, 27167.0], [26.4, 27180.0], [26.5, 27188.0], [26.6, 27201.0], [26.7, 27205.0], [26.8, 27213.0], [26.9, 27229.0], [27.0, 27247.0], [27.1, 27266.0], [27.2, 27280.0], [27.3, 27292.0], [27.4, 27304.0], [27.5, 27318.0], [27.6, 27329.0], [27.7, 27348.0], [27.8, 27352.0], [27.9, 27371.0], [28.0, 27383.0], [28.1, 27388.0], [28.2, 27400.0], [28.3, 27407.0], [28.4, 27429.0], [28.5, 27437.0], [28.6, 27443.0], [28.7, 27448.0], [28.8, 27458.0], [28.9, 27463.0], [29.0, 27469.0], [29.1, 27486.0], [29.2, 27495.0], [29.3, 27502.0], [29.4, 27506.0], [29.5, 27523.0], [29.6, 27549.0], [29.7, 27563.0], [29.8, 27584.0], [29.9, 27598.0], [30.0, 27600.0], [30.1, 27605.0], [30.2, 27612.0], [30.3, 27624.0], [30.4, 27640.0], [30.5, 27656.0], [30.6, 27666.0], [30.7, 27685.0], [30.8, 27703.0], [30.9, 27707.0], [31.0, 27724.0], [31.1, 27731.0], [31.2, 27739.0], [31.3, 27750.0], [31.4, 27754.0], [31.5, 27766.0], [31.6, 27792.0], [31.7, 27813.0], [31.8, 27835.0], [31.9, 27849.0], [32.0, 27865.0], [32.1, 27875.0], [32.2, 27885.0], [32.3, 27898.0], [32.4, 27910.0], [32.5, 27924.0], [32.6, 27935.0], [32.7, 27940.0], [32.8, 27961.0], [32.9, 27971.0], [33.0, 27980.0], [33.1, 27992.0], [33.2, 28004.0], [33.3, 28014.0], [33.4, 28030.0], [33.5, 28035.0], [33.6, 28049.0], [33.7, 28053.0], [33.8, 28061.0], [33.9, 28065.0], [34.0, 28075.0], [34.1, 28090.0], [34.2, 28097.0], [34.3, 28107.0], [34.4, 28109.0], [34.5, 28112.0], [34.6, 28131.0], [34.7, 28137.0], [34.8, 28151.0], [34.9, 28169.0], [35.0, 28181.0], [35.1, 28189.0], [35.2, 28195.0], [35.3, 28210.0], [35.4, 28222.0], [35.5, 28226.0], [35.6, 28241.0], [35.7, 28254.0], [35.8, 28264.0], [35.9, 28270.0], [36.0, 28280.0], [36.1, 28285.0], [36.2, 28320.0], [36.3, 28326.0], [36.4, 28337.0], [36.5, 28351.0], [36.6, 28375.0], [36.7, 28381.0], [36.8, 28388.0], [36.9, 28399.0], [37.0, 28406.0], [37.1, 28411.0], [37.2, 28427.0], [37.3, 28442.0], [37.4, 28444.0], [37.5, 28456.0], [37.6, 28490.0], [37.7, 28511.0], [37.8, 28513.0], [37.9, 28525.0], [38.0, 28531.0], [38.1, 28544.0], [38.2, 28551.0], [38.3, 28570.0], [38.4, 28580.0], [38.5, 28586.0], [38.6, 28592.0], [38.7, 28599.0], [38.8, 28605.0], [38.9, 28617.0], [39.0, 28629.0], [39.1, 28634.0], [39.2, 28647.0], [39.3, 28662.0], [39.4, 28681.0], [39.5, 28697.0], [39.6, 28716.0], [39.7, 28730.0], [39.8, 28741.0], [39.9, 28748.0], [40.0, 28755.0], [40.1, 28765.0], [40.2, 28783.0], [40.3, 28793.0], [40.4, 28801.0], [40.5, 28817.0], [40.6, 28823.0], [40.7, 28839.0], [40.8, 28842.0], [40.9, 28850.0], [41.0, 28870.0], [41.1, 28882.0], [41.2, 28895.0], [41.3, 28914.0], [41.4, 28922.0], [41.5, 28933.0], [41.6, 28942.0], [41.7, 28953.0], [41.8, 28963.0], [41.9, 28970.0], [42.0, 28974.0], [42.1, 28979.0], [42.2, 28990.0], [42.3, 29001.0], [42.4, 29004.0], [42.5, 29014.0], [42.6, 29025.0], [42.7, 29033.0], [42.8, 29045.0], [42.9, 29053.0], [43.0, 29063.0], [43.1, 29075.0], [43.2, 29089.0], [43.3, 29102.0], [43.4, 29131.0], [43.5, 29138.0], [43.6, 29145.0], [43.7, 29171.0], [43.8, 29181.0], [43.9, 29196.0], [44.0, 29215.0], [44.1, 29231.0], [44.2, 29237.0], [44.3, 29243.0], [44.4, 29254.0], [44.5, 29258.0], [44.6, 29281.0], [44.7, 29284.0], [44.8, 29291.0], [44.9, 29301.0], [45.0, 29312.0], [45.1, 29322.0], [45.2, 29326.0], [45.3, 29332.0], [45.4, 29338.0], [45.5, 29353.0], [45.6, 29358.0], [45.7, 29378.0], [45.8, 29392.0], [45.9, 29406.0], [46.0, 29428.0], [46.1, 29443.0], [46.2, 29454.0], [46.3, 29464.0], [46.4, 29472.0], [46.5, 29491.0], [46.6, 29498.0], [46.7, 29509.0], [46.8, 29516.0], [46.9, 29527.0], [47.0, 29542.0], [47.1, 29553.0], [47.2, 29566.0], [47.3, 29587.0], [47.4, 29593.0], [47.5, 29598.0], [47.6, 29603.0], [47.7, 29606.0], [47.8, 29630.0], [47.9, 29637.0], [48.0, 29640.0], [48.1, 29651.0], [48.2, 29664.0], [48.3, 29671.0], [48.4, 29682.0], [48.5, 29688.0], [48.6, 29693.0], [48.7, 29707.0], [48.8, 29716.0], [48.9, 29727.0], [49.0, 29734.0], [49.1, 29740.0], [49.2, 29753.0], [49.3, 29761.0], [49.4, 29772.0], [49.5, 29779.0], [49.6, 29790.0], [49.7, 29799.0], [49.8, 29807.0], [49.9, 29832.0], [50.0, 29835.0], [50.1, 29844.0], [50.2, 29852.0], [50.3, 29869.0], [50.4, 29877.0], [50.5, 29892.0], [50.6, 29903.0], [50.7, 29914.0], [50.8, 29925.0], [50.9, 29932.0], [51.0, 29944.0], [51.1, 29953.0], [51.2, 29964.0], [51.3, 29972.0], [51.4, 29979.0], [51.5, 29989.0], [51.6, 30000.0], [51.7, 30021.0], [51.8, 30027.0], [51.9, 30035.0], [52.0, 30038.0], [52.1, 30044.0], [52.2, 30049.0], [52.3, 30056.0], [52.4, 30068.0], [52.5, 30074.0], [52.6, 30082.0], [52.7, 30093.0], [52.8, 30097.0], [52.9, 30107.0], [53.0, 30123.0], [53.1, 30136.0], [53.2, 30149.0], [53.3, 30162.0], [53.4, 30179.0], [53.5, 30190.0], [53.6, 30193.0], [53.7, 30204.0], [53.8, 30215.0], [53.9, 30225.0], [54.0, 30239.0], [54.1, 30247.0], [54.2, 30254.0], [54.3, 30267.0], [54.4, 30278.0], [54.5, 30286.0], [54.6, 30308.0], [54.7, 30310.0], [54.8, 30319.0], [54.9, 30327.0], [55.0, 30337.0], [55.1, 30352.0], [55.2, 30364.0], [55.3, 30372.0], [55.4, 30380.0], [55.5, 30395.0], [55.6, 30410.0], [55.7, 30443.0], [55.8, 30450.0], [55.9, 30464.0], [56.0, 30475.0], [56.1, 30479.0], [56.2, 30487.0], [56.3, 30499.0], [56.4, 30513.0], [56.5, 30532.0], [56.6, 30555.0], [56.7, 30562.0], [56.8, 30569.0], [56.9, 30584.0], [57.0, 30598.0], [57.1, 30607.0], [57.2, 30625.0], [57.3, 30632.0], [57.4, 30638.0], [57.5, 30651.0], [57.6, 30658.0], [57.7, 30665.0], [57.8, 30675.0], [57.9, 30681.0], [58.0, 30698.0], [58.1, 30708.0], [58.2, 30713.0], [58.3, 30723.0], [58.4, 30735.0], [58.5, 30743.0], [58.6, 30758.0], [58.7, 30761.0], [58.8, 30764.0], [58.9, 30773.0], [59.0, 30779.0], [59.1, 30792.0], [59.2, 30808.0], [59.3, 30815.0], [59.4, 30828.0], [59.5, 30841.0], [59.6, 30849.0], [59.7, 30860.0], [59.8, 30872.0], [59.9, 30876.0], [60.0, 30883.0], [60.1, 30904.0], [60.2, 30910.0], [60.3, 30919.0], [60.4, 30927.0], [60.5, 30939.0], [60.6, 30950.0], [60.7, 30968.0], [60.8, 30988.0], [60.9, 30995.0], [61.0, 31003.0], [61.1, 31009.0], [61.2, 31016.0], [61.3, 31027.0], [61.4, 31039.0], [61.5, 31050.0], [61.6, 31065.0], [61.7, 31069.0], [61.8, 31084.0], [61.9, 31097.0], [62.0, 31131.0], [62.1, 31139.0], [62.2, 31145.0], [62.3, 31152.0], [62.4, 31159.0], [62.5, 31176.0], [62.6, 31192.0], [62.7, 31207.0], [62.8, 31213.0], [62.9, 31231.0], [63.0, 31260.0], [63.1, 31266.0], [63.2, 31284.0], [63.3, 31314.0], [63.4, 31320.0], [63.5, 31335.0], [63.6, 31340.0], [63.7, 31349.0], [63.8, 31368.0], [63.9, 31376.0], [64.0, 31392.0], [64.1, 31405.0], [64.2, 31410.0], [64.3, 31420.0], [64.4, 31430.0], [64.5, 31439.0], [64.6, 31445.0], [64.7, 31455.0], [64.8, 31478.0], [64.9, 31496.0], [65.0, 31503.0], [65.1, 31512.0], [65.2, 31535.0], [65.3, 31550.0], [65.4, 31570.0], [65.5, 31587.0], [65.6, 31592.0], [65.7, 31612.0], [65.8, 31626.0], [65.9, 31637.0], [66.0, 31657.0], [66.1, 31671.0], [66.2, 31691.0], [66.3, 31705.0], [66.4, 31713.0], [66.5, 31720.0], [66.6, 31731.0], [66.7, 31739.0], [66.8, 31744.0], [66.9, 31764.0], [67.0, 31773.0], [67.1, 31792.0], [67.2, 31817.0], [67.3, 31835.0], [67.4, 31842.0], [67.5, 31857.0], [67.6, 31877.0], [67.7, 31884.0], [67.8, 31898.0], [67.9, 31907.0], [68.0, 31928.0], [68.1, 31940.0], [68.2, 31946.0], [68.3, 31953.0], [68.4, 31961.0], [68.5, 31965.0], [68.6, 31984.0], [68.7, 31995.0], [68.8, 32012.0], [68.9, 32020.0], [69.0, 32024.0], [69.1, 32030.0], [69.2, 32041.0], [69.3, 32061.0], [69.4, 32068.0], [69.5, 32073.0], [69.6, 32082.0], [69.7, 32099.0], [69.8, 32123.0], [69.9, 32132.0], [70.0, 32167.0], [70.1, 32175.0], [70.2, 32188.0], [70.3, 32201.0], [70.4, 32208.0], [70.5, 32215.0], [70.6, 32225.0], [70.7, 32238.0], [70.8, 32252.0], [70.9, 32262.0], [71.0, 32275.0], [71.1, 32282.0], [71.2, 32289.0], [71.3, 32320.0], [71.4, 32331.0], [71.5, 32347.0], [71.6, 32356.0], [71.7, 32370.0], [71.8, 32392.0], [71.9, 32401.0], [72.0, 32423.0], [72.1, 32437.0], [72.2, 32454.0], [72.3, 32475.0], [72.4, 32484.0], [72.5, 32501.0], [72.6, 32516.0], [72.7, 32539.0], [72.8, 32549.0], [72.9, 32561.0], [73.0, 32578.0], [73.1, 32601.0], [73.2, 32606.0], [73.3, 32627.0], [73.4, 32649.0], [73.5, 32656.0], [73.6, 32667.0], [73.7, 32684.0], [73.8, 32694.0], [73.9, 32718.0], [74.0, 32731.0], [74.1, 32741.0], [74.2, 32749.0], [74.3, 32761.0], [74.4, 32768.0], [74.5, 32772.0], [74.6, 32796.0], [74.7, 32822.0], [74.8, 32838.0], [74.9, 32847.0], [75.0, 32858.0], [75.1, 32880.0], [75.2, 32915.0], [75.3, 32923.0], [75.4, 32937.0], [75.5, 32953.0], [75.6, 32975.0], [75.7, 32983.0], [75.8, 33001.0], [75.9, 33012.0], [76.0, 33034.0], [76.1, 33043.0], [76.2, 33092.0], [76.3, 33108.0], [76.4, 33123.0], [76.5, 33149.0], [76.6, 33169.0], [76.7, 33179.0], [76.8, 33191.0], [76.9, 33208.0], [77.0, 33229.0], [77.1, 33245.0], [77.2, 33259.0], [77.3, 33287.0], [77.4, 33302.0], [77.5, 33326.0], [77.6, 33358.0], [77.7, 33383.0], [77.8, 33402.0], [77.9, 33406.0], [78.0, 33417.0], [78.1, 33438.0], [78.2, 33457.0], [78.3, 33483.0], [78.4, 33498.0], [78.5, 33510.0], [78.6, 33532.0], [78.7, 33559.0], [78.8, 33577.0], [78.9, 33586.0], [79.0, 33594.0], [79.1, 33607.0], [79.2, 33626.0], [79.3, 33638.0], [79.4, 33655.0], [79.5, 33661.0], [79.6, 33682.0], [79.7, 33697.0], [79.8, 33706.0], [79.9, 33725.0], [80.0, 33731.0], [80.1, 33759.0], [80.2, 33776.0], [80.3, 33800.0], [80.4, 33810.0], [80.5, 33828.0], [80.6, 33838.0], [80.7, 33849.0], [80.8, 33871.0], [80.9, 33882.0], [81.0, 33900.0], [81.1, 33919.0], [81.2, 33928.0], [81.3, 33950.0], [81.4, 33958.0], [81.5, 33976.0], [81.6, 33995.0], [81.7, 34023.0], [81.8, 34055.0], [81.9, 34071.0], [82.0, 34104.0], [82.1, 34117.0], [82.2, 34137.0], [82.3, 34167.0], [82.4, 34206.0], [82.5, 34220.0], [82.6, 34233.0], [82.7, 34246.0], [82.8, 34256.0], [82.9, 34270.0], [83.0, 34294.0], [83.1, 34316.0], [83.2, 34343.0], [83.3, 34353.0], [83.4, 34393.0], [83.5, 34403.0], [83.6, 34432.0], [83.7, 34456.0], [83.8, 34479.0], [83.9, 34501.0], [84.0, 34513.0], [84.1, 34551.0], [84.2, 34562.0], [84.3, 34573.0], [84.4, 34582.0], [84.5, 34602.0], [84.6, 34614.0], [84.7, 34635.0], [84.8, 34663.0], [84.9, 34670.0], [85.0, 34690.0], [85.1, 34722.0], [85.2, 34753.0], [85.3, 34788.0], [85.4, 34809.0], [85.5, 34841.0], [85.6, 34852.0], [85.7, 34868.0], [85.8, 34890.0], [85.9, 34910.0], [86.0, 34925.0], [86.1, 34932.0], [86.2, 34954.0], [86.3, 34990.0], [86.4, 35033.0], [86.5, 35043.0], [86.6, 35053.0], [86.7, 35067.0], [86.8, 35092.0], [86.9, 35125.0], [87.0, 35149.0], [87.1, 35169.0], [87.2, 35205.0], [87.3, 35217.0], [87.4, 35254.0], [87.5, 35273.0], [87.6, 35323.0], [87.7, 35366.0], [87.8, 35416.0], [87.9, 35436.0], [88.0, 35468.0], [88.1, 35507.0], [88.2, 35521.0], [88.3, 35540.0], [88.4, 35550.0], [88.5, 35564.0], [88.6, 35594.0], [88.7, 35615.0], [88.8, 35636.0], [88.9, 35648.0], [89.0, 35677.0], [89.1, 35719.0], [89.2, 35748.0], [89.3, 35785.0], [89.4, 35813.0], [89.5, 35834.0], [89.6, 35861.0], [89.7, 35892.0], [89.8, 35912.0], [89.9, 35955.0], [90.0, 35968.0], [90.1, 36018.0], [90.2, 36048.0], [90.3, 36062.0], [90.4, 36088.0], [90.5, 36116.0], [90.6, 36136.0], [90.7, 36190.0], [90.8, 36201.0], [90.9, 36219.0], [91.0, 36242.0], [91.1, 36272.0], [91.2, 36300.0], [91.3, 36339.0], [91.4, 36386.0], [91.5, 36400.0], [91.6, 36418.0], [91.7, 36445.0], [91.8, 36472.0], [91.9, 36505.0], [92.0, 36545.0], [92.1, 36559.0], [92.2, 36617.0], [92.3, 36672.0], [92.4, 36693.0], [92.5, 36729.0], [92.6, 36758.0], [92.7, 36782.0], [92.8, 36826.0], [92.9, 36887.0], [93.0, 36952.0], [93.1, 37000.0], [93.2, 37055.0], [93.3, 37091.0], [93.4, 37138.0], [93.5, 37163.0], [93.6, 37206.0], [93.7, 37266.0], [93.8, 37308.0], [93.9, 37337.0], [94.0, 37383.0], [94.1, 37448.0], [94.2, 37512.0], [94.3, 37556.0], [94.4, 37632.0], [94.5, 37635.0], [94.6, 37699.0], [94.7, 37749.0], [94.8, 37802.0], [94.9, 37825.0], [95.0, 37906.0], [95.1, 37963.0], [95.2, 38000.0], [95.3, 38036.0], [95.4, 38109.0], [95.5, 38143.0], [95.6, 38223.0], [95.7, 38347.0], [95.8, 38398.0], [95.9, 38441.0], [96.0, 38508.0], [96.1, 38545.0], [96.2, 38607.0], [96.3, 38635.0], [96.4, 38684.0], [96.5, 38723.0], [96.6, 38759.0], [96.7, 38820.0], [96.8, 38868.0], [96.9, 38962.0], [97.0, 39081.0], [97.1, 39154.0], [97.2, 39260.0], [97.3, 39375.0], [97.4, 39433.0], [97.5, 39517.0], [97.6, 39623.0], [97.7, 39717.0], [97.8, 39770.0], [97.9, 39810.0], [98.0, 39993.0], [98.1, 40150.0], [98.2, 40192.0], [98.3, 40429.0], [98.4, 40530.0], [98.5, 40635.0], [98.6, 40857.0], [98.7, 41039.0], [98.8, 41173.0], [98.9, 41413.0], [99.0, 41585.0], [99.1, 41726.0], [99.2, 41872.0], [99.3, 42395.0], [99.4, 42679.0], [99.5, 42954.0], [99.6, 43247.0], [99.7, 44324.0], [99.8, 45517.0], [99.9, 50052.0], [100.0, 54179.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 51.0, "series": [{"data": [[34100.0, 17.0], [33300.0, 15.0], [32900.0, 24.0], [33700.0, 22.0], [34500.0, 25.0], [35700.0, 11.0], [36100.0, 15.0], [34900.0, 20.0], [36500.0, 12.0], [35300.0, 9.0], [37700.0, 6.0], [38100.0, 9.0], [37300.0, 13.0], [38900.0, 5.0], [36900.0, 7.0], [38500.0, 8.0], [39300.0, 6.0], [40100.0, 5.0], [40500.0, 5.0], [39700.0, 8.0], [41700.0, 2.0], [42500.0, 2.0], [42900.0, 2.0], [41300.0, 1.0], [42100.0, 1.0], [44100.0, 1.0], [43300.0, 1.0], [44900.0, 1.0], [45300.0, 1.0], [47300.0, 1.0], [48900.0, 1.0], [53700.0, 1.0], [54100.0, 1.0], [1700.0, 1.0], [2300.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [4000.0, 1.0], [4300.0, 1.0], [4500.0, 1.0], [5100.0, 1.0], [5600.0, 1.0], [5500.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7400.0, 1.0], [7800.0, 1.0], [10000.0, 1.0], [10300.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12300.0, 1.0], [14000.0, 2.0], [14500.0, 2.0], [14400.0, 1.0], [14900.0, 2.0], [15200.0, 2.0], [15000.0, 2.0], [15300.0, 1.0], [15600.0, 3.0], [15500.0, 1.0], [15800.0, 4.0], [15900.0, 3.0], [16000.0, 1.0], [16100.0, 1.0], [16200.0, 3.0], [16400.0, 1.0], [16800.0, 3.0], [17200.0, 1.0], [17600.0, 2.0], [17800.0, 4.0], [18000.0, 2.0], [18200.0, 6.0], [18400.0, 2.0], [18600.0, 2.0], [19200.0, 5.0], [19000.0, 4.0], [19400.0, 1.0], [18800.0, 2.0], [19600.0, 3.0], [20000.0, 5.0], [20200.0, 5.0], [20400.0, 2.0], [19800.0, 1.0], [20600.0, 3.0], [20800.0, 5.0], [21200.0, 5.0], [21400.0, 4.0], [21000.0, 3.0], [22200.0, 5.0], [21600.0, 6.0], [22000.0, 7.0], [22400.0, 7.0], [21800.0, 5.0], [22600.0, 5.0], [23200.0, 9.0], [22800.0, 9.0], [23000.0, 8.0], [23400.0, 7.0], [23600.0, 17.0], [24200.0, 19.0], [24400.0, 12.0], [23800.0, 22.0], [24000.0, 8.0], [24800.0, 24.0], [24600.0, 13.0], [25200.0, 19.0], [25000.0, 17.0], [25400.0, 24.0], [26000.0, 17.0], [25800.0, 26.0], [26400.0, 27.0], [25600.0, 19.0], [26600.0, 34.0], [26200.0, 25.0], [27400.0, 43.0], [27000.0, 25.0], [26800.0, 31.0], [27600.0, 32.0], [27200.0, 31.0], [28200.0, 34.0], [28600.0, 33.0], [27800.0, 26.0], [28400.0, 30.0], [28000.0, 41.0], [28800.0, 36.0], [29000.0, 41.0], [29200.0, 39.0], [29600.0, 43.0], [29400.0, 31.0], [30600.0, 41.0], [30000.0, 51.0], [30400.0, 30.0], [29800.0, 33.0], [30200.0, 36.0], [30800.0, 37.0], [31200.0, 23.0], [31400.0, 38.0], [31000.0, 39.0], [31600.0, 23.0], [31800.0, 28.0], [32400.0, 24.0], [32000.0, 40.0], [32200.0, 40.0], [32600.0, 29.0], [33600.0, 29.0], [34000.0, 10.0], [33200.0, 19.0], [34800.0, 20.0], [32800.0, 23.0], [34400.0, 15.0], [36400.0, 15.0], [35600.0, 18.0], [36800.0, 6.0], [35200.0, 15.0], [36000.0, 14.0], [38800.0, 6.0], [38400.0, 7.0], [37200.0, 6.0], [37600.0, 11.0], [38000.0, 7.0], [39600.0, 5.0], [40800.0, 3.0], [39200.0, 4.0], [40000.0, 2.0], [40400.0, 3.0], [41600.0, 1.0], [41200.0, 2.0], [42400.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [43200.0, 1.0], [49600.0, 1.0], [50000.0, 1.0], [33100.0, 24.0], [33500.0, 24.0], [33900.0, 28.0], [34700.0, 13.0], [34300.0, 17.0], [35500.0, 23.0], [35900.0, 14.0], [35100.0, 14.0], [36300.0, 12.0], [36700.0, 14.0], [37900.0, 9.0], [37100.0, 10.0], [37500.0, 6.0], [38300.0, 6.0], [38700.0, 9.0], [40300.0, 1.0], [39900.0, 4.0], [39500.0, 3.0], [39100.0, 3.0], [40700.0, 1.0], [41500.0, 4.0], [41100.0, 2.0], [42300.0, 2.0], [42700.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [45500.0, 1.0], [50300.0, 1.0], [16900.0, 1.0], [17100.0, 4.0], [17300.0, 3.0], [16700.0, 1.0], [17700.0, 4.0], [17900.0, 1.0], [18300.0, 2.0], [18100.0, 2.0], [17500.0, 1.0], [18500.0, 1.0], [19100.0, 5.0], [19300.0, 2.0], [18900.0, 3.0], [18700.0, 1.0], [20300.0, 3.0], [19700.0, 1.0], [19900.0, 4.0], [20100.0, 3.0], [19500.0, 1.0], [21300.0, 6.0], [21100.0, 4.0], [20900.0, 4.0], [21500.0, 4.0], [20500.0, 2.0], [20700.0, 2.0], [22300.0, 5.0], [22100.0, 7.0], [21700.0, 5.0], [22500.0, 9.0], [21900.0, 8.0], [22700.0, 10.0], [23100.0, 6.0], [23300.0, 8.0], [23500.0, 8.0], [22900.0, 7.0], [24100.0, 13.0], [23700.0, 12.0], [24300.0, 23.0], [23900.0, 6.0], [24500.0, 12.0], [25500.0, 24.0], [25100.0, 22.0], [24900.0, 15.0], [25300.0, 15.0], [24700.0, 12.0], [25700.0, 24.0], [26100.0, 19.0], [26500.0, 19.0], [25900.0, 21.0], [26300.0, 30.0], [26900.0, 34.0], [27300.0, 33.0], [27100.0, 33.0], [26700.0, 26.0], [27500.0, 29.0], [28500.0, 42.0], [28100.0, 42.0], [27700.0, 35.0], [28300.0, 32.0], [27900.0, 35.0], [29500.0, 37.0], [28700.0, 33.0], [29100.0, 26.0], [28900.0, 39.0], [29300.0, 38.0], [29900.0, 41.0], [29700.0, 44.0], [30500.0, 28.0], [30300.0, 40.0], [30700.0, 45.0], [30100.0, 33.0], [31100.0, 30.0], [30900.0, 35.0], [31500.0, 27.0], [31300.0, 31.0], [31700.0, 36.0], [32700.0, 32.0], [32500.0, 24.0], [32100.0, 22.0], [32300.0, 25.0], [31900.0, 35.0], [33400.0, 27.0], [33800.0, 28.0], [34600.0, 21.0], [33000.0, 19.0], [34200.0, 28.0], [35000.0, 20.0], [35400.0, 10.0], [35800.0, 15.0], [36600.0, 10.0], [36200.0, 16.0], [37000.0, 10.0], [37800.0, 8.0], [38600.0, 10.0], [37400.0, 5.0], [38200.0, 3.0], [39000.0, 4.0], [40600.0, 3.0], [39400.0, 5.0], [39800.0, 2.0], [40200.0, 1.0], [41400.0, 3.0], [43000.0, 3.0], [42600.0, 1.0], [41800.0, 4.0], [41000.0, 5.0], [53400.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 54100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 61.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3939.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3939.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 61.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 61.678947368421056, "minX": 1.59330222E12, "maxY": 100.0, "series": [{"data": [[1.59330228E12, 100.0], [1.59330288E12, 100.0], [1.59330294E12, 100.0], [1.59330258E12, 100.0], [1.59330324E12, 100.0], [1.5933033E12, 100.0], [1.5933027E12, 100.0], [1.59330264E12, 100.0], [1.59330234E12, 100.0], [1.593303E12, 100.0], [1.59330276E12, 100.0], [1.59330306E12, 100.0], [1.59330246E12, 100.0], [1.59330336E12, 99.35195530726259], [1.5933024E12, 100.0], [1.59330342E12, 61.678947368421056], [1.59330252E12, 100.0], [1.59330222E12, 100.0], [1.59330312E12, 100.0], [1.59330318E12, 100.0], [1.59330282E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59330342E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1793.0, "minX": 1.0, "maxY": 44998.0, "series": [{"data": [[2.0, 2378.0], [3.0, 2861.0], [5.0, 4013.5], [6.0, 5592.0], [7.0, 4545.0], [8.0, 4048.0], [9.0, 6927.0], [10.0, 4397.0], [11.0, 6764.0], [12.0, 10490.5], [13.0, 7827.0], [14.0, 10321.0], [15.0, 12384.0], [16.0, 7422.0], [17.0, 10085.0], [18.0, 12024.0], [19.0, 19648.5], [20.0, 21139.0], [21.0, 18951.0], [22.0, 17635.0], [23.0, 17862.0], [24.0, 11798.0], [26.0, 16606.5], [27.0, 17764.0], [28.0, 21299.333333333332], [29.0, 24817.0], [30.0, 30886.0], [31.0, 14560.0], [33.0, 16850.0], [32.0, 12769.0], [35.0, 30777.0], [34.0, 17652.5], [37.0, 23383.5], [36.0, 28397.0], [39.0, 20639.5], [38.0, 21497.5], [41.0, 30137.0], [40.0, 25223.0], [43.0, 27937.5], [42.0, 28659.0], [45.0, 29223.0], [44.0, 25095.0], [47.0, 26436.0], [46.0, 29138.0], [49.0, 33510.0], [48.0, 25845.0], [51.0, 30928.5], [50.0, 29979.0], [53.0, 25885.0], [52.0, 36249.0], [55.0, 33012.0], [54.0, 30388.0], [57.0, 29321.0], [56.0, 35323.0], [59.0, 26482.0], [58.0, 30352.0], [61.0, 33591.0], [60.0, 31353.666666666668], [63.0, 24224.0], [62.0, 23084.0], [67.0, 36998.5], [66.0, 28121.5], [65.0, 33064.0], [64.0, 42719.0], [71.0, 36245.0], [70.0, 36427.333333333336], [69.0, 44998.0], [68.0, 32376.0], [75.0, 33178.0], [74.0, 33941.0], [73.0, 38275.333333333336], [72.0, 36462.25], [79.0, 35414.0], [78.0, 37843.4], [77.0, 38369.0], [76.0, 35817.5], [83.0, 36120.333333333336], [82.0, 32063.0], [81.0, 30384.666666666668], [80.0, 32684.0], [87.0, 26983.0], [86.0, 32012.0], [85.0, 32538.75], [84.0, 34566.77777777778], [91.0, 36056.666666666664], [90.0, 35291.0], [89.0, 35536.5], [88.0, 36450.85714285714], [95.0, 35316.0], [94.0, 36462.909090909096], [93.0, 36630.333333333336], [92.0, 37853.0], [99.0, 34310.947368421046], [98.0, 35052.5], [97.0, 32838.0], [96.0, 33502.428571428565], [100.0, 29811.90741728925], [1.0, 1793.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[98.15075, 29840.432999999994]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 175.5, "minX": 1.59330222E12, "maxY": 7920.0, "series": [{"data": [[1.59330228E12, 7920.0], [1.59330288E12, 6303.0], [1.59330294E12, 6435.0], [1.59330258E12, 6699.0], [1.59330324E12, 6006.0], [1.5933033E12, 5841.0], [1.5933027E12, 6633.0], [1.59330264E12, 6600.0], [1.59330234E12, 7293.0], [1.593303E12, 6237.0], [1.59330276E12, 5650.483333333334], [1.59330306E12, 6237.0], [1.59330246E12, 7260.0], [1.59330336E12, 5907.0], [1.5933024E12, 7161.0], [1.59330342E12, 6270.0], [1.59330252E12, 7062.0], [1.59330222E12, 297.0], [1.59330312E12, 6105.0], [1.59330318E12, 6171.0], [1.59330282E12, 6402.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59330228E12, 4680.0], [1.59330288E12, 3724.5], [1.59330294E12, 3802.5], [1.59330258E12, 3958.5], [1.59330324E12, 3549.0], [1.5933033E12, 3451.5], [1.5933027E12, 3919.5], [1.59330264E12, 3900.0], [1.59330234E12, 4309.5], [1.593303E12, 3685.5], [1.59330276E12, 4231.5], [1.59330306E12, 3685.5], [1.59330246E12, 4290.0], [1.59330336E12, 3490.5], [1.5933024E12, 4231.5], [1.59330342E12, 3705.0], [1.59330252E12, 4173.0], [1.59330222E12, 175.5], [1.59330312E12, 3607.5], [1.59330318E12, 3646.5], [1.59330282E12, 3783.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59330342E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15159.888888888889, "minX": 1.59330222E12, "maxY": 33763.17877094973, "series": [{"data": [[1.59330228E12, 25611.804166666665], [1.59330288E12, 31227.05235602096], [1.59330294E12, 31251.584615384625], [1.59330258E12, 28993.630541871917], [1.59330324E12, 32959.19230769229], [1.5933033E12, 32779.43502824859], [1.5933027E12, 30231.129353233824], [1.59330264E12, 29879.835000000006], [1.59330234E12, 26883.674208144825], [1.593303E12, 31447.000000000004], [1.59330276E12, 27373.18894009217], [1.59330306E12, 31547.634920634922], [1.59330246E12, 27527.409090909085], [1.59330336E12, 33763.17877094973], [1.5933024E12, 27212.281105990765], [1.59330342E12, 29057.88421052632], [1.59330252E12, 27898.584112149543], [1.59330222E12, 15159.888888888889], [1.59330312E12, 31875.102702702705], [1.59330318E12, 32545.96791443851], [1.59330282E12, 31005.778350515466]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59330342E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15159.111111111111, "minX": 1.59330222E12, "maxY": 33763.15083798883, "series": [{"data": [[1.59330228E12, 25611.720833333315], [1.59330288E12, 31227.010471204198], [1.59330294E12, 31251.51794871796], [1.59330258E12, 28993.551724137924], [1.59330324E12, 32959.175824175814], [1.5933033E12, 32779.39548022597], [1.5933027E12, 30231.089552238795], [1.59330264E12, 29879.754999999997], [1.59330234E12, 26883.606334841625], [1.593303E12, 31446.952380952385], [1.59330276E12, 27373.115207373274], [1.59330306E12, 31547.608465608468], [1.59330246E12, 27527.322727272724], [1.59330336E12, 33763.15083798883], [1.5933024E12, 27212.198156682032], [1.59330342E12, 29057.82105263158], [1.59330252E12, 27898.523364485976], [1.59330222E12, 15159.111111111111], [1.59330312E12, 31875.03783783783], [1.59330318E12, 32545.919786096252], [1.59330282E12, 31005.70103092784]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59330342E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.32272727272727275, "minX": 1.59330222E12, "maxY": 24.333333333333332, "series": [{"data": [[1.59330228E12, 5.908333333333329], [1.59330288E12, 0.6596858638743451], [1.59330294E12, 0.564102564102564], [1.59330258E12, 0.8078817733990148], [1.59330324E12, 0.7142857142857144], [1.5933033E12, 0.5762711864406779], [1.5933027E12, 0.7313432835820899], [1.59330264E12, 0.645], [1.59330234E12, 0.746606334841629], [1.593303E12, 0.4708994708994707], [1.59330276E12, 0.516129032258065], [1.59330306E12, 0.534391534391534], [1.59330246E12, 0.32272727272727275], [1.59330336E12, 0.5977653631284916], [1.5933024E12, 1.0368663594470047], [1.59330342E12, 0.6052631578947367], [1.59330252E12, 0.5280373831775698], [1.59330222E12, 24.333333333333332], [1.59330312E12, 0.5081081081081086], [1.59330318E12, 0.6149732620320857], [1.59330282E12, 0.5979381443298972]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59330342E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1793.0, "minX": 1.59330222E12, "maxY": 48927.0, "series": [{"data": [[1.59330228E12, 41480.0], [1.59330288E12, 43330.0], [1.59330294E12, 41598.0], [1.59330258E12, 41646.0], [1.59330324E12, 45517.0], [1.5933033E12, 43638.0], [1.5933027E12, 40652.0], [1.59330264E12, 41585.0], [1.59330234E12, 35098.0], [1.593303E12, 41427.0], [1.59330276E12, 37635.0], [1.59330306E12, 41897.0], [1.59330246E12, 34747.0], [1.59330336E12, 45319.0], [1.5933024E12, 36116.0], [1.59330342E12, 48927.0], [1.59330252E12, 34865.0], [1.59330222E12, 15819.0], [1.59330312E12, 39792.0], [1.59330318E12, 43054.0], [1.59330282E12, 44196.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59330228E12, 15820.64699638009], [1.59330288E12, 21757.543994369506], [1.59330294E12, 21827.467937521935], [1.59330258E12, 21169.775979766844], [1.59330324E12, 24975.474959641695], [1.5933033E12, 23933.10393837929], [1.5933027E12, 24223.741979820727], [1.59330264E12, 23029.607994632723], [1.59330234E12, 18874.901997406483], [1.593303E12, 24394.859960770606], [1.59330276E12, 16265.089965188503], [1.59330306E12, 25178.359981155394], [1.59330246E12, 21243.58199799776], [1.59330336E12, 24907.999995708466], [1.5933024E12, 19935.677962629794], [1.59330342E12, 2213.6149733603], [1.59330252E12, 21316.719953250886], [1.59330222E12, 14000.0], [1.59330312E12, 24954.27599228382], [1.59330318E12, 24053.091946167944], [1.59330282E12, 23441.829959738254]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59330228E12, 15834.311701447963], [1.59330288E12, 21778.798402252196], [1.59330294E12, 22063.314824991226], [1.59330258E12, 21260.794822626114], [1.59330324E12, 25127.822516143322], [1.5933033E12, 24165.714424648286], [1.5933027E12, 24299.916208071707], [1.59330264E12, 23049.868802146913], [1.59330234E12, 18903.483203048705], [1.593303E12, 24542.946015691756], [1.59330276E12, 16396.4990139246], [1.59330306E12, 25249.49600753784], [1.59330246E12, 21322.542208809853], [1.59330336E12, 24924.200001716614], [1.5933024E12, 20004.764805488587], [1.59330342E12, 2314.17651065588], [1.59330252E12, 21386.794001722337], [1.59330222E12, 14000.0], [1.59330312E12, 24983.40360308647], [1.59330318E12, 24256.30122153282], [1.59330282E12, 23593.813016104697]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59330228E12, 15828.238498190045], [1.59330288E12, 21769.351997184753], [1.59330294E12, 21958.493968760966], [1.59330258E12, 21212.207989883424], [1.59330324E12, 25060.112479820848], [1.5933033E12, 24062.331969189643], [1.5933027E12, 24266.060989910366], [1.59330264E12, 23040.86399731636], [1.59330234E12, 18890.69599618912], [1.593303E12, 24477.129980385303], [1.59330276E12, 16338.094982594252], [1.59330306E12, 25217.879990577698], [1.59330246E12, 21285.590988987686], [1.59330336E12, 24916.999997854233], [1.5933024E12, 19981.743993139266], [1.59330342E12, 2269.48248668015], [1.59330252E12, 21379.56999784708], [1.59330222E12, 14000.0], [1.59330312E12, 24970.45799614191], [1.59330318E12, 24165.985973083974], [1.59330282E12, 23526.264979869127]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59330228E12, 15690.0], [1.59330288E12, 21668.0], [1.59330294E12, 20806.0], [1.59330258E12, 20822.0], [1.59330324E12, 24377.0], [1.5933033E12, 23059.0], [1.5933027E12, 23881.0], [1.59330264E12, 22939.0], [1.59330234E12, 18826.0], [1.593303E12, 23780.0], [1.59330276E12, 15881.0], [1.59330306E12, 24883.0], [1.59330246E12, 21206.0], [1.59330336E12, 24846.0], [1.5933024E12, 19244.0], [1.59330342E12, 1793.0], [1.59330252E12, 20464.0], [1.59330222E12, 14000.0], [1.59330312E12, 24837.0], [1.59330318E12, 23222.0], [1.59330282E12, 22788.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59330228E12, 25794.0], [1.59330288E12, 31065.0], [1.59330294E12, 31043.0], [1.59330258E12, 28647.0], [1.59330324E12, 32811.5], [1.5933033E12, 32267.0], [1.5933027E12, 29833.0], [1.59330264E12, 29841.0], [1.59330234E12, 26847.0], [1.593303E12, 31060.0], [1.59330276E12, 25500.5], [1.59330306E12, 31131.0], [1.59330246E12, 27429.5], [1.59330336E12, 33483.0], [1.5933024E12, 27180.0], [1.59330342E12, 31133.5], [1.59330252E12, 28041.0], [1.59330222E12, 15201.0], [1.59330312E12, 31740.0], [1.59330318E12, 32331.0], [1.59330282E12, 30773.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59330342E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20896.5, "minX": 1.0, "maxY": 47342.5, "series": [{"data": [[1.0, 30205.0], [8.0, 29282.5], [2.0, 30483.5], [4.0, 30038.0], [9.0, 28797.0], [10.0, 20896.5], [5.0, 30018.5], [11.0, 23140.0], [3.0, 30053.0], [6.0, 29688.0], [12.0, 22726.0], [7.0, 29220.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 26357.5], [2.0, 34872.0], [8.0, 27518.0], [4.0, 37348.0], [5.0, 41593.0], [3.0, 36244.0], [26.0, 24050.5], [7.0, 47342.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 20896.5, "minX": 1.0, "maxY": 47342.5, "series": [{"data": [[1.0, 30205.0], [8.0, 29282.0], [2.0, 30483.5], [4.0, 30038.0], [9.0, 28797.0], [10.0, 20896.5], [5.0, 30018.0], [11.0, 23140.0], [3.0, 30052.0], [6.0, 29688.0], [12.0, 22726.0], [7.0, 29220.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 26357.0], [2.0, 34872.0], [8.0, 27518.0], [4.0, 37348.0], [5.0, 41593.0], [3.0, 36244.0], [26.0, 24050.5], [7.0, 47342.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.59330222E12, "maxY": 4.0, "series": [{"data": [[1.59330228E12, 4.0], [1.59330288E12, 3.183333333333333], [1.59330294E12, 3.25], [1.59330258E12, 3.3833333333333333], [1.59330324E12, 3.033333333333333], [1.5933033E12, 2.95], [1.5933027E12, 3.35], [1.59330264E12, 3.3333333333333335], [1.59330234E12, 3.683333333333333], [1.593303E12, 3.15], [1.59330276E12, 3.6166666666666667], [1.59330306E12, 3.15], [1.59330246E12, 3.6666666666666665], [1.59330336E12, 2.9166666666666665], [1.5933024E12, 3.6166666666666667], [1.59330342E12, 1.5666666666666667], [1.59330252E12, 3.566666666666667], [1.59330222E12, 1.8166666666666667], [1.59330312E12, 3.0833333333333335], [1.59330318E12, 3.1166666666666667], [1.59330282E12, 3.2333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59330342E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.59330222E12, "maxY": 4.0, "series": [{"data": [[1.59330228E12, 4.0], [1.59330288E12, 3.183333333333333], [1.59330294E12, 3.25], [1.59330258E12, 3.3833333333333333], [1.59330324E12, 3.033333333333333], [1.5933033E12, 2.95], [1.5933027E12, 3.35], [1.59330264E12, 3.3333333333333335], [1.59330234E12, 3.683333333333333], [1.593303E12, 3.15], [1.59330276E12, 2.6], [1.59330306E12, 3.15], [1.59330246E12, 3.6666666666666665], [1.59330336E12, 2.9833333333333334], [1.5933024E12, 3.6166666666666667], [1.59330342E12, 3.1666666666666665], [1.59330252E12, 3.566666666666667], [1.59330222E12, 0.15], [1.59330312E12, 3.0833333333333335], [1.59330318E12, 3.1166666666666667], [1.59330282E12, 3.2333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59330276E12, 1.0166666666666666]], "isOverall": false, "label": "401", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59330342E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.59330222E12, "maxY": 4.0, "series": [{"data": [[1.59330276E12, 1.0166666666666666]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-failure", "isController": false}, {"data": [[1.59330228E12, 4.0], [1.59330288E12, 3.183333333333333], [1.59330294E12, 3.25], [1.59330258E12, 3.3833333333333333], [1.59330324E12, 3.033333333333333], [1.5933033E12, 2.95], [1.5933027E12, 3.35], [1.59330264E12, 3.3333333333333335], [1.59330234E12, 3.683333333333333], [1.593303E12, 3.15], [1.59330276E12, 2.6], [1.59330306E12, 3.15], [1.59330246E12, 3.6666666666666665], [1.59330336E12, 2.9833333333333334], [1.5933024E12, 3.6166666666666667], [1.59330342E12, 3.1666666666666665], [1.59330252E12, 3.566666666666667], [1.59330222E12, 0.15], [1.59330312E12, 3.0833333333333335], [1.59330318E12, 3.1166666666666667], [1.59330282E12, 3.2333333333333334]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59330342E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.59330222E12, "maxY": 4.0, "series": [{"data": [[1.59330228E12, 4.0], [1.59330288E12, 3.183333333333333], [1.59330294E12, 3.25], [1.59330258E12, 3.3833333333333333], [1.59330324E12, 3.033333333333333], [1.5933033E12, 2.95], [1.5933027E12, 3.35], [1.59330264E12, 3.3333333333333335], [1.59330234E12, 3.683333333333333], [1.593303E12, 3.15], [1.59330276E12, 2.6], [1.59330306E12, 3.15], [1.59330246E12, 3.6666666666666665], [1.59330336E12, 2.9833333333333334], [1.5933024E12, 3.6166666666666667], [1.59330342E12, 3.1666666666666665], [1.59330252E12, 3.566666666666667], [1.59330222E12, 0.15], [1.59330312E12, 3.0833333333333335], [1.59330318E12, 3.1166666666666667], [1.59330282E12, 3.2333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59330276E12, 1.0166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59330342E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

