/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 973.0, "minX": 0.0, "maxY": 45385.0, "series": [{"data": [[0.0, 973.0], [0.1, 6537.0], [0.2, 8733.0], [0.3, 11431.0], [0.4, 11881.0], [0.5, 13714.0], [0.6, 14855.0], [0.7, 14931.0], [0.8, 15148.0], [0.9, 15424.0], [1.0, 16697.0], [1.1, 17267.0], [1.2, 18461.0], [1.3, 18665.0], [1.4, 18839.0], [1.5, 18873.0], [1.6, 19332.0], [1.7, 19351.0], [1.8, 19379.0], [1.9, 19499.0], [2.0, 19558.0], [2.1, 19609.0], [2.2, 19709.0], [2.3, 19820.0], [2.4, 19865.0], [2.5, 19952.0], [2.6, 19982.0], [2.7, 20036.0], [2.8, 20126.0], [2.9, 20160.0], [3.0, 20199.0], [3.1, 20211.0], [3.2, 20251.0], [3.3, 20342.0], [3.4, 20375.0], [3.5, 20390.0], [3.6, 20464.0], [3.7, 20506.0], [3.8, 20526.0], [3.9, 20534.0], [4.0, 20552.0], [4.1, 20576.0], [4.2, 20601.0], [4.3, 20680.0], [4.4, 20693.0], [4.5, 20729.0], [4.6, 20762.0], [4.7, 20829.0], [4.8, 20860.0], [4.9, 20920.0], [5.0, 20940.0], [5.1, 20986.0], [5.2, 21008.0], [5.3, 21011.0], [5.4, 21080.0], [5.5, 21101.0], [5.6, 21116.0], [5.7, 21150.0], [5.8, 21157.0], [5.9, 21216.0], [6.0, 21275.0], [6.1, 21294.0], [6.2, 21305.0], [6.3, 21313.0], [6.4, 21328.0], [6.5, 21338.0], [6.6, 21353.0], [6.7, 21362.0], [6.8, 21377.0], [6.9, 21406.0], [7.0, 21430.0], [7.1, 21479.0], [7.2, 21492.0], [7.3, 21500.0], [7.4, 21524.0], [7.5, 21547.0], [7.6, 21564.0], [7.7, 21578.0], [7.8, 21622.0], [7.9, 21636.0], [8.0, 21645.0], [8.1, 21694.0], [8.2, 21711.0], [8.3, 21733.0], [8.4, 21750.0], [8.5, 21798.0], [8.6, 21822.0], [8.7, 21839.0], [8.8, 21846.0], [8.9, 21853.0], [9.0, 21883.0], [9.1, 21910.0], [9.2, 21916.0], [9.3, 21938.0], [9.4, 21944.0], [9.5, 21963.0], [9.6, 21985.0], [9.7, 22013.0], [9.8, 22029.0], [9.9, 22034.0], [10.0, 22057.0], [10.1, 22067.0], [10.2, 22084.0], [10.3, 22102.0], [10.4, 22121.0], [10.5, 22140.0], [10.6, 22153.0], [10.7, 22183.0], [10.8, 22214.0], [10.9, 22220.0], [11.0, 22248.0], [11.1, 22270.0], [11.2, 22285.0], [11.3, 22295.0], [11.4, 22297.0], [11.5, 22318.0], [11.6, 22332.0], [11.7, 22337.0], [11.8, 22341.0], [11.9, 22346.0], [12.0, 22350.0], [12.1, 22374.0], [12.2, 22375.0], [12.3, 22390.0], [12.4, 22406.0], [12.5, 22410.0], [12.6, 22417.0], [12.7, 22437.0], [12.8, 22448.0], [12.9, 22466.0], [13.0, 22479.0], [13.1, 22487.0], [13.2, 22507.0], [13.3, 22526.0], [13.4, 22528.0], [13.5, 22530.0], [13.6, 22540.0], [13.7, 22550.0], [13.8, 22556.0], [13.9, 22578.0], [14.0, 22596.0], [14.1, 22613.0], [14.2, 22614.0], [14.3, 22619.0], [14.4, 22631.0], [14.5, 22646.0], [14.6, 22656.0], [14.7, 22661.0], [14.8, 22673.0], [14.9, 22705.0], [15.0, 22712.0], [15.1, 22716.0], [15.2, 22738.0], [15.3, 22744.0], [15.4, 22751.0], [15.5, 22754.0], [15.6, 22770.0], [15.7, 22805.0], [15.8, 22807.0], [15.9, 22809.0], [16.0, 22812.0], [16.1, 22829.0], [16.2, 22843.0], [16.3, 22844.0], [16.4, 22846.0], [16.5, 22870.0], [16.6, 22874.0], [16.7, 22881.0], [16.8, 22921.0], [16.9, 22924.0], [17.0, 22944.0], [17.1, 22965.0], [17.2, 22972.0], [17.3, 23003.0], [17.4, 23013.0], [17.5, 23039.0], [17.6, 23041.0], [17.7, 23043.0], [17.8, 23056.0], [17.9, 23068.0], [18.0, 23081.0], [18.1, 23085.0], [18.2, 23092.0], [18.3, 23104.0], [18.4, 23114.0], [18.5, 23129.0], [18.6, 23143.0], [18.7, 23156.0], [18.8, 23166.0], [18.9, 23186.0], [19.0, 23195.0], [19.1, 23204.0], [19.2, 23210.0], [19.3, 23230.0], [19.4, 23250.0], [19.5, 23273.0], [19.6, 23275.0], [19.7, 23276.0], [19.8, 23295.0], [19.9, 23302.0], [20.0, 23312.0], [20.1, 23326.0], [20.2, 23330.0], [20.3, 23339.0], [20.4, 23349.0], [20.5, 23353.0], [20.6, 23366.0], [20.7, 23369.0], [20.8, 23381.0], [20.9, 23387.0], [21.0, 23392.0], [21.1, 23399.0], [21.2, 23422.0], [21.3, 23435.0], [21.4, 23444.0], [21.5, 23469.0], [21.6, 23484.0], [21.7, 23491.0], [21.8, 23495.0], [21.9, 23511.0], [22.0, 23513.0], [22.1, 23523.0], [22.2, 23539.0], [22.3, 23547.0], [22.4, 23551.0], [22.5, 23554.0], [22.6, 23581.0], [22.7, 23586.0], [22.8, 23590.0], [22.9, 23593.0], [23.0, 23617.0], [23.1, 23626.0], [23.2, 23639.0], [23.3, 23651.0], [23.4, 23654.0], [23.5, 23656.0], [23.6, 23667.0], [23.7, 23676.0], [23.8, 23693.0], [23.9, 23694.0], [24.0, 23700.0], [24.1, 23705.0], [24.2, 23706.0], [24.3, 23722.0], [24.4, 23732.0], [24.5, 23735.0], [24.6, 23736.0], [24.7, 23747.0], [24.8, 23759.0], [24.9, 23762.0], [25.0, 23773.0], [25.1, 23787.0], [25.2, 23791.0], [25.3, 23797.0], [25.4, 23813.0], [25.5, 23815.0], [25.6, 23820.0], [25.7, 23831.0], [25.8, 23842.0], [25.9, 23846.0], [26.0, 23855.0], [26.1, 23856.0], [26.2, 23865.0], [26.3, 23867.0], [26.4, 23869.0], [26.5, 23871.0], [26.6, 23874.0], [26.7, 23880.0], [26.8, 23893.0], [26.9, 23907.0], [27.0, 23910.0], [27.1, 23913.0], [27.2, 23921.0], [27.3, 23936.0], [27.4, 23939.0], [27.5, 23950.0], [27.6, 23969.0], [27.7, 23973.0], [27.8, 23975.0], [27.9, 23981.0], [28.0, 23990.0], [28.1, 23996.0], [28.2, 24005.0], [28.3, 24011.0], [28.4, 24014.0], [28.5, 24018.0], [28.6, 24024.0], [28.7, 24047.0], [28.8, 24050.0], [28.9, 24063.0], [29.0, 24075.0], [29.1, 24081.0], [29.2, 24086.0], [29.3, 24088.0], [29.4, 24096.0], [29.5, 24096.0], [29.6, 24100.0], [29.7, 24109.0], [29.8, 24117.0], [29.9, 24135.0], [30.0, 24148.0], [30.1, 24159.0], [30.2, 24168.0], [30.3, 24177.0], [30.4, 24180.0], [30.5, 24184.0], [30.6, 24199.0], [30.7, 24206.0], [30.8, 24216.0], [30.9, 24222.0], [31.0, 24224.0], [31.1, 24244.0], [31.2, 24246.0], [31.3, 24247.0], [31.4, 24260.0], [31.5, 24276.0], [31.6, 24287.0], [31.7, 24297.0], [31.8, 24306.0], [31.9, 24313.0], [32.0, 24323.0], [32.1, 24329.0], [32.2, 24333.0], [32.3, 24336.0], [32.4, 24343.0], [32.5, 24345.0], [32.6, 24348.0], [32.7, 24350.0], [32.8, 24356.0], [32.9, 24361.0], [33.0, 24370.0], [33.1, 24381.0], [33.2, 24386.0], [33.3, 24395.0], [33.4, 24400.0], [33.5, 24404.0], [33.6, 24414.0], [33.7, 24421.0], [33.8, 24433.0], [33.9, 24439.0], [34.0, 24448.0], [34.1, 24465.0], [34.2, 24484.0], [34.3, 24488.0], [34.4, 24491.0], [34.5, 24494.0], [34.6, 24498.0], [34.7, 24503.0], [34.8, 24504.0], [34.9, 24507.0], [35.0, 24511.0], [35.1, 24517.0], [35.2, 24519.0], [35.3, 24537.0], [35.4, 24546.0], [35.5, 24551.0], [35.6, 24560.0], [35.7, 24562.0], [35.8, 24578.0], [35.9, 24581.0], [36.0, 24596.0], [36.1, 24608.0], [36.2, 24614.0], [36.3, 24626.0], [36.4, 24630.0], [36.5, 24633.0], [36.6, 24637.0], [36.7, 24640.0], [36.8, 24648.0], [36.9, 24656.0], [37.0, 24671.0], [37.1, 24674.0], [37.2, 24698.0], [37.3, 24704.0], [37.4, 24709.0], [37.5, 24713.0], [37.6, 24717.0], [37.7, 24719.0], [37.8, 24729.0], [37.9, 24737.0], [38.0, 24740.0], [38.1, 24754.0], [38.2, 24769.0], [38.3, 24783.0], [38.4, 24804.0], [38.5, 24807.0], [38.6, 24816.0], [38.7, 24823.0], [38.8, 24834.0], [38.9, 24847.0], [39.0, 24856.0], [39.1, 24867.0], [39.2, 24875.0], [39.3, 24878.0], [39.4, 24888.0], [39.5, 24893.0], [39.6, 24901.0], [39.7, 24911.0], [39.8, 24912.0], [39.9, 24923.0], [40.0, 24925.0], [40.1, 24933.0], [40.2, 24935.0], [40.3, 24943.0], [40.4, 24951.0], [40.5, 24955.0], [40.6, 24961.0], [40.7, 24967.0], [40.8, 24972.0], [40.9, 24997.0], [41.0, 25006.0], [41.1, 25007.0], [41.2, 25021.0], [41.3, 25039.0], [41.4, 25047.0], [41.5, 25051.0], [41.6, 25053.0], [41.7, 25068.0], [41.8, 25084.0], [41.9, 25102.0], [42.0, 25103.0], [42.1, 25110.0], [42.2, 25132.0], [42.3, 25139.0], [42.4, 25148.0], [42.5, 25154.0], [42.6, 25158.0], [42.7, 25165.0], [42.8, 25175.0], [42.9, 25179.0], [43.0, 25197.0], [43.1, 25204.0], [43.2, 25219.0], [43.3, 25228.0], [43.4, 25241.0], [43.5, 25249.0], [43.6, 25253.0], [43.7, 25257.0], [43.8, 25263.0], [43.9, 25277.0], [44.0, 25282.0], [44.1, 25289.0], [44.2, 25292.0], [44.3, 25301.0], [44.4, 25303.0], [44.5, 25309.0], [44.6, 25313.0], [44.7, 25322.0], [44.8, 25336.0], [44.9, 25342.0], [45.0, 25345.0], [45.1, 25350.0], [45.2, 25358.0], [45.3, 25363.0], [45.4, 25369.0], [45.5, 25379.0], [45.6, 25383.0], [45.7, 25390.0], [45.8, 25410.0], [45.9, 25412.0], [46.0, 25425.0], [46.1, 25434.0], [46.2, 25437.0], [46.3, 25446.0], [46.4, 25447.0], [46.5, 25449.0], [46.6, 25450.0], [46.7, 25453.0], [46.8, 25456.0], [46.9, 25459.0], [47.0, 25465.0], [47.1, 25469.0], [47.2, 25471.0], [47.3, 25482.0], [47.4, 25485.0], [47.5, 25487.0], [47.6, 25495.0], [47.7, 25509.0], [47.8, 25523.0], [47.9, 25537.0], [48.0, 25539.0], [48.1, 25540.0], [48.2, 25551.0], [48.3, 25556.0], [48.4, 25563.0], [48.5, 25571.0], [48.6, 25574.0], [48.7, 25586.0], [48.8, 25593.0], [48.9, 25604.0], [49.0, 25625.0], [49.1, 25643.0], [49.2, 25650.0], [49.3, 25662.0], [49.4, 25675.0], [49.5, 25679.0], [49.6, 25691.0], [49.7, 25710.0], [49.8, 25730.0], [49.9, 25735.0], [50.0, 25741.0], [50.1, 25746.0], [50.2, 25749.0], [50.3, 25766.0], [50.4, 25772.0], [50.5, 25775.0], [50.6, 25785.0], [50.7, 25788.0], [50.8, 25791.0], [50.9, 25794.0], [51.0, 25795.0], [51.1, 25806.0], [51.2, 25810.0], [51.3, 25820.0], [51.4, 25830.0], [51.5, 25837.0], [51.6, 25838.0], [51.7, 25842.0], [51.8, 25853.0], [51.9, 25857.0], [52.0, 25872.0], [52.1, 25876.0], [52.2, 25876.0], [52.3, 25879.0], [52.4, 25886.0], [52.5, 25910.0], [52.6, 25916.0], [52.7, 25919.0], [52.8, 25924.0], [52.9, 25929.0], [53.0, 25936.0], [53.1, 25945.0], [53.2, 25949.0], [53.3, 25956.0], [53.4, 25959.0], [53.5, 25960.0], [53.6, 25963.0], [53.7, 25965.0], [53.8, 25968.0], [53.9, 25970.0], [54.0, 25989.0], [54.1, 26005.0], [54.2, 26009.0], [54.3, 26015.0], [54.4, 26019.0], [54.5, 26026.0], [54.6, 26040.0], [54.7, 26047.0], [54.8, 26052.0], [54.9, 26067.0], [55.0, 26069.0], [55.1, 26085.0], [55.2, 26087.0], [55.3, 26095.0], [55.4, 26102.0], [55.5, 26115.0], [55.6, 26120.0], [55.7, 26123.0], [55.8, 26133.0], [55.9, 26143.0], [56.0, 26148.0], [56.1, 26154.0], [56.2, 26155.0], [56.3, 26164.0], [56.4, 26164.0], [56.5, 26172.0], [56.6, 26178.0], [56.7, 26188.0], [56.8, 26193.0], [56.9, 26220.0], [57.0, 26230.0], [57.1, 26240.0], [57.2, 26241.0], [57.3, 26248.0], [57.4, 26274.0], [57.5, 26277.0], [57.6, 26279.0], [57.7, 26284.0], [57.8, 26293.0], [57.9, 26300.0], [58.0, 26313.0], [58.1, 26321.0], [58.2, 26332.0], [58.3, 26338.0], [58.4, 26346.0], [58.5, 26352.0], [58.6, 26361.0], [58.7, 26373.0], [58.8, 26385.0], [58.9, 26390.0], [59.0, 26396.0], [59.1, 26400.0], [59.2, 26404.0], [59.3, 26407.0], [59.4, 26416.0], [59.5, 26425.0], [59.6, 26439.0], [59.7, 26447.0], [59.8, 26448.0], [59.9, 26451.0], [60.0, 26460.0], [60.1, 26478.0], [60.2, 26489.0], [60.3, 26495.0], [60.4, 26504.0], [60.5, 26514.0], [60.6, 26531.0], [60.7, 26537.0], [60.8, 26538.0], [60.9, 26548.0], [61.0, 26551.0], [61.1, 26561.0], [61.2, 26571.0], [61.3, 26576.0], [61.4, 26580.0], [61.5, 26600.0], [61.6, 26600.0], [61.7, 26608.0], [61.8, 26615.0], [61.9, 26623.0], [62.0, 26627.0], [62.1, 26628.0], [62.2, 26636.0], [62.3, 26648.0], [62.4, 26666.0], [62.5, 26674.0], [62.6, 26681.0], [62.7, 26690.0], [62.8, 26693.0], [62.9, 26715.0], [63.0, 26727.0], [63.1, 26731.0], [63.2, 26741.0], [63.3, 26747.0], [63.4, 26753.0], [63.5, 26760.0], [63.6, 26779.0], [63.7, 26787.0], [63.8, 26804.0], [63.9, 26809.0], [64.0, 26813.0], [64.1, 26819.0], [64.2, 26821.0], [64.3, 26826.0], [64.4, 26835.0], [64.5, 26841.0], [64.6, 26854.0], [64.7, 26863.0], [64.8, 26875.0], [64.9, 26885.0], [65.0, 26889.0], [65.1, 26895.0], [65.2, 26918.0], [65.3, 26927.0], [65.4, 26927.0], [65.5, 26933.0], [65.6, 26940.0], [65.7, 26952.0], [65.8, 26953.0], [65.9, 26958.0], [66.0, 26963.0], [66.1, 26971.0], [66.2, 26976.0], [66.3, 26983.0], [66.4, 26988.0], [66.5, 26992.0], [66.6, 26994.0], [66.7, 27002.0], [66.8, 27021.0], [66.9, 27034.0], [67.0, 27041.0], [67.1, 27050.0], [67.2, 27054.0], [67.3, 27055.0], [67.4, 27067.0], [67.5, 27081.0], [67.6, 27084.0], [67.7, 27094.0], [67.8, 27103.0], [67.9, 27109.0], [68.0, 27116.0], [68.1, 27123.0], [68.2, 27129.0], [68.3, 27140.0], [68.4, 27151.0], [68.5, 27162.0], [68.6, 27164.0], [68.7, 27174.0], [68.8, 27179.0], [68.9, 27189.0], [69.0, 27191.0], [69.1, 27212.0], [69.2, 27218.0], [69.3, 27231.0], [69.4, 27248.0], [69.5, 27265.0], [69.6, 27275.0], [69.7, 27291.0], [69.8, 27312.0], [69.9, 27313.0], [70.0, 27342.0], [70.1, 27344.0], [70.2, 27354.0], [70.3, 27361.0], [70.4, 27373.0], [70.5, 27382.0], [70.6, 27392.0], [70.7, 27395.0], [70.8, 27404.0], [70.9, 27410.0], [71.0, 27427.0], [71.1, 27438.0], [71.2, 27443.0], [71.3, 27455.0], [71.4, 27458.0], [71.5, 27462.0], [71.6, 27481.0], [71.7, 27482.0], [71.8, 27495.0], [71.9, 27508.0], [72.0, 27509.0], [72.1, 27517.0], [72.2, 27542.0], [72.3, 27546.0], [72.4, 27566.0], [72.5, 27567.0], [72.6, 27569.0], [72.7, 27574.0], [72.8, 27596.0], [72.9, 27605.0], [73.0, 27624.0], [73.1, 27633.0], [73.2, 27647.0], [73.3, 27652.0], [73.4, 27669.0], [73.5, 27679.0], [73.6, 27683.0], [73.7, 27702.0], [73.8, 27711.0], [73.9, 27719.0], [74.0, 27732.0], [74.1, 27758.0], [74.2, 27762.0], [74.3, 27766.0], [74.4, 27785.0], [74.5, 27786.0], [74.6, 27790.0], [74.7, 27808.0], [74.8, 27814.0], [74.9, 27827.0], [75.0, 27845.0], [75.1, 27850.0], [75.2, 27863.0], [75.3, 27879.0], [75.4, 27881.0], [75.5, 27891.0], [75.6, 27899.0], [75.7, 27901.0], [75.8, 27921.0], [75.9, 27928.0], [76.0, 27947.0], [76.1, 27963.0], [76.2, 27966.0], [76.3, 27981.0], [76.4, 27985.0], [76.5, 27990.0], [76.6, 27994.0], [76.7, 28005.0], [76.8, 28012.0], [76.9, 28015.0], [77.0, 28031.0], [77.1, 28042.0], [77.2, 28043.0], [77.3, 28062.0], [77.4, 28065.0], [77.5, 28073.0], [77.6, 28087.0], [77.7, 28091.0], [77.8, 28095.0], [77.9, 28096.0], [78.0, 28100.0], [78.1, 28114.0], [78.2, 28146.0], [78.3, 28159.0], [78.4, 28170.0], [78.5, 28181.0], [78.6, 28187.0], [78.7, 28195.0], [78.8, 28213.0], [78.9, 28220.0], [79.0, 28222.0], [79.1, 28227.0], [79.2, 28233.0], [79.3, 28245.0], [79.4, 28246.0], [79.5, 28259.0], [79.6, 28264.0], [79.7, 28274.0], [79.8, 28289.0], [79.9, 28293.0], [80.0, 28296.0], [80.1, 28337.0], [80.2, 28342.0], [80.3, 28350.0], [80.4, 28365.0], [80.5, 28374.0], [80.6, 28379.0], [80.7, 28383.0], [80.8, 28408.0], [80.9, 28439.0], [81.0, 28469.0], [81.1, 28476.0], [81.2, 28485.0], [81.3, 28488.0], [81.4, 28509.0], [81.5, 28522.0], [81.6, 28537.0], [81.7, 28547.0], [81.8, 28555.0], [81.9, 28608.0], [82.0, 28616.0], [82.1, 28633.0], [82.2, 28678.0], [82.3, 28681.0], [82.4, 28702.0], [82.5, 28704.0], [82.6, 28714.0], [82.7, 28729.0], [82.8, 28742.0], [82.9, 28757.0], [83.0, 28772.0], [83.1, 28782.0], [83.2, 28806.0], [83.3, 28811.0], [83.4, 28817.0], [83.5, 28831.0], [83.6, 28839.0], [83.7, 28855.0], [83.8, 28867.0], [83.9, 28878.0], [84.0, 28889.0], [84.1, 28893.0], [84.2, 28913.0], [84.3, 28936.0], [84.4, 28962.0], [84.5, 28982.0], [84.6, 28987.0], [84.7, 29009.0], [84.8, 29010.0], [84.9, 29018.0], [85.0, 29025.0], [85.1, 29043.0], [85.2, 29063.0], [85.3, 29106.0], [85.4, 29112.0], [85.5, 29120.0], [85.6, 29137.0], [85.7, 29153.0], [85.8, 29158.0], [85.9, 29186.0], [86.0, 29198.0], [86.1, 29200.0], [86.2, 29226.0], [86.3, 29247.0], [86.4, 29258.0], [86.5, 29273.0], [86.6, 29290.0], [86.7, 29296.0], [86.8, 29310.0], [86.9, 29332.0], [87.0, 29334.0], [87.1, 29359.0], [87.2, 29390.0], [87.3, 29394.0], [87.4, 29420.0], [87.5, 29470.0], [87.6, 29486.0], [87.7, 29492.0], [87.8, 29496.0], [87.9, 29532.0], [88.0, 29543.0], [88.1, 29568.0], [88.2, 29580.0], [88.3, 29592.0], [88.4, 29613.0], [88.5, 29634.0], [88.6, 29650.0], [88.7, 29683.0], [88.8, 29697.0], [88.9, 29705.0], [89.0, 29728.0], [89.1, 29742.0], [89.2, 29747.0], [89.3, 29760.0], [89.4, 29776.0], [89.5, 29795.0], [89.6, 29827.0], [89.7, 29832.0], [89.8, 29864.0], [89.9, 29903.0], [90.0, 29948.0], [90.1, 29953.0], [90.2, 29964.0], [90.3, 29999.0], [90.4, 30013.0], [90.5, 30052.0], [90.6, 30067.0], [90.7, 30102.0], [90.8, 30116.0], [90.9, 30130.0], [91.0, 30150.0], [91.1, 30181.0], [91.2, 30220.0], [91.3, 30237.0], [91.4, 30244.0], [91.5, 30268.0], [91.6, 30290.0], [91.7, 30344.0], [91.8, 30357.0], [91.9, 30361.0], [92.0, 30394.0], [92.1, 30414.0], [92.2, 30435.0], [92.3, 30515.0], [92.4, 30574.0], [92.5, 30582.0], [92.6, 30632.0], [92.7, 30681.0], [92.8, 30727.0], [92.9, 30763.0], [93.0, 30793.0], [93.1, 30847.0], [93.2, 30868.0], [93.3, 30903.0], [93.4, 30973.0], [93.5, 31032.0], [93.6, 31101.0], [93.7, 31145.0], [93.8, 31196.0], [93.9, 31214.0], [94.0, 31236.0], [94.1, 31247.0], [94.2, 31269.0], [94.3, 31277.0], [94.4, 31305.0], [94.5, 31319.0], [94.6, 31354.0], [94.7, 31358.0], [94.8, 31457.0], [94.9, 31458.0], [95.0, 31491.0], [95.1, 31512.0], [95.2, 31550.0], [95.3, 31598.0], [95.4, 31614.0], [95.5, 31656.0], [95.6, 31672.0], [95.7, 31715.0], [95.8, 31757.0], [95.9, 31789.0], [96.0, 31875.0], [96.1, 31907.0], [96.2, 31940.0], [96.3, 32066.0], [96.4, 32114.0], [96.5, 32200.0], [96.6, 32324.0], [96.7, 32501.0], [96.8, 32630.0], [96.9, 32678.0], [97.0, 32769.0], [97.1, 32909.0], [97.2, 33047.0], [97.3, 33225.0], [97.4, 33395.0], [97.5, 33558.0], [97.6, 33618.0], [97.7, 33788.0], [97.8, 34002.0], [97.9, 34146.0], [98.0, 34289.0], [98.1, 34405.0], [98.2, 34684.0], [98.3, 34780.0], [98.4, 35417.0], [98.5, 35845.0], [98.6, 35993.0], [98.7, 36325.0], [98.8, 38601.0], [98.9, 39224.0], [99.0, 39780.0], [99.1, 40150.0], [99.2, 40646.0], [99.3, 40923.0], [99.4, 41415.0], [99.5, 41770.0], [99.6, 42263.0], [99.7, 44262.0], [99.8, 44646.0], [99.9, 45142.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 38.0, "series": [{"data": [[34100.0, 2.0], [32900.0, 2.0], [33700.0, 1.0], [33300.0, 1.0], [39700.0, 1.0], [40100.0, 2.0], [40900.0, 1.0], [41700.0, 2.0], [45300.0, 1.0], [900.0, 1.0], [3300.0, 1.0], [6500.0, 2.0], [8700.0, 1.0], [10000.0, 1.0], [11400.0, 2.0], [11800.0, 1.0], [12600.0, 1.0], [13700.0, 1.0], [14800.0, 1.0], [14700.0, 1.0], [14900.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15400.0, 1.0], [16300.0, 1.0], [16600.0, 1.0], [17200.0, 1.0], [17000.0, 1.0], [18400.0, 1.0], [19200.0, 1.0], [19400.0, 2.0], [18600.0, 1.0], [18800.0, 3.0], [20000.0, 2.0], [19800.0, 4.0], [20400.0, 3.0], [20200.0, 5.0], [19600.0, 3.0], [21400.0, 8.0], [20800.0, 3.0], [21200.0, 5.0], [21000.0, 7.0], [20600.0, 6.0], [22400.0, 17.0], [22000.0, 12.0], [22200.0, 13.0], [21600.0, 8.0], [21800.0, 10.0], [22800.0, 22.0], [23400.0, 14.0], [22600.0, 17.0], [23200.0, 15.0], [23000.0, 19.0], [24400.0, 26.0], [24000.0, 28.0], [23800.0, 31.0], [23600.0, 20.0], [24200.0, 23.0], [24800.0, 24.0], [25000.0, 18.0], [25400.0, 38.0], [24600.0, 25.0], [25200.0, 23.0], [25800.0, 29.0], [26000.0, 26.0], [26600.0, 27.0], [25600.0, 17.0], [26200.0, 20.0], [26400.0, 26.0], [26800.0, 27.0], [27600.0, 16.0], [27400.0, 21.0], [27200.0, 13.0], [27000.0, 22.0], [28200.0, 26.0], [28400.0, 12.0], [28000.0, 26.0], [27800.0, 19.0], [28600.0, 10.0], [29200.0, 15.0], [29400.0, 10.0], [28800.0, 19.0], [29000.0, 12.0], [29600.0, 9.0], [29800.0, 7.0], [30200.0, 10.0], [30600.0, 4.0], [30400.0, 5.0], [30000.0, 7.0], [31400.0, 7.0], [31600.0, 7.0], [31200.0, 10.0], [30800.0, 4.0], [31000.0, 3.0], [32600.0, 3.0], [32000.0, 1.0], [32200.0, 2.0], [31800.0, 3.0], [33200.0, 2.0], [34400.0, 1.0], [34800.0, 1.0], [33600.0, 2.0], [32800.0, 1.0], [34000.0, 1.0], [35600.0, 1.0], [36800.0, 1.0], [36000.0, 1.0], [39200.0, 2.0], [40400.0, 1.0], [40800.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [44800.0, 1.0], [33500.0, 3.0], [34700.0, 2.0], [33100.0, 1.0], [36300.0, 1.0], [35900.0, 1.0], [41500.0, 1.0], [45100.0, 1.0], [17300.0, 1.0], [18500.0, 1.0], [19300.0, 5.0], [18700.0, 1.0], [19700.0, 2.0], [20100.0, 5.0], [20300.0, 5.0], [19900.0, 4.0], [19500.0, 3.0], [21500.0, 9.0], [21300.0, 15.0], [20500.0, 10.0], [21100.0, 8.0], [20900.0, 6.0], [20700.0, 4.0], [22500.0, 17.0], [22300.0, 18.0], [21700.0, 8.0], [22100.0, 10.0], [21900.0, 12.0], [22700.0, 16.0], [22900.0, 10.0], [23300.0, 26.0], [23500.0, 23.0], [23100.0, 17.0], [24100.0, 21.0], [23900.0, 26.0], [24500.0, 27.0], [24300.0, 32.0], [23700.0, 27.0], [25100.0, 24.0], [24900.0, 28.0], [25300.0, 30.0], [25500.0, 24.0], [24700.0, 23.0], [25700.0, 27.0], [25900.0, 32.0], [26100.0, 29.0], [26500.0, 22.0], [26300.0, 25.0], [26900.0, 31.0], [26700.0, 19.0], [27300.0, 21.0], [27100.0, 26.0], [27500.0, 20.0], [28500.0, 10.0], [27700.0, 21.0], [28100.0, 15.0], [28300.0, 15.0], [27900.0, 21.0], [29300.0, 11.0], [29500.0, 11.0], [28700.0, 16.0], [29100.0, 15.0], [28900.0, 11.0], [30100.0, 9.0], [30700.0, 7.0], [29700.0, 14.0], [30500.0, 5.0], [29900.0, 9.0], [30300.0, 8.0], [31500.0, 5.0], [31100.0, 6.0], [31300.0, 7.0], [31700.0, 5.0], [30900.0, 3.0], [32100.0, 3.0], [32700.0, 2.0], [31900.0, 4.0], [32500.0, 2.0], [32300.0, 2.0], [34600.0, 2.0], [33000.0, 1.0], [33800.0, 1.0], [34200.0, 3.0], [35400.0, 1.0], [35800.0, 2.0], [38600.0, 2.0], [40600.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [44200.0, 2.0], [44600.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1999.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1999.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.303030303030305, "minX": 1.59329874E12, "maxY": 100.0, "series": [{"data": [[1.5932991E12, 100.0], [1.59329892E12, 100.0], [1.59329874E12, 100.0], [1.59329922E12, 87.21052631578944], [1.59329904E12, 100.0], [1.59329886E12, 100.0], [1.59329916E12, 100.0], [1.59329898E12, 100.0], [1.5932988E12, 100.0], [1.59329928E12, 16.303030303030305]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329928E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 973.0, "minX": 1.0, "maxY": 36097.0, "series": [{"data": [[2.0, 3381.0], [3.0, 11431.0], [4.0, 6588.0], [5.0, 14774.0], [6.0, 10014.0], [7.0, 8733.0], [8.0, 11881.0], [9.0, 11450.0], [10.0, 11812.0], [11.0, 19351.0], [12.0, 13714.0], [13.0, 12657.0], [14.0, 17267.0], [15.0, 19662.0], [16.0, 20291.0], [17.0, 19872.0], [18.0, 19967.0], [19.0, 22662.0], [20.0, 24206.0], [21.0, 25456.0], [22.0, 19952.0], [23.0, 25047.0], [24.0, 20528.0], [25.0, 19558.0], [26.0, 19499.0], [27.0, 15424.0], [28.0, 20342.0], [29.0, 23820.0], [30.0, 21305.0], [31.0, 25679.0], [33.0, 28090.0], [32.0, 24260.0], [35.0, 25139.0], [34.0, 24465.0], [37.0, 25301.0], [36.0, 27049.0], [39.0, 22673.0], [38.0, 24484.0], [41.0, 27900.0], [40.0, 25146.0], [43.0, 23519.0], [42.0, 25965.0], [45.0, 26615.0], [44.0, 26177.0], [47.0, 23495.0], [46.0, 24558.0], [49.0, 24403.0], [48.0, 29948.0], [51.0, 36097.0], [50.0, 30618.0], [53.0, 29025.0], [52.0, 24108.0], [55.0, 24397.0], [54.0, 34405.0], [57.0, 22285.0], [56.0, 30866.0], [59.0, 26792.0], [58.0, 24612.0], [61.0, 22466.0], [60.0, 23767.0], [63.0, 26336.0], [62.0, 24562.0], [67.0, 26531.0], [66.0, 27222.5], [65.0, 30632.0], [64.0, 26164.0], [71.0, 31340.0], [70.0, 27109.0], [69.0, 29758.0], [68.0, 29394.0], [75.0, 24497.0], [74.0, 29501.666666666668], [73.0, 27974.0], [72.0, 26040.0], [79.0, 25616.0], [78.0, 24214.5], [77.0, 27753.0], [76.0, 32382.0], [83.0, 25350.0], [82.0, 26747.0], [81.0, 28787.0], [80.0, 25736.5], [87.0, 23696.0], [86.0, 26323.0], [85.0, 28209.0], [84.0, 24783.0], [91.0, 26529.5], [90.0, 28692.0], [89.0, 28800.666666666668], [88.0, 26153.666666666668], [95.0, 23661.0], [94.0, 34612.0], [93.0, 25288.0], [92.0, 25475.5], [99.0, 26851.916666666668], [98.0, 29087.0], [97.0, 26958.214285714286], [96.0, 25904.333333333332], [100.0, 25989.75600436679], [1.0, 973.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.16099999999996, 25900.796499999982]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 643.5, "minX": 1.59329874E12, "maxY": 7986.0, "series": [{"data": [[1.5932991E12, 7260.0], [1.59329892E12, 7986.0], [1.59329874E12, 3663.0], [1.59329922E12, 7524.0], [1.59329904E12, 7788.0], [1.59329886E12, 7854.0], [1.59329916E12, 7293.0], [1.59329898E12, 7854.0], [1.5932988E12, 7689.0], [1.59329928E12, 1089.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5932991E12, 4290.0], [1.59329892E12, 4719.0], [1.59329874E12, 2164.5], [1.59329922E12, 4446.0], [1.59329904E12, 4602.0], [1.59329886E12, 4641.0], [1.59329916E12, 4309.5], [1.59329898E12, 4641.0], [1.5932988E12, 4543.5], [1.59329928E12, 643.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329928E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16768.72727272727, "minX": 1.59329874E12, "maxY": 29044.891891891893, "series": [{"data": [[1.5932991E12, 27371.368181818183], [1.59329892E12, 25023.892561983463], [1.59329874E12, 29044.891891891893], [1.59329922E12, 26955.144736842118], [1.59329904E12, 25568.470338983054], [1.59329886E12, 25159.62605042017], [1.59329916E12, 26852.248868778282], [1.59329898E12, 24893.23949579832], [1.5932988E12, 25407.287553648068], [1.59329928E12, 16768.72727272727]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329928E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16768.60606060606, "minX": 1.59329874E12, "maxY": 29044.6936936937, "series": [{"data": [[1.5932991E12, 27371.30454545454], [1.59329892E12, 25023.85537190082], [1.59329874E12, 29044.6936936937], [1.59329922E12, 26955.04385964912], [1.59329904E12, 25568.394067796606], [1.59329886E12, 25159.533613445354], [1.59329916E12, 26852.162895927595], [1.59329898E12, 24893.197478991577], [1.5932988E12, 25407.193133047203], [1.59329928E12, 16768.60606060606]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329928E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.15151515151515152, "minX": 1.59329874E12, "maxY": 31.45045045045046, "series": [{"data": [[1.5932991E12, 0.3909090909090908], [1.59329892E12, 0.5495867768595035], [1.59329874E12, 31.45045045045046], [1.59329922E12, 0.6008771929824558], [1.59329904E12, 0.6694915254237291], [1.59329886E12, 0.28571428571428586], [1.59329916E12, 0.38009049773755665], [1.59329898E12, 0.7310924369747899], [1.5932988E12, 0.6008583690987124], [1.59329928E12, 0.15151515151515152]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329928E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 973.0, "minX": 1.59329874E12, "maxY": 45385.0, "series": [{"data": [[1.5932991E12, 34102.0], [1.59329892E12, 32630.0], [1.59329874E12, 44646.0], [1.59329922E12, 36097.0], [1.59329904E12, 32678.0], [1.59329886E12, 33562.0], [1.59329916E12, 34747.0], [1.59329898E12, 34684.0], [1.5932988E12, 45385.0], [1.59329928E12, 25679.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5932991E12, 20659.94690394521], [1.59329892E12, 19419.952987312077], [1.59329874E12, 14855.607997970581], [1.59329922E12, 21432.988997324705], [1.59329904E12, 19569.568972142933], [1.59329886E12, 20144.66399635315], [1.59329916E12, 19819.093976023196], [1.59329898E12, 19700.509999430178], [1.5932988E12, 19377.473976066114], [1.59329928E12, 973.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5932991E12, 20847.418918778898], [1.59329892E12, 19467.848305075167], [1.59329874E12, 14863.268800811768], [1.59329922E12, 21443.087901070117], [1.59329904E12, 19674.725911142825], [1.59329886E12, 20158.43040145874], [1.59329916E12, 19991.29481833458], [1.59329898E12, 19702.661000227927], [1.5932988E12, 19467.821409573557], [1.59329928E12, 973.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5932991E12, 20768.65447652638], [1.59329892E12, 19446.561493656038], [1.59329874E12, 14859.86399898529], [1.59329922E12, 21438.599498662352], [1.59329904E12, 19627.989486071467], [1.59329886E12, 20152.311998176574], [1.59329916E12, 19914.393977081774], [1.59329898E12, 19701.70499971509], [1.5932988E12, 19427.666988033056], [1.59329928E12, 973.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5932991E12, 18857.0], [1.59329892E12, 19332.0], [1.59329874E12, 14855.0], [1.59329922E12, 21377.0], [1.59329904E12, 18839.0], [1.59329886E12, 19982.0], [1.59329916E12, 19367.0], [1.59329898E12, 18738.0], [1.5932988E12, 18873.0], [1.59329928E12, 973.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5932991E12, 27525.0], [1.59329892E12, 24715.5], [1.59329874E12, 27766.0], [1.59329922E12, 26574.0], [1.59329904E12, 25732.0], [1.59329886E12, 24957.0], [1.59329916E12, 26735.0], [1.59329898E12, 24829.0], [1.5932988E12, 25249.0], [1.59329928E12, 19499.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329928E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11665.5, "minX": 1.0, "maxY": 26666.0, "series": [{"data": [[2.0, 25598.5], [8.0, 26095.0], [9.0, 26666.0], [10.0, 25821.0], [11.0, 24336.5], [3.0, 25368.0], [12.0, 23744.0], [14.0, 11665.5], [1.0, 25795.0], [4.0, 25831.0], [18.0, 20435.0], [5.0, 25300.5], [6.0, 26365.5], [7.0, 26015.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11665.5, "minX": 1.0, "maxY": 26666.0, "series": [{"data": [[2.0, 25598.5], [8.0, 26094.5], [9.0, 26666.0], [10.0, 25821.0], [11.0, 24336.5], [3.0, 25368.0], [12.0, 23743.5], [14.0, 11665.5], [1.0, 25795.0], [4.0, 25831.0], [18.0, 20435.0], [5.0, 25300.5], [6.0, 26365.5], [7.0, 26015.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59329874E12, "maxY": 4.033333333333333, "series": [{"data": [[1.5932991E12, 3.6666666666666665], [1.59329892E12, 4.033333333333333], [1.59329874E12, 3.5166666666666666], [1.59329922E12, 2.6666666666666665], [1.59329904E12, 3.933333333333333], [1.59329886E12, 3.966666666666667], [1.59329916E12, 3.683333333333333], [1.59329898E12, 3.966666666666667], [1.5932988E12, 3.8833333333333333], [1.59329928E12, 0.016666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329928E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.59329874E12, "maxY": 4.033333333333333, "series": [{"data": [[1.5932991E12, 3.6666666666666665], [1.59329892E12, 4.033333333333333], [1.59329874E12, 1.85], [1.59329922E12, 3.8], [1.59329904E12, 3.933333333333333], [1.59329886E12, 3.966666666666667], [1.59329916E12, 3.683333333333333], [1.59329898E12, 3.966666666666667], [1.5932988E12, 3.8833333333333333], [1.59329928E12, 0.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329928E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.59329874E12, "maxY": 4.033333333333333, "series": [{"data": [[1.5932991E12, 3.6666666666666665], [1.59329892E12, 4.033333333333333], [1.59329874E12, 1.85], [1.59329922E12, 3.8], [1.59329904E12, 3.933333333333333], [1.59329886E12, 3.966666666666667], [1.59329916E12, 3.683333333333333], [1.59329898E12, 3.966666666666667], [1.5932988E12, 3.8833333333333333], [1.59329928E12, 0.55]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329928E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.59329874E12, "maxY": 4.033333333333333, "series": [{"data": [[1.5932991E12, 3.6666666666666665], [1.59329892E12, 4.033333333333333], [1.59329874E12, 1.85], [1.59329922E12, 3.8], [1.59329904E12, 3.933333333333333], [1.59329886E12, 3.966666666666667], [1.59329916E12, 3.683333333333333], [1.59329898E12, 3.966666666666667], [1.5932988E12, 3.8833333333333333], [1.59329928E12, 0.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329928E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

