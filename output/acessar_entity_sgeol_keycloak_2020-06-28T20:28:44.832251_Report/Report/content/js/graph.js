/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2295.0, "minX": 0.0, "maxY": 35019.0, "series": [{"data": [[0.0, 2295.0], [0.1, 2922.0], [0.2, 3922.0], [0.3, 4268.0], [0.4, 5708.0], [0.5, 6611.0], [0.6, 9893.0], [0.7, 10258.0], [0.8, 10602.0], [0.9, 11137.0], [1.0, 11816.0], [1.1, 12033.0], [1.2, 12113.0], [1.3, 12270.0], [1.4, 12507.0], [1.5, 12820.0], [1.6, 13049.0], [1.7, 13221.0], [1.8, 13230.0], [1.9, 13431.0], [2.0, 13688.0], [2.1, 14056.0], [2.2, 14493.0], [2.3, 14760.0], [2.4, 14917.0], [2.5, 14971.0], [2.6, 15017.0], [2.7, 15047.0], [2.8, 15089.0], [2.9, 15229.0], [3.0, 15284.0], [3.1, 15386.0], [3.2, 15431.0], [3.3, 15479.0], [3.4, 15508.0], [3.5, 15535.0], [3.6, 15580.0], [3.7, 15599.0], [3.8, 15673.0], [3.9, 15788.0], [4.0, 15886.0], [4.1, 15931.0], [4.2, 16078.0], [4.3, 16142.0], [4.4, 16216.0], [4.5, 16260.0], [4.6, 16339.0], [4.7, 16363.0], [4.8, 16400.0], [4.9, 16418.0], [5.0, 16561.0], [5.1, 16617.0], [5.2, 16715.0], [5.3, 16887.0], [5.4, 17053.0], [5.5, 17088.0], [5.6, 17206.0], [5.7, 17248.0], [5.8, 17284.0], [5.9, 17337.0], [6.0, 17361.0], [6.1, 17397.0], [6.2, 17434.0], [6.3, 17477.0], [6.4, 17505.0], [6.5, 17519.0], [6.6, 17581.0], [6.7, 17609.0], [6.8, 17629.0], [6.9, 17694.0], [7.0, 17731.0], [7.1, 17781.0], [7.2, 17805.0], [7.3, 17847.0], [7.4, 17859.0], [7.5, 17872.0], [7.6, 17890.0], [7.7, 17900.0], [7.8, 17944.0], [7.9, 17998.0], [8.0, 18014.0], [8.1, 18074.0], [8.2, 18089.0], [8.3, 18101.0], [8.4, 18122.0], [8.5, 18137.0], [8.6, 18143.0], [8.7, 18178.0], [8.8, 18202.0], [8.9, 18217.0], [9.0, 18284.0], [9.1, 18362.0], [9.2, 18388.0], [9.3, 18424.0], [9.4, 18456.0], [9.5, 18476.0], [9.6, 18505.0], [9.7, 18563.0], [9.8, 18592.0], [9.9, 18597.0], [10.0, 18620.0], [10.1, 18634.0], [10.2, 18651.0], [10.3, 18711.0], [10.4, 18738.0], [10.5, 18769.0], [10.6, 18815.0], [10.7, 18826.0], [10.8, 18846.0], [10.9, 18881.0], [11.0, 18903.0], [11.1, 18930.0], [11.2, 18938.0], [11.3, 18957.0], [11.4, 18975.0], [11.5, 18985.0], [11.6, 19001.0], [11.7, 19009.0], [11.8, 19024.0], [11.9, 19053.0], [12.0, 19056.0], [12.1, 19068.0], [12.2, 19077.0], [12.3, 19116.0], [12.4, 19141.0], [12.5, 19191.0], [12.6, 19237.0], [12.7, 19258.0], [12.8, 19286.0], [12.9, 19316.0], [13.0, 19337.0], [13.1, 19358.0], [13.2, 19370.0], [13.3, 19377.0], [13.4, 19388.0], [13.5, 19409.0], [13.6, 19459.0], [13.7, 19469.0], [13.8, 19494.0], [13.9, 19499.0], [14.0, 19514.0], [14.1, 19518.0], [14.2, 19524.0], [14.3, 19533.0], [14.4, 19556.0], [14.5, 19568.0], [14.6, 19617.0], [14.7, 19641.0], [14.8, 19647.0], [14.9, 19670.0], [15.0, 19691.0], [15.1, 19733.0], [15.2, 19742.0], [15.3, 19746.0], [15.4, 19769.0], [15.5, 19781.0], [15.6, 19796.0], [15.7, 19800.0], [15.8, 19817.0], [15.9, 19843.0], [16.0, 19859.0], [16.1, 19884.0], [16.2, 19900.0], [16.3, 19906.0], [16.4, 19914.0], [16.5, 19921.0], [16.6, 19934.0], [16.7, 19935.0], [16.8, 19959.0], [16.9, 19967.0], [17.0, 19979.0], [17.1, 19997.0], [17.2, 20007.0], [17.3, 20020.0], [17.4, 20024.0], [17.5, 20040.0], [17.6, 20046.0], [17.7, 20060.0], [17.8, 20088.0], [17.9, 20100.0], [18.0, 20122.0], [18.1, 20135.0], [18.2, 20143.0], [18.3, 20152.0], [18.4, 20173.0], [18.5, 20181.0], [18.6, 20182.0], [18.7, 20191.0], [18.8, 20197.0], [18.9, 20225.0], [19.0, 20238.0], [19.1, 20242.0], [19.2, 20253.0], [19.3, 20273.0], [19.4, 20285.0], [19.5, 20295.0], [19.6, 20301.0], [19.7, 20308.0], [19.8, 20316.0], [19.9, 20328.0], [20.0, 20349.0], [20.1, 20366.0], [20.2, 20375.0], [20.3, 20387.0], [20.4, 20394.0], [20.5, 20410.0], [20.6, 20418.0], [20.7, 20425.0], [20.8, 20429.0], [20.9, 20442.0], [21.0, 20447.0], [21.1, 20467.0], [21.2, 20475.0], [21.3, 20493.0], [21.4, 20497.0], [21.5, 20512.0], [21.6, 20516.0], [21.7, 20520.0], [21.8, 20537.0], [21.9, 20543.0], [22.0, 20551.0], [22.1, 20554.0], [22.2, 20564.0], [22.3, 20573.0], [22.4, 20587.0], [22.5, 20608.0], [22.6, 20615.0], [22.7, 20625.0], [22.8, 20644.0], [22.9, 20651.0], [23.0, 20655.0], [23.1, 20659.0], [23.2, 20668.0], [23.3, 20683.0], [23.4, 20690.0], [23.5, 20697.0], [23.6, 20713.0], [23.7, 20718.0], [23.8, 20721.0], [23.9, 20738.0], [24.0, 20742.0], [24.1, 20751.0], [24.2, 20755.0], [24.3, 20761.0], [24.4, 20766.0], [24.5, 20770.0], [24.6, 20777.0], [24.7, 20781.0], [24.8, 20788.0], [24.9, 20805.0], [25.0, 20810.0], [25.1, 20832.0], [25.2, 20841.0], [25.3, 20846.0], [25.4, 20861.0], [25.5, 20874.0], [25.6, 20887.0], [25.7, 20891.0], [25.8, 20896.0], [25.9, 20917.0], [26.0, 20931.0], [26.1, 20938.0], [26.2, 20961.0], [26.3, 20969.0], [26.4, 20982.0], [26.5, 20997.0], [26.6, 21000.0], [26.7, 21017.0], [26.8, 21027.0], [26.9, 21041.0], [27.0, 21050.0], [27.1, 21061.0], [27.2, 21070.0], [27.3, 21083.0], [27.4, 21105.0], [27.5, 21112.0], [27.6, 21120.0], [27.7, 21133.0], [27.8, 21138.0], [27.9, 21142.0], [28.0, 21145.0], [28.1, 21158.0], [28.2, 21164.0], [28.3, 21169.0], [28.4, 21175.0], [28.5, 21181.0], [28.6, 21192.0], [28.7, 21198.0], [28.8, 21202.0], [28.9, 21216.0], [29.0, 21224.0], [29.1, 21232.0], [29.2, 21235.0], [29.3, 21241.0], [29.4, 21255.0], [29.5, 21259.0], [29.6, 21265.0], [29.7, 21274.0], [29.8, 21281.0], [29.9, 21290.0], [30.0, 21299.0], [30.1, 21305.0], [30.2, 21314.0], [30.3, 21318.0], [30.4, 21323.0], [30.5, 21331.0], [30.6, 21338.0], [30.7, 21347.0], [30.8, 21364.0], [30.9, 21373.0], [31.0, 21395.0], [31.1, 21400.0], [31.2, 21408.0], [31.3, 21418.0], [31.4, 21444.0], [31.5, 21449.0], [31.6, 21453.0], [31.7, 21457.0], [31.8, 21466.0], [31.9, 21485.0], [32.0, 21495.0], [32.1, 21505.0], [32.2, 21516.0], [32.3, 21530.0], [32.4, 21537.0], [32.5, 21549.0], [32.6, 21564.0], [32.7, 21581.0], [32.8, 21593.0], [32.9, 21599.0], [33.0, 21608.0], [33.1, 21615.0], [33.2, 21623.0], [33.3, 21626.0], [33.4, 21636.0], [33.5, 21651.0], [33.6, 21656.0], [33.7, 21663.0], [33.8, 21666.0], [33.9, 21677.0], [34.0, 21684.0], [34.1, 21688.0], [34.2, 21694.0], [34.3, 21705.0], [34.4, 21714.0], [34.5, 21717.0], [34.6, 21725.0], [34.7, 21729.0], [34.8, 21733.0], [34.9, 21740.0], [35.0, 21748.0], [35.1, 21756.0], [35.2, 21774.0], [35.3, 21777.0], [35.4, 21789.0], [35.5, 21795.0], [35.6, 21800.0], [35.7, 21818.0], [35.8, 21837.0], [35.9, 21842.0], [36.0, 21845.0], [36.1, 21851.0], [36.2, 21860.0], [36.3, 21874.0], [36.4, 21879.0], [36.5, 21883.0], [36.6, 21888.0], [36.7, 21909.0], [36.8, 21915.0], [36.9, 21923.0], [37.0, 21956.0], [37.1, 21963.0], [37.2, 21970.0], [37.3, 21976.0], [37.4, 21979.0], [37.5, 21984.0], [37.6, 21991.0], [37.7, 22005.0], [37.8, 22018.0], [37.9, 22021.0], [38.0, 22025.0], [38.1, 22039.0], [38.2, 22047.0], [38.3, 22053.0], [38.4, 22064.0], [38.5, 22073.0], [38.6, 22076.0], [38.7, 22079.0], [38.8, 22085.0], [38.9, 22088.0], [39.0, 22105.0], [39.1, 22119.0], [39.2, 22130.0], [39.3, 22135.0], [39.4, 22140.0], [39.5, 22149.0], [39.6, 22156.0], [39.7, 22164.0], [39.8, 22165.0], [39.9, 22172.0], [40.0, 22183.0], [40.1, 22186.0], [40.2, 22191.0], [40.3, 22206.0], [40.4, 22219.0], [40.5, 22237.0], [40.6, 22245.0], [40.7, 22247.0], [40.8, 22252.0], [40.9, 22261.0], [41.0, 22266.0], [41.1, 22269.0], [41.2, 22295.0], [41.3, 22302.0], [41.4, 22308.0], [41.5, 22312.0], [41.6, 22319.0], [41.7, 22332.0], [41.8, 22351.0], [41.9, 22358.0], [42.0, 22367.0], [42.1, 22375.0], [42.2, 22380.0], [42.3, 22386.0], [42.4, 22396.0], [42.5, 22406.0], [42.6, 22413.0], [42.7, 22418.0], [42.8, 22421.0], [42.9, 22425.0], [43.0, 22435.0], [43.1, 22440.0], [43.2, 22453.0], [43.3, 22458.0], [43.4, 22464.0], [43.5, 22471.0], [43.6, 22476.0], [43.7, 22487.0], [43.8, 22493.0], [43.9, 22503.0], [44.0, 22507.0], [44.1, 22511.0], [44.2, 22511.0], [44.3, 22517.0], [44.4, 22523.0], [44.5, 22526.0], [44.6, 22528.0], [44.7, 22538.0], [44.8, 22542.0], [44.9, 22553.0], [45.0, 22558.0], [45.1, 22563.0], [45.2, 22575.0], [45.3, 22578.0], [45.4, 22584.0], [45.5, 22601.0], [45.6, 22609.0], [45.7, 22614.0], [45.8, 22616.0], [45.9, 22622.0], [46.0, 22627.0], [46.1, 22643.0], [46.2, 22648.0], [46.3, 22651.0], [46.4, 22655.0], [46.5, 22663.0], [46.6, 22671.0], [46.7, 22676.0], [46.8, 22689.0], [46.9, 22695.0], [47.0, 22703.0], [47.1, 22711.0], [47.2, 22720.0], [47.3, 22725.0], [47.4, 22735.0], [47.5, 22749.0], [47.6, 22753.0], [47.7, 22758.0], [47.8, 22763.0], [47.9, 22769.0], [48.0, 22780.0], [48.1, 22784.0], [48.2, 22792.0], [48.3, 22807.0], [48.4, 22819.0], [48.5, 22823.0], [48.6, 22829.0], [48.7, 22833.0], [48.8, 22842.0], [48.9, 22848.0], [49.0, 22853.0], [49.1, 22855.0], [49.2, 22860.0], [49.3, 22872.0], [49.4, 22885.0], [49.5, 22897.0], [49.6, 22907.0], [49.7, 22916.0], [49.8, 22920.0], [49.9, 22926.0], [50.0, 22938.0], [50.1, 22943.0], [50.2, 22955.0], [50.3, 22961.0], [50.4, 22964.0], [50.5, 22968.0], [50.6, 22975.0], [50.7, 22980.0], [50.8, 23001.0], [50.9, 23007.0], [51.0, 23017.0], [51.1, 23028.0], [51.2, 23036.0], [51.3, 23045.0], [51.4, 23049.0], [51.5, 23058.0], [51.6, 23071.0], [51.7, 23073.0], [51.8, 23083.0], [51.9, 23086.0], [52.0, 23091.0], [52.1, 23099.0], [52.2, 23103.0], [52.3, 23116.0], [52.4, 23130.0], [52.5, 23134.0], [52.6, 23139.0], [52.7, 23142.0], [52.8, 23149.0], [52.9, 23155.0], [53.0, 23168.0], [53.1, 23173.0], [53.2, 23177.0], [53.3, 23185.0], [53.4, 23189.0], [53.5, 23193.0], [53.6, 23201.0], [53.7, 23209.0], [53.8, 23219.0], [53.9, 23230.0], [54.0, 23250.0], [54.1, 23258.0], [54.2, 23265.0], [54.3, 23271.0], [54.4, 23280.0], [54.5, 23288.0], [54.6, 23295.0], [54.7, 23299.0], [54.8, 23306.0], [54.9, 23316.0], [55.0, 23323.0], [55.1, 23326.0], [55.2, 23334.0], [55.3, 23344.0], [55.4, 23348.0], [55.5, 23358.0], [55.6, 23364.0], [55.7, 23372.0], [55.8, 23376.0], [55.9, 23380.0], [56.0, 23382.0], [56.1, 23390.0], [56.2, 23394.0], [56.3, 23397.0], [56.4, 23397.0], [56.5, 23413.0], [56.6, 23416.0], [56.7, 23422.0], [56.8, 23423.0], [56.9, 23430.0], [57.0, 23440.0], [57.1, 23442.0], [57.2, 23448.0], [57.3, 23456.0], [57.4, 23458.0], [57.5, 23461.0], [57.6, 23467.0], [57.7, 23476.0], [57.8, 23480.0], [57.9, 23492.0], [58.0, 23494.0], [58.1, 23500.0], [58.2, 23502.0], [58.3, 23505.0], [58.4, 23514.0], [58.5, 23525.0], [58.6, 23527.0], [58.7, 23536.0], [58.8, 23549.0], [58.9, 23561.0], [59.0, 23566.0], [59.1, 23573.0], [59.2, 23580.0], [59.3, 23585.0], [59.4, 23589.0], [59.5, 23595.0], [59.6, 23600.0], [59.7, 23606.0], [59.8, 23616.0], [59.9, 23624.0], [60.0, 23634.0], [60.1, 23639.0], [60.2, 23642.0], [60.3, 23651.0], [60.4, 23663.0], [60.5, 23676.0], [60.6, 23683.0], [60.7, 23685.0], [60.8, 23692.0], [60.9, 23697.0], [61.0, 23701.0], [61.1, 23710.0], [61.2, 23712.0], [61.3, 23713.0], [61.4, 23718.0], [61.5, 23725.0], [61.6, 23737.0], [61.7, 23746.0], [61.8, 23748.0], [61.9, 23754.0], [62.0, 23756.0], [62.1, 23758.0], [62.2, 23764.0], [62.3, 23768.0], [62.4, 23773.0], [62.5, 23781.0], [62.6, 23787.0], [62.7, 23791.0], [62.8, 23797.0], [62.9, 23809.0], [63.0, 23811.0], [63.1, 23821.0], [63.2, 23824.0], [63.3, 23836.0], [63.4, 23845.0], [63.5, 23848.0], [63.6, 23856.0], [63.7, 23860.0], [63.8, 23864.0], [63.9, 23867.0], [64.0, 23873.0], [64.1, 23876.0], [64.2, 23881.0], [64.3, 23895.0], [64.4, 23900.0], [64.5, 23906.0], [64.6, 23910.0], [64.7, 23917.0], [64.8, 23934.0], [64.9, 23936.0], [65.0, 23942.0], [65.1, 23946.0], [65.2, 23953.0], [65.3, 23970.0], [65.4, 23981.0], [65.5, 23987.0], [65.6, 23990.0], [65.7, 23993.0], [65.8, 24001.0], [65.9, 24007.0], [66.0, 24023.0], [66.1, 24041.0], [66.2, 24048.0], [66.3, 24084.0], [66.4, 24093.0], [66.5, 24101.0], [66.6, 24105.0], [66.7, 24112.0], [66.8, 24124.0], [66.9, 24127.0], [67.0, 24132.0], [67.1, 24136.0], [67.2, 24140.0], [67.3, 24145.0], [67.4, 24151.0], [67.5, 24153.0], [67.6, 24166.0], [67.7, 24171.0], [67.8, 24182.0], [67.9, 24193.0], [68.0, 24206.0], [68.1, 24208.0], [68.2, 24212.0], [68.3, 24219.0], [68.4, 24221.0], [68.5, 24228.0], [68.6, 24230.0], [68.7, 24236.0], [68.8, 24245.0], [68.9, 24252.0], [69.0, 24256.0], [69.1, 24266.0], [69.2, 24272.0], [69.3, 24280.0], [69.4, 24296.0], [69.5, 24298.0], [69.6, 24302.0], [69.7, 24317.0], [69.8, 24323.0], [69.9, 24333.0], [70.0, 24351.0], [70.1, 24357.0], [70.2, 24366.0], [70.3, 24371.0], [70.4, 24377.0], [70.5, 24390.0], [70.6, 24397.0], [70.7, 24402.0], [70.8, 24417.0], [70.9, 24424.0], [71.0, 24446.0], [71.1, 24453.0], [71.2, 24459.0], [71.3, 24467.0], [71.4, 24475.0], [71.5, 24483.0], [71.6, 24493.0], [71.7, 24509.0], [71.8, 24523.0], [71.9, 24541.0], [72.0, 24553.0], [72.1, 24568.0], [72.2, 24576.0], [72.3, 24581.0], [72.4, 24586.0], [72.5, 24598.0], [72.6, 24609.0], [72.7, 24621.0], [72.8, 24629.0], [72.9, 24638.0], [73.0, 24648.0], [73.1, 24652.0], [73.2, 24679.0], [73.3, 24688.0], [73.4, 24695.0], [73.5, 24699.0], [73.6, 24708.0], [73.7, 24716.0], [73.8, 24724.0], [73.9, 24743.0], [74.0, 24770.0], [74.1, 24772.0], [74.2, 24781.0], [74.3, 24798.0], [74.4, 24804.0], [74.5, 24807.0], [74.6, 24811.0], [74.7, 24818.0], [74.8, 24825.0], [74.9, 24833.0], [75.0, 24846.0], [75.1, 24860.0], [75.2, 24862.0], [75.3, 24865.0], [75.4, 24881.0], [75.5, 24896.0], [75.6, 24899.0], [75.7, 24902.0], [75.8, 24912.0], [75.9, 24921.0], [76.0, 24929.0], [76.1, 24933.0], [76.2, 24935.0], [76.3, 24948.0], [76.4, 24958.0], [76.5, 24969.0], [76.6, 24989.0], [76.7, 24995.0], [76.8, 25008.0], [76.9, 25020.0], [77.0, 25050.0], [77.1, 25054.0], [77.2, 25061.0], [77.3, 25074.0], [77.4, 25080.0], [77.5, 25094.0], [77.6, 25104.0], [77.7, 25107.0], [77.8, 25115.0], [77.9, 25124.0], [78.0, 25135.0], [78.1, 25145.0], [78.2, 25153.0], [78.3, 25165.0], [78.4, 25170.0], [78.5, 25180.0], [78.6, 25194.0], [78.7, 25205.0], [78.8, 25209.0], [78.9, 25217.0], [79.0, 25219.0], [79.1, 25228.0], [79.2, 25245.0], [79.3, 25261.0], [79.4, 25263.0], [79.5, 25272.0], [79.6, 25282.0], [79.7, 25291.0], [79.8, 25301.0], [79.9, 25303.0], [80.0, 25308.0], [80.1, 25321.0], [80.2, 25327.0], [80.3, 25339.0], [80.4, 25368.0], [80.5, 25371.0], [80.6, 25380.0], [80.7, 25392.0], [80.8, 25408.0], [80.9, 25423.0], [81.0, 25432.0], [81.1, 25441.0], [81.2, 25443.0], [81.3, 25451.0], [81.4, 25458.0], [81.5, 25461.0], [81.6, 25468.0], [81.7, 25477.0], [81.8, 25485.0], [81.9, 25500.0], [82.0, 25507.0], [82.1, 25510.0], [82.2, 25518.0], [82.3, 25526.0], [82.4, 25533.0], [82.5, 25546.0], [82.6, 25570.0], [82.7, 25585.0], [82.8, 25593.0], [82.9, 25611.0], [83.0, 25621.0], [83.1, 25636.0], [83.2, 25648.0], [83.3, 25654.0], [83.4, 25663.0], [83.5, 25667.0], [83.6, 25680.0], [83.7, 25710.0], [83.8, 25733.0], [83.9, 25744.0], [84.0, 25751.0], [84.1, 25757.0], [84.2, 25768.0], [84.3, 25785.0], [84.4, 25787.0], [84.5, 25812.0], [84.6, 25826.0], [84.7, 25838.0], [84.8, 25842.0], [84.9, 25857.0], [85.0, 25866.0], [85.1, 25895.0], [85.2, 25908.0], [85.3, 25927.0], [85.4, 25937.0], [85.5, 25942.0], [85.6, 25951.0], [85.7, 25953.0], [85.8, 25965.0], [85.9, 25978.0], [86.0, 25987.0], [86.1, 25989.0], [86.2, 26004.0], [86.3, 26012.0], [86.4, 26022.0], [86.5, 26025.0], [86.6, 26037.0], [86.7, 26040.0], [86.8, 26051.0], [86.9, 26100.0], [87.0, 26120.0], [87.1, 26164.0], [87.2, 26174.0], [87.3, 26191.0], [87.4, 26219.0], [87.5, 26230.0], [87.6, 26274.0], [87.7, 26278.0], [87.8, 26295.0], [87.9, 26324.0], [88.0, 26332.0], [88.1, 26347.0], [88.2, 26353.0], [88.3, 26379.0], [88.4, 26402.0], [88.5, 26409.0], [88.6, 26420.0], [88.7, 26427.0], [88.8, 26439.0], [88.9, 26446.0], [89.0, 26459.0], [89.1, 26475.0], [89.2, 26491.0], [89.3, 26508.0], [89.4, 26516.0], [89.5, 26535.0], [89.6, 26549.0], [89.7, 26598.0], [89.8, 26611.0], [89.9, 26621.0], [90.0, 26637.0], [90.1, 26641.0], [90.2, 26672.0], [90.3, 26676.0], [90.4, 26682.0], [90.5, 26706.0], [90.6, 26714.0], [90.7, 26769.0], [90.8, 26789.0], [90.9, 26812.0], [91.0, 26831.0], [91.1, 26850.0], [91.2, 26885.0], [91.3, 26912.0], [91.4, 26925.0], [91.5, 26949.0], [91.6, 26959.0], [91.7, 26978.0], [91.8, 26997.0], [91.9, 27019.0], [92.0, 27063.0], [92.1, 27074.0], [92.2, 27088.0], [92.3, 27121.0], [92.4, 27172.0], [92.5, 27190.0], [92.6, 27198.0], [92.7, 27213.0], [92.8, 27244.0], [92.9, 27271.0], [93.0, 27321.0], [93.1, 27365.0], [93.2, 27401.0], [93.3, 27428.0], [93.4, 27463.0], [93.5, 27473.0], [93.6, 27529.0], [93.7, 27571.0], [93.8, 27608.0], [93.9, 27638.0], [94.0, 27666.0], [94.1, 27705.0], [94.2, 27788.0], [94.3, 27825.0], [94.4, 27860.0], [94.5, 27900.0], [94.6, 27914.0], [94.7, 27928.0], [94.8, 27966.0], [94.9, 28008.0], [95.0, 28085.0], [95.1, 28108.0], [95.2, 28159.0], [95.3, 28201.0], [95.4, 28270.0], [95.5, 28281.0], [95.6, 28398.0], [95.7, 28432.0], [95.8, 28491.0], [95.9, 28516.0], [96.0, 28539.0], [96.1, 28574.0], [96.2, 28634.0], [96.3, 28677.0], [96.4, 28718.0], [96.5, 28778.0], [96.6, 28814.0], [96.7, 28901.0], [96.8, 29000.0], [96.9, 29048.0], [97.0, 29207.0], [97.1, 29235.0], [97.2, 29363.0], [97.3, 29412.0], [97.4, 29453.0], [97.5, 29622.0], [97.6, 29674.0], [97.7, 29744.0], [97.8, 29826.0], [97.9, 30063.0], [98.0, 30331.0], [98.1, 30491.0], [98.2, 30724.0], [98.3, 30951.0], [98.4, 31008.0], [98.5, 31124.0], [98.6, 31286.0], [98.7, 31383.0], [98.8, 31500.0], [98.9, 31650.0], [99.0, 31828.0], [99.1, 31959.0], [99.2, 32045.0], [99.3, 32163.0], [99.4, 32316.0], [99.5, 32456.0], [99.6, 32940.0], [99.7, 33145.0], [99.8, 34152.0], [99.9, 34540.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 55.0, "series": [{"data": [[32900.0, 2.0], [34100.0, 1.0], [34500.0, 2.0], [2200.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 1.0], [5100.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [6600.0, 2.0], [6400.0, 2.0], [10000.0, 1.0], [9800.0, 2.0], [10200.0, 3.0], [10300.0, 1.0], [10600.0, 1.0], [10900.0, 1.0], [10800.0, 1.0], [11100.0, 1.0], [11400.0, 1.0], [11700.0, 1.0], [12100.0, 2.0], [11900.0, 1.0], [11800.0, 2.0], [12000.0, 2.0], [12200.0, 2.0], [12400.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [12500.0, 2.0], [13300.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13200.0, 4.0], [13000.0, 3.0], [13100.0, 1.0], [13500.0, 2.0], [13400.0, 2.0], [13600.0, 1.0], [13800.0, 1.0], [13700.0, 1.0], [14000.0, 2.0], [14200.0, 1.0], [14500.0, 2.0], [14700.0, 1.0], [14400.0, 1.0], [14900.0, 8.0], [15000.0, 7.0], [15100.0, 3.0], [15300.0, 4.0], [15200.0, 4.0], [15400.0, 6.0], [15500.0, 11.0], [15800.0, 4.0], [15700.0, 3.0], [15600.0, 3.0], [15900.0, 3.0], [16100.0, 4.0], [16300.0, 8.0], [16200.0, 5.0], [16000.0, 2.0], [16600.0, 4.0], [16400.0, 6.0], [17000.0, 4.0], [16800.0, 2.0], [17400.0, 8.0], [17200.0, 9.0], [17600.0, 8.0], [18000.0, 11.0], [17800.0, 17.0], [18400.0, 10.0], [18200.0, 7.0], [18600.0, 9.0], [19000.0, 20.0], [19200.0, 9.0], [19400.0, 14.0], [18800.0, 11.0], [19800.0, 15.0], [20200.0, 21.0], [20000.0, 22.0], [20400.0, 30.0], [19600.0, 14.0], [21400.0, 28.0], [21200.0, 38.0], [20600.0, 32.0], [20800.0, 30.0], [21000.0, 22.0], [22400.0, 44.0], [21600.0, 39.0], [22200.0, 28.0], [21800.0, 32.0], [22000.0, 39.0], [22600.0, 43.0], [23000.0, 41.0], [22800.0, 38.0], [23200.0, 36.0], [23400.0, 50.0], [24400.0, 31.0], [23600.0, 42.0], [24200.0, 47.0], [24000.0, 22.0], [23800.0, 47.0], [24800.0, 40.0], [25000.0, 25.0], [25400.0, 35.0], [25200.0, 35.0], [24600.0, 30.0], [25600.0, 25.0], [26400.0, 25.0], [25800.0, 21.0], [26200.0, 16.0], [26600.0, 22.0], [26000.0, 21.0], [27600.0, 9.0], [27200.0, 10.0], [27000.0, 13.0], [27400.0, 10.0], [26800.0, 13.0], [28000.0, 5.0], [28600.0, 5.0], [28200.0, 7.0], [28400.0, 6.0], [27800.0, 7.0], [29000.0, 5.0], [29600.0, 5.0], [29200.0, 4.0], [28800.0, 3.0], [29400.0, 4.0], [30400.0, 2.0], [29800.0, 1.0], [30000.0, 2.0], [30200.0, 1.0], [31200.0, 2.0], [31000.0, 3.0], [31600.0, 2.0], [30800.0, 1.0], [31400.0, 2.0], [31800.0, 1.0], [32200.0, 2.0], [32000.0, 2.0], [32400.0, 1.0], [33100.0, 3.0], [33900.0, 1.0], [16700.0, 2.0], [16900.0, 2.0], [17100.0, 2.0], [16500.0, 2.0], [17300.0, 7.0], [18100.0, 15.0], [17700.0, 6.0], [17900.0, 7.0], [18300.0, 6.0], [17500.0, 8.0], [18700.0, 10.0], [19100.0, 9.0], [19300.0, 19.0], [18500.0, 12.0], [18900.0, 18.0], [19700.0, 20.0], [19500.0, 19.0], [20100.0, 28.0], [20300.0, 27.0], [19900.0, 28.0], [21100.0, 43.0], [20500.0, 31.0], [21300.0, 32.0], [20700.0, 39.0], [20900.0, 23.0], [21500.0, 27.0], [22100.0, 40.0], [21900.0, 30.0], [22500.0, 48.0], [22300.0, 36.0], [21700.0, 41.0], [22700.0, 40.0], [23500.0, 45.0], [23100.0, 43.0], [23300.0, 51.0], [22900.0, 37.0], [23900.0, 41.0], [24300.0, 32.0], [23700.0, 55.0], [24100.0, 45.0], [24500.0, 26.0], [24900.0, 33.0], [25100.0, 31.0], [24700.0, 24.0], [25500.0, 28.0], [25300.0, 28.0], [25700.0, 24.0], [26100.0, 13.0], [26500.0, 15.0], [25900.0, 31.0], [26300.0, 16.0], [27500.0, 8.0], [27300.0, 7.0], [26700.0, 12.0], [27100.0, 11.0], [26900.0, 16.0], [27900.0, 11.0], [28100.0, 8.0], [28500.0, 11.0], [27700.0, 5.0], [28300.0, 3.0], [28900.0, 3.0], [29500.0, 2.0], [29300.0, 5.0], [28700.0, 7.0], [29100.0, 1.0], [29900.0, 2.0], [29700.0, 4.0], [30300.0, 2.0], [30700.0, 3.0], [30500.0, 1.0], [30900.0, 3.0], [31500.0, 3.0], [31100.0, 2.0], [31300.0, 3.0], [31700.0, 1.0], [31900.0, 4.0], [32300.0, 3.0], [32500.0, 1.0], [32100.0, 3.0], [33000.0, 1.0], [34200.0, 1.0], [34600.0, 1.0], [35000.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 64.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2936.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2936.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 64.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.06666666666665, "minX": 1.59338694E12, "maxY": 100.0, "series": [{"data": [[1.59338706E12, 100.0], [1.59338754E12, 97.68852459016396], [1.59338736E12, 100.0], [1.59338694E12, 100.0], [1.59338742E12, 100.0], [1.59338724E12, 100.0], [1.5933873E12, 100.0], [1.59338712E12, 100.0], [1.5933876E12, 48.06666666666665], [1.59338718E12, 100.0], [1.593387E12, 100.0], [1.59338748E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933876E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2295.0, "minX": 1.0, "maxY": 27088.0, "series": [{"data": [[2.0, 2730.0], [3.0, 2627.0], [4.0, 2922.0], [5.0, 3434.0], [6.0, 4268.0], [7.0, 3922.0], [8.0, 4001.0], [9.0, 5591.0], [10.0, 3672.0], [11.0, 5159.0], [12.0, 4137.0], [13.0, 6488.0], [14.0, 6421.0], [15.0, 10254.0], [16.0, 6611.0], [17.0, 5708.0], [18.0, 6647.0], [19.0, 11449.5], [20.0, 13193.333333333334], [21.0, 10837.0], [23.0, 12969.0], [24.0, 10396.0], [25.0, 12521.0], [26.0, 13930.0], [27.0, 12327.0], [28.0, 15580.0], [30.0, 13500.5], [33.0, 15535.0], [32.0, 11799.0], [35.0, 13223.0], [34.0, 13055.0], [37.0, 17248.0], [36.0, 15529.0], [39.0, 14721.0], [38.0, 13195.0], [41.0, 15673.0], [40.0, 17603.0], [43.0, 15268.0], [42.0, 15598.0], [45.0, 14975.0], [44.0, 15284.0], [47.0, 25826.0], [46.0, 15599.0], [49.0, 21667.666666666668], [48.0, 21548.0], [51.0, 23121.5], [50.0, 20524.5], [52.0, 22853.0], [55.0, 23429.5], [54.0, 23050.5], [57.0, 20906.0], [56.0, 23697.0], [59.0, 27088.0], [58.0, 17515.5], [61.0, 22969.5], [60.0, 21985.0], [63.0, 23538.0], [62.0, 26421.0], [67.0, 22538.0], [66.0, 23650.5], [65.0, 23920.5], [64.0, 26161.0], [71.0, 22029.5], [70.0, 22075.5], [69.0, 21979.0], [68.0, 21173.0], [75.0, 21220.499999999996], [74.0, 19921.0], [73.0, 21426.0], [72.0, 20393.0], [79.0, 24294.333333333332], [78.0, 25871.0], [77.0, 23875.0], [76.0, 22825.0], [83.0, 22438.333333333336], [82.0, 22073.0], [81.0, 24213.0], [80.0, 24435.4], [87.0, 26067.75], [85.0, 25932.0], [84.0, 27019.0], [91.0, 25473.0], [90.0, 25359.5], [89.0, 24388.0], [88.0, 24722.0], [95.0, 21644.0], [94.0, 22844.875], [93.0, 23749.2], [92.0, 25165.0], [99.0, 21650.5], [98.0, 22395.5], [97.0, 19827.5], [96.0, 20788.0], [100.0, 22913.48897581784], [1.0, 2295.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.73466666666658, 22702.76899999994]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1520.0, "minX": 1.59338694E12, "maxY": 9758.4, "series": [{"data": [[1.59338706E12, 3266.5333333333333], [1.59338754E12, 3090.6666666666665], [1.59338736E12, 3344.0], [1.59338694E12, 3280.6666666666665], [1.59338742E12, 3293.3333333333335], [1.59338724E12, 3192.0], [1.5933873E12, 3344.0], [1.59338712E12, 3293.3333333333335], [1.5933876E12, 1520.0], [1.59338718E12, 3331.3333333333335], [1.593387E12, 3569.4666666666667], [1.59338748E12, 3407.3333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59338706E12, 8708.016666666666], [1.59338754E12, 8267.533333333333], [1.59338736E12, 8945.2], [1.59338694E12, 8775.783333333333], [1.59338742E12, 8809.666666666666], [1.59338724E12, 8538.6], [1.5933873E12, 8945.2], [1.59338712E12, 8809.666666666666], [1.5933876E12, 4066.0], [1.59338718E12, 8911.316666666668], [1.593387E12, 9758.4], [1.59338748E12, 9114.616666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933876E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17509.591666666667, "minX": 1.59338694E12, "maxY": 23614.62704918032, "series": [{"data": [[1.59338706E12, 23213.494163424122], [1.59338754E12, 23614.62704918032], [1.59338736E12, 22930.530303030286], [1.59338694E12, 22234.35521235519], [1.59338742E12, 23053.130769230786], [1.59338724E12, 23210.837301587304], [1.5933873E12, 23074.16287878789], [1.59338712E12, 23017.834615384625], [1.5933876E12, 17509.591666666667], [1.59338718E12, 22737.372623574156], [1.593387E12, 21930.72222222224], [1.59338748E12, 23240.97769516729]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933876E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17509.591666666667, "minX": 1.59338694E12, "maxY": 23614.573770491806, "series": [{"data": [[1.59338706E12, 23213.435797665385], [1.59338754E12, 23614.573770491806], [1.59338736E12, 22930.477272727283], [1.59338694E12, 22234.19691119688], [1.59338742E12, 23053.111538461533], [1.59338724E12, 23210.765873015866], [1.5933873E12, 23074.09848484849], [1.59338712E12, 23017.780769230765], [1.5933876E12, 17509.591666666667], [1.59338718E12, 22737.32699619771], [1.593387E12, 21929.55555555555], [1.59338748E12, 23240.929368029745]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933876E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.16666666666666663, "minX": 1.59338694E12, "maxY": 7.903474903474896, "series": [{"data": [[1.59338706E12, 0.6186770428015562], [1.59338754E12, 0.4959016393442623], [1.59338736E12, 0.5037878787878789], [1.59338694E12, 7.903474903474896], [1.59338742E12, 0.5307692307692309], [1.59338724E12, 0.3769841269841268], [1.5933873E12, 0.43560606060606094], [1.59338712E12, 0.6153846153846156], [1.5933876E12, 0.16666666666666663], [1.59338718E12, 0.7072243346007606], [1.593387E12, 0.6597222222222218], [1.59338748E12, 0.442379182156134]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933876E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2295.0, "minX": 1.59338694E12, "maxY": 35019.0, "series": [{"data": [[1.59338706E12, 35019.0], [1.59338754E12, 31008.0], [1.59338736E12, 28159.0], [1.59338694E12, 33040.0], [1.59338742E12, 27847.0], [1.59338724E12, 27870.0], [1.5933873E12, 29744.0], [1.59338712E12, 28403.0], [1.5933876E12, 28574.0], [1.59338718E12, 27339.0], [1.593387E12, 30510.0], [1.59338748E12, 29235.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59338706E12, 15007.327996520997], [1.59338754E12, 17720.70499410033], [1.59338736E12, 18692.574993997812], [1.59338694E12, 13445.999993801117], [1.59338742E12, 19165.585980460644], [1.59338724E12, 18982.478998371364], [1.5933873E12, 18087.30498780608], [1.59338712E12, 17838.939996266367], [1.5933876E12, 2324.547990422249], [1.59338718E12, 18708.93598042488], [1.593387E12, 16869.298989554645], [1.59338748E12, 18588.309998905657]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59338706E12, 15020.460801391602], [1.59338754E12, 17742.975502359866], [1.59338736E12, 18715.232502400875], [1.59338694E12, 13469.400002479553], [1.59338742E12, 19239.344607815743], [1.59338724E12, 18988.626900651456], [1.5933873E12, 18133.335504877567], [1.59338712E12, 17853.034001493455], [1.5933876E12, 2360.7028038311005], [1.59338718E12, 18782.82960783005], [1.593387E12, 16908.728904178144], [1.59338748E12, 18592.441000437735]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59338706E12, 15014.623998260498], [1.59338754E12, 17733.077497050166], [1.59338736E12, 18705.162496998906], [1.59338694E12, 13458.999996900558], [1.59338742E12, 19206.562990230323], [1.59338724E12, 18985.89449918568], [1.5933873E12, 18112.87749390304], [1.59338712E12, 17846.769998133183], [1.5933876E12, 2344.6339952111243], [1.59338718E12, 18749.98799021244], [1.593387E12, 16891.20449477732], [1.59338748E12, 18590.60499945283]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59338706E12, 13803.0], [1.59338754E12, 17609.0], [1.59338736E12, 17997.0], [1.59338694E12, 13350.0], [1.59338742E12, 18634.0], [1.59338724E12, 18154.0], [1.5933873E12, 17823.0], [1.59338712E12, 17564.0], [1.5933876E12, 2295.0], [1.59338718E12, 18482.0], [1.593387E12, 16398.0], [1.59338748E12, 18426.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59338706E12, 21851.0], [1.59338754E12, 23708.0], [1.59338736E12, 23010.5], [1.59338694E12, 20046.0], [1.59338742E12, 22965.5], [1.59338724E12, 23302.5], [1.5933873E12, 23200.0], [1.59338712E12, 23157.5], [1.5933876E12, 19908.0], [1.59338718E12, 22784.0], [1.593387E12, 24355.0], [1.59338748E12, 23382.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933876E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13223.0, "minX": 1.0, "maxY": 31589.5, "series": [{"data": [[2.0, 23208.5], [8.0, 23069.0], [9.0, 23135.0], [10.0, 22960.5], [11.0, 25166.5], [3.0, 23091.0], [12.0, 23460.0], [13.0, 21188.5], [14.0, 23209.5], [15.0, 21531.0], [4.0, 23321.0], [1.0, 22962.0], [18.0, 31589.5], [19.0, 20418.0], [20.0, 15102.5], [5.0, 22650.0], [23.0, 13223.0], [6.0, 23187.0], [27.0, 19760.0], [7.0, 22822.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 15548.5], [1.0, 16848.5], [2.0, 23591.0], [54.0, 15840.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13223.0, "minX": 1.0, "maxY": 31589.5, "series": [{"data": [[2.0, 23208.5], [8.0, 23069.0], [9.0, 23135.0], [10.0, 22960.5], [11.0, 25166.5], [3.0, 23090.0], [12.0, 23460.0], [13.0, 21188.5], [14.0, 23209.5], [15.0, 21531.0], [4.0, 23321.0], [1.0, 22961.5], [18.0, 31589.5], [19.0, 20418.0], [20.0, 15102.0], [5.0, 22650.0], [23.0, 13223.0], [6.0, 23186.5], [27.0, 19760.0], [7.0, 22822.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 15548.0], [1.0, 16848.5], [2.0, 23591.0], [54.0, 15840.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.59338688E12, "maxY": 4.8, "series": [{"data": [[1.59338754E12, 3.7333333333333334], [1.59338688E12, 1.6666666666666667], [1.59338694E12, 4.316666666666666], [1.59338724E12, 4.2], [1.5933873E12, 4.4], [1.5933876E12, 0.6666666666666666], [1.593387E12, 4.8], [1.59338706E12, 4.283333333333333], [1.59338736E12, 4.4], [1.59338742E12, 4.333333333333333], [1.59338712E12, 4.333333333333333], [1.59338718E12, 4.383333333333334], [1.59338748E12, 4.483333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933876E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.59338694E12, "maxY": 4.483333333333333, "series": [{"data": [[1.59338706E12, 4.25], [1.59338754E12, 4.066666666666666], [1.59338736E12, 4.4], [1.59338694E12, 4.316666666666666], [1.59338742E12, 4.333333333333333], [1.59338724E12, 4.2], [1.5933873E12, 4.4], [1.59338712E12, 4.333333333333333], [1.5933876E12, 2.0], [1.59338718E12, 4.383333333333334], [1.593387E12, 3.7666666666666666], [1.59338748E12, 4.483333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59338706E12, 0.03333333333333333], [1.593387E12, 1.0]], "isOverall": false, "label": "401", "isController": false}, {"data": [[1.593387E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933876E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.59338694E12, "maxY": 4.483333333333333, "series": [{"data": [[1.59338706E12, 0.03333333333333333], [1.593387E12, 1.0333333333333334]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-failure", "isController": false}, {"data": [[1.59338706E12, 4.25], [1.59338754E12, 4.066666666666666], [1.59338736E12, 4.4], [1.59338694E12, 4.316666666666666], [1.59338742E12, 4.333333333333333], [1.59338724E12, 4.2], [1.5933873E12, 4.4], [1.59338712E12, 4.333333333333333], [1.5933876E12, 2.0], [1.59338718E12, 4.383333333333334], [1.593387E12, 3.7666666666666666], [1.59338748E12, 4.483333333333333]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933876E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.59338694E12, "maxY": 4.483333333333333, "series": [{"data": [[1.59338706E12, 4.25], [1.59338754E12, 4.066666666666666], [1.59338736E12, 4.4], [1.59338694E12, 4.316666666666666], [1.59338742E12, 4.333333333333333], [1.59338724E12, 4.2], [1.5933873E12, 4.4], [1.59338712E12, 4.333333333333333], [1.5933876E12, 2.0], [1.59338718E12, 4.383333333333334], [1.593387E12, 3.7666666666666666], [1.59338748E12, 4.483333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59338706E12, 0.03333333333333333], [1.593387E12, 1.0333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933876E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

