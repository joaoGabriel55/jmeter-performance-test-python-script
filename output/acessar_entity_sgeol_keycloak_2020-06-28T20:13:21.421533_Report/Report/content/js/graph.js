/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 622.0, "minX": 0.0, "maxY": 34324.0, "series": [{"data": [[0.0, 622.0], [0.1, 6054.0], [0.2, 7556.0], [0.3, 9414.0], [0.4, 9815.0], [0.5, 11694.0], [0.6, 13332.0], [0.7, 13340.0], [0.8, 13652.0], [0.9, 13806.0], [1.0, 13950.0], [1.1, 14052.0], [1.2, 14259.0], [1.3, 14573.0], [1.4, 14740.0], [1.5, 14887.0], [1.6, 15205.0], [1.7, 15341.0], [1.8, 15465.0], [1.9, 15681.0], [2.0, 15739.0], [2.1, 15802.0], [2.2, 15895.0], [2.3, 16032.0], [2.4, 16131.0], [2.5, 16320.0], [2.6, 16563.0], [2.7, 16614.0], [2.8, 16622.0], [2.9, 16742.0], [3.0, 16757.0], [3.1, 16782.0], [3.2, 16826.0], [3.3, 16915.0], [3.4, 16969.0], [3.5, 17106.0], [3.6, 17161.0], [3.7, 17247.0], [3.8, 17324.0], [3.9, 17362.0], [4.0, 17409.0], [4.1, 17425.0], [4.2, 17510.0], [4.3, 17536.0], [4.4, 17592.0], [4.5, 17596.0], [4.6, 17657.0], [4.7, 17675.0], [4.8, 17738.0], [4.9, 17746.0], [5.0, 17776.0], [5.1, 17789.0], [5.2, 17817.0], [5.3, 17908.0], [5.4, 17914.0], [5.5, 17983.0], [5.6, 18006.0], [5.7, 18021.0], [5.8, 18044.0], [5.9, 18048.0], [6.0, 18078.0], [6.1, 18090.0], [6.2, 18157.0], [6.3, 18172.0], [6.4, 18210.0], [6.5, 18272.0], [6.6, 18280.0], [6.7, 18309.0], [6.8, 18349.0], [6.9, 18385.0], [7.0, 18404.0], [7.1, 18449.0], [7.2, 18473.0], [7.3, 18480.0], [7.4, 18506.0], [7.5, 18553.0], [7.6, 18602.0], [7.7, 18678.0], [7.8, 18689.0], [7.9, 18703.0], [8.0, 18720.0], [8.1, 18728.0], [8.2, 18786.0], [8.3, 18849.0], [8.4, 18869.0], [8.5, 18884.0], [8.6, 18895.0], [8.7, 18913.0], [8.8, 18929.0], [8.9, 18968.0], [9.0, 18983.0], [9.1, 18999.0], [9.2, 19023.0], [9.3, 19034.0], [9.4, 19057.0], [9.5, 19065.0], [9.6, 19096.0], [9.7, 19101.0], [9.8, 19120.0], [9.9, 19139.0], [10.0, 19142.0], [10.1, 19144.0], [10.2, 19151.0], [10.3, 19163.0], [10.4, 19223.0], [10.5, 19229.0], [10.6, 19238.0], [10.7, 19257.0], [10.8, 19267.0], [10.9, 19273.0], [11.0, 19292.0], [11.1, 19300.0], [11.2, 19320.0], [11.3, 19347.0], [11.4, 19358.0], [11.5, 19360.0], [11.6, 19372.0], [11.7, 19383.0], [11.8, 19397.0], [11.9, 19408.0], [12.0, 19441.0], [12.1, 19452.0], [12.2, 19462.0], [12.3, 19467.0], [12.4, 19480.0], [12.5, 19483.0], [12.6, 19496.0], [12.7, 19520.0], [12.8, 19547.0], [12.9, 19554.0], [13.0, 19563.0], [13.1, 19599.0], [13.2, 19622.0], [13.3, 19637.0], [13.4, 19647.0], [13.5, 19674.0], [13.6, 19677.0], [13.7, 19703.0], [13.8, 19712.0], [13.9, 19717.0], [14.0, 19731.0], [14.1, 19737.0], [14.2, 19747.0], [14.3, 19756.0], [14.4, 19765.0], [14.5, 19772.0], [14.6, 19786.0], [14.7, 19794.0], [14.8, 19800.0], [14.9, 19824.0], [15.0, 19845.0], [15.1, 19853.0], [15.2, 19862.0], [15.3, 19907.0], [15.4, 19916.0], [15.5, 19921.0], [15.6, 19956.0], [15.7, 19967.0], [15.8, 19995.0], [15.9, 20006.0], [16.0, 20010.0], [16.1, 20025.0], [16.2, 20068.0], [16.3, 20068.0], [16.4, 20087.0], [16.5, 20091.0], [16.6, 20094.0], [16.7, 20095.0], [16.8, 20102.0], [16.9, 20112.0], [17.0, 20119.0], [17.1, 20138.0], [17.2, 20152.0], [17.3, 20168.0], [17.4, 20173.0], [17.5, 20193.0], [17.6, 20201.0], [17.7, 20209.0], [17.8, 20231.0], [17.9, 20254.0], [18.0, 20262.0], [18.1, 20278.0], [18.2, 20283.0], [18.3, 20289.0], [18.4, 20307.0], [18.5, 20336.0], [18.6, 20339.0], [18.7, 20351.0], [18.8, 20357.0], [18.9, 20374.0], [19.0, 20387.0], [19.1, 20398.0], [19.2, 20418.0], [19.3, 20422.0], [19.4, 20430.0], [19.5, 20437.0], [19.6, 20442.0], [19.7, 20443.0], [19.8, 20462.0], [19.9, 20464.0], [20.0, 20489.0], [20.1, 20490.0], [20.2, 20497.0], [20.3, 20501.0], [20.4, 20526.0], [20.5, 20539.0], [20.6, 20548.0], [20.7, 20581.0], [20.8, 20587.0], [20.9, 20590.0], [21.0, 20601.0], [21.1, 20641.0], [21.2, 20659.0], [21.3, 20668.0], [21.4, 20676.0], [21.5, 20681.0], [21.6, 20684.0], [21.7, 20693.0], [21.8, 20706.0], [21.9, 20724.0], [22.0, 20729.0], [22.1, 20741.0], [22.2, 20755.0], [22.3, 20766.0], [22.4, 20773.0], [22.5, 20777.0], [22.6, 20795.0], [22.7, 20816.0], [22.8, 20824.0], [22.9, 20831.0], [23.0, 20835.0], [23.1, 20837.0], [23.2, 20838.0], [23.3, 20854.0], [23.4, 20858.0], [23.5, 20862.0], [23.6, 20867.0], [23.7, 20883.0], [23.8, 20900.0], [23.9, 20915.0], [24.0, 20919.0], [24.1, 20920.0], [24.2, 20928.0], [24.3, 20931.0], [24.4, 20934.0], [24.5, 20960.0], [24.6, 20965.0], [24.7, 20978.0], [24.8, 20988.0], [24.9, 20992.0], [25.0, 20997.0], [25.1, 21019.0], [25.2, 21023.0], [25.3, 21031.0], [25.4, 21042.0], [25.5, 21044.0], [25.6, 21056.0], [25.7, 21059.0], [25.8, 21078.0], [25.9, 21093.0], [26.0, 21101.0], [26.1, 21105.0], [26.2, 21118.0], [26.3, 21119.0], [26.4, 21124.0], [26.5, 21135.0], [26.6, 21145.0], [26.7, 21160.0], [26.8, 21164.0], [26.9, 21172.0], [27.0, 21176.0], [27.1, 21182.0], [27.2, 21184.0], [27.3, 21195.0], [27.4, 21204.0], [27.5, 21220.0], [27.6, 21223.0], [27.7, 21232.0], [27.8, 21234.0], [27.9, 21247.0], [28.0, 21248.0], [28.1, 21264.0], [28.2, 21273.0], [28.3, 21274.0], [28.4, 21293.0], [28.5, 21305.0], [28.6, 21310.0], [28.7, 21321.0], [28.8, 21326.0], [28.9, 21340.0], [29.0, 21348.0], [29.1, 21353.0], [29.2, 21361.0], [29.3, 21374.0], [29.4, 21379.0], [29.5, 21384.0], [29.6, 21394.0], [29.7, 21401.0], [29.8, 21410.0], [29.9, 21416.0], [30.0, 21417.0], [30.1, 21428.0], [30.2, 21432.0], [30.3, 21437.0], [30.4, 21437.0], [30.5, 21450.0], [30.6, 21475.0], [30.7, 21476.0], [30.8, 21483.0], [30.9, 21486.0], [31.0, 21491.0], [31.1, 21505.0], [31.2, 21512.0], [31.3, 21520.0], [31.4, 21521.0], [31.5, 21543.0], [31.6, 21546.0], [31.7, 21575.0], [31.8, 21578.0], [31.9, 21583.0], [32.0, 21589.0], [32.1, 21591.0], [32.2, 21602.0], [32.3, 21606.0], [32.4, 21607.0], [32.5, 21609.0], [32.6, 21622.0], [32.7, 21637.0], [32.8, 21654.0], [32.9, 21660.0], [33.0, 21668.0], [33.1, 21680.0], [33.2, 21682.0], [33.3, 21687.0], [33.4, 21695.0], [33.5, 21699.0], [33.6, 21707.0], [33.7, 21708.0], [33.8, 21709.0], [33.9, 21711.0], [34.0, 21731.0], [34.1, 21743.0], [34.2, 21745.0], [34.3, 21746.0], [34.4, 21753.0], [34.5, 21757.0], [34.6, 21762.0], [34.7, 21779.0], [34.8, 21787.0], [34.9, 21790.0], [35.0, 21794.0], [35.1, 21805.0], [35.2, 21816.0], [35.3, 21827.0], [35.4, 21835.0], [35.5, 21843.0], [35.6, 21849.0], [35.7, 21872.0], [35.8, 21881.0], [35.9, 21889.0], [36.0, 21902.0], [36.1, 21904.0], [36.2, 21911.0], [36.3, 21913.0], [36.4, 21933.0], [36.5, 21939.0], [36.6, 21945.0], [36.7, 21953.0], [36.8, 21966.0], [36.9, 21982.0], [37.0, 21984.0], [37.1, 21989.0], [37.2, 22002.0], [37.3, 22016.0], [37.4, 22017.0], [37.5, 22019.0], [37.6, 22041.0], [37.7, 22051.0], [37.8, 22068.0], [37.9, 22086.0], [38.0, 22088.0], [38.1, 22090.0], [38.2, 22096.0], [38.3, 22101.0], [38.4, 22103.0], [38.5, 22105.0], [38.6, 22113.0], [38.7, 22116.0], [38.8, 22138.0], [38.9, 22140.0], [39.0, 22149.0], [39.1, 22158.0], [39.2, 22166.0], [39.3, 22166.0], [39.4, 22174.0], [39.5, 22175.0], [39.6, 22179.0], [39.7, 22198.0], [39.8, 22208.0], [39.9, 22222.0], [40.0, 22228.0], [40.1, 22239.0], [40.2, 22250.0], [40.3, 22252.0], [40.4, 22267.0], [40.5, 22276.0], [40.6, 22279.0], [40.7, 22294.0], [40.8, 22299.0], [40.9, 22306.0], [41.0, 22308.0], [41.1, 22310.0], [41.2, 22314.0], [41.3, 22329.0], [41.4, 22338.0], [41.5, 22349.0], [41.6, 22352.0], [41.7, 22357.0], [41.8, 22367.0], [41.9, 22375.0], [42.0, 22383.0], [42.1, 22390.0], [42.2, 22394.0], [42.3, 22406.0], [42.4, 22413.0], [42.5, 22433.0], [42.6, 22436.0], [42.7, 22443.0], [42.8, 22446.0], [42.9, 22449.0], [43.0, 22453.0], [43.1, 22459.0], [43.2, 22465.0], [43.3, 22473.0], [43.4, 22474.0], [43.5, 22489.0], [43.6, 22492.0], [43.7, 22506.0], [43.8, 22510.0], [43.9, 22514.0], [44.0, 22519.0], [44.1, 22526.0], [44.2, 22534.0], [44.3, 22543.0], [44.4, 22551.0], [44.5, 22569.0], [44.6, 22582.0], [44.7, 22588.0], [44.8, 22591.0], [44.9, 22600.0], [45.0, 22619.0], [45.1, 22628.0], [45.2, 22631.0], [45.3, 22638.0], [45.4, 22662.0], [45.5, 22666.0], [45.6, 22682.0], [45.7, 22684.0], [45.8, 22688.0], [45.9, 22702.0], [46.0, 22710.0], [46.1, 22712.0], [46.2, 22727.0], [46.3, 22744.0], [46.4, 22752.0], [46.5, 22758.0], [46.6, 22766.0], [46.7, 22773.0], [46.8, 22788.0], [46.9, 22792.0], [47.0, 22794.0], [47.1, 22813.0], [47.2, 22822.0], [47.3, 22826.0], [47.4, 22837.0], [47.5, 22838.0], [47.6, 22842.0], [47.7, 22844.0], [47.8, 22849.0], [47.9, 22852.0], [48.0, 22859.0], [48.1, 22861.0], [48.2, 22865.0], [48.3, 22875.0], [48.4, 22901.0], [48.5, 22909.0], [48.6, 22912.0], [48.7, 22919.0], [48.8, 22954.0], [48.9, 22958.0], [49.0, 22961.0], [49.1, 22970.0], [49.2, 22972.0], [49.3, 22980.0], [49.4, 22990.0], [49.5, 22995.0], [49.6, 23004.0], [49.7, 23018.0], [49.8, 23023.0], [49.9, 23031.0], [50.0, 23035.0], [50.1, 23055.0], [50.2, 23060.0], [50.3, 23064.0], [50.4, 23073.0], [50.5, 23077.0], [50.6, 23086.0], [50.7, 23088.0], [50.8, 23097.0], [50.9, 23105.0], [51.0, 23108.0], [51.1, 23118.0], [51.2, 23124.0], [51.3, 23131.0], [51.4, 23133.0], [51.5, 23135.0], [51.6, 23139.0], [51.7, 23147.0], [51.8, 23159.0], [51.9, 23168.0], [52.0, 23170.0], [52.1, 23186.0], [52.2, 23197.0], [52.3, 23206.0], [52.4, 23214.0], [52.5, 23216.0], [52.6, 23221.0], [52.7, 23226.0], [52.8, 23228.0], [52.9, 23234.0], [53.0, 23238.0], [53.1, 23245.0], [53.2, 23247.0], [53.3, 23253.0], [53.4, 23263.0], [53.5, 23267.0], [53.6, 23269.0], [53.7, 23273.0], [53.8, 23276.0], [53.9, 23281.0], [54.0, 23285.0], [54.1, 23291.0], [54.2, 23293.0], [54.3, 23297.0], [54.4, 23298.0], [54.5, 23305.0], [54.6, 23320.0], [54.7, 23343.0], [54.8, 23353.0], [54.9, 23357.0], [55.0, 23361.0], [55.1, 23365.0], [55.2, 23371.0], [55.3, 23386.0], [55.4, 23388.0], [55.5, 23390.0], [55.6, 23393.0], [55.7, 23401.0], [55.8, 23407.0], [55.9, 23410.0], [56.0, 23416.0], [56.1, 23424.0], [56.2, 23428.0], [56.3, 23441.0], [56.4, 23450.0], [56.5, 23466.0], [56.6, 23470.0], [56.7, 23487.0], [56.8, 23495.0], [56.9, 23498.0], [57.0, 23503.0], [57.1, 23505.0], [57.2, 23513.0], [57.3, 23515.0], [57.4, 23517.0], [57.5, 23528.0], [57.6, 23530.0], [57.7, 23541.0], [57.8, 23547.0], [57.9, 23547.0], [58.0, 23552.0], [58.1, 23556.0], [58.2, 23556.0], [58.3, 23573.0], [58.4, 23581.0], [58.5, 23586.0], [58.6, 23590.0], [58.7, 23594.0], [58.8, 23600.0], [58.9, 23602.0], [59.0, 23618.0], [59.1, 23626.0], [59.2, 23654.0], [59.3, 23666.0], [59.4, 23668.0], [59.5, 23672.0], [59.6, 23679.0], [59.7, 23685.0], [59.8, 23692.0], [59.9, 23701.0], [60.0, 23715.0], [60.1, 23718.0], [60.2, 23727.0], [60.3, 23731.0], [60.4, 23744.0], [60.5, 23747.0], [60.6, 23756.0], [60.7, 23768.0], [60.8, 23777.0], [60.9, 23787.0], [61.0, 23789.0], [61.1, 23792.0], [61.2, 23799.0], [61.3, 23813.0], [61.4, 23816.0], [61.5, 23831.0], [61.6, 23835.0], [61.7, 23839.0], [61.8, 23850.0], [61.9, 23858.0], [62.0, 23874.0], [62.1, 23886.0], [62.2, 23888.0], [62.3, 23910.0], [62.4, 23928.0], [62.5, 23944.0], [62.6, 23950.0], [62.7, 23960.0], [62.8, 23967.0], [62.9, 23972.0], [63.0, 23979.0], [63.1, 23998.0], [63.2, 24002.0], [63.3, 24003.0], [63.4, 24012.0], [63.5, 24013.0], [63.6, 24019.0], [63.7, 24020.0], [63.8, 24045.0], [63.9, 24052.0], [64.0, 24054.0], [64.1, 24071.0], [64.2, 24075.0], [64.3, 24086.0], [64.4, 24092.0], [64.5, 24096.0], [64.6, 24101.0], [64.7, 24109.0], [64.8, 24110.0], [64.9, 24119.0], [65.0, 24120.0], [65.1, 24122.0], [65.2, 24126.0], [65.3, 24131.0], [65.4, 24135.0], [65.5, 24139.0], [65.6, 24142.0], [65.7, 24151.0], [65.8, 24156.0], [65.9, 24164.0], [66.0, 24168.0], [66.1, 24170.0], [66.2, 24183.0], [66.3, 24187.0], [66.4, 24191.0], [66.5, 24199.0], [66.6, 24210.0], [66.7, 24211.0], [66.8, 24218.0], [66.9, 24224.0], [67.0, 24236.0], [67.1, 24246.0], [67.2, 24255.0], [67.3, 24262.0], [67.4, 24266.0], [67.5, 24273.0], [67.6, 24283.0], [67.7, 24294.0], [67.8, 24300.0], [67.9, 24315.0], [68.0, 24325.0], [68.1, 24328.0], [68.2, 24338.0], [68.3, 24346.0], [68.4, 24358.0], [68.5, 24362.0], [68.6, 24371.0], [68.7, 24380.0], [68.8, 24399.0], [68.9, 24403.0], [69.0, 24418.0], [69.1, 24432.0], [69.2, 24437.0], [69.3, 24437.0], [69.4, 24442.0], [69.5, 24457.0], [69.6, 24477.0], [69.7, 24487.0], [69.8, 24498.0], [69.9, 24506.0], [70.0, 24517.0], [70.1, 24524.0], [70.2, 24538.0], [70.3, 24546.0], [70.4, 24549.0], [70.5, 24551.0], [70.6, 24554.0], [70.7, 24556.0], [70.8, 24557.0], [70.9, 24569.0], [71.0, 24571.0], [71.1, 24580.0], [71.2, 24591.0], [71.3, 24617.0], [71.4, 24629.0], [71.5, 24638.0], [71.6, 24645.0], [71.7, 24655.0], [71.8, 24668.0], [71.9, 24671.0], [72.0, 24675.0], [72.1, 24682.0], [72.2, 24695.0], [72.3, 24721.0], [72.4, 24734.0], [72.5, 24740.0], [72.6, 24742.0], [72.7, 24754.0], [72.8, 24759.0], [72.9, 24778.0], [73.0, 24809.0], [73.1, 24814.0], [73.2, 24815.0], [73.3, 24821.0], [73.4, 24830.0], [73.5, 24832.0], [73.6, 24838.0], [73.7, 24845.0], [73.8, 24852.0], [73.9, 24859.0], [74.0, 24867.0], [74.1, 24875.0], [74.2, 24882.0], [74.3, 24892.0], [74.4, 24894.0], [74.5, 24897.0], [74.6, 24908.0], [74.7, 24914.0], [74.8, 24918.0], [74.9, 24932.0], [75.0, 24954.0], [75.1, 24960.0], [75.2, 24968.0], [75.3, 24971.0], [75.4, 24973.0], [75.5, 24987.0], [75.6, 24993.0], [75.7, 25001.0], [75.8, 25029.0], [75.9, 25032.0], [76.0, 25043.0], [76.1, 25047.0], [76.2, 25054.0], [76.3, 25059.0], [76.4, 25066.0], [76.5, 25070.0], [76.6, 25079.0], [76.7, 25084.0], [76.8, 25090.0], [76.9, 25092.0], [77.0, 25098.0], [77.1, 25113.0], [77.2, 25116.0], [77.3, 25117.0], [77.4, 25119.0], [77.5, 25128.0], [77.6, 25142.0], [77.7, 25171.0], [77.8, 25182.0], [77.9, 25195.0], [78.0, 25199.0], [78.1, 25201.0], [78.2, 25205.0], [78.3, 25213.0], [78.4, 25220.0], [78.5, 25220.0], [78.6, 25230.0], [78.7, 25241.0], [78.8, 25246.0], [78.9, 25249.0], [79.0, 25256.0], [79.1, 25274.0], [79.2, 25276.0], [79.3, 25284.0], [79.4, 25289.0], [79.5, 25292.0], [79.6, 25299.0], [79.7, 25310.0], [79.8, 25323.0], [79.9, 25327.0], [80.0, 25342.0], [80.1, 25353.0], [80.2, 25390.0], [80.3, 25402.0], [80.4, 25411.0], [80.5, 25440.0], [80.6, 25473.0], [80.7, 25480.0], [80.8, 25504.0], [80.9, 25522.0], [81.0, 25523.0], [81.1, 25524.0], [81.2, 25538.0], [81.3, 25549.0], [81.4, 25555.0], [81.5, 25563.0], [81.6, 25566.0], [81.7, 25579.0], [81.8, 25583.0], [81.9, 25589.0], [82.0, 25623.0], [82.1, 25634.0], [82.2, 25644.0], [82.3, 25653.0], [82.4, 25657.0], [82.5, 25665.0], [82.6, 25669.0], [82.7, 25692.0], [82.8, 25705.0], [82.9, 25710.0], [83.0, 25711.0], [83.1, 25715.0], [83.2, 25725.0], [83.3, 25746.0], [83.4, 25761.0], [83.5, 25771.0], [83.6, 25783.0], [83.7, 25803.0], [83.8, 25820.0], [83.9, 25825.0], [84.0, 25846.0], [84.1, 25855.0], [84.2, 25860.0], [84.3, 25879.0], [84.4, 25887.0], [84.5, 25912.0], [84.6, 25926.0], [84.7, 25933.0], [84.8, 25944.0], [84.9, 25979.0], [85.0, 25983.0], [85.1, 25990.0], [85.2, 26008.0], [85.3, 26014.0], [85.4, 26056.0], [85.5, 26061.0], [85.6, 26066.0], [85.7, 26087.0], [85.8, 26102.0], [85.9, 26128.0], [86.0, 26130.0], [86.1, 26142.0], [86.2, 26181.0], [86.3, 26184.0], [86.4, 26191.0], [86.5, 26207.0], [86.6, 26229.0], [86.7, 26254.0], [86.8, 26272.0], [86.9, 26296.0], [87.0, 26315.0], [87.1, 26321.0], [87.2, 26358.0], [87.3, 26384.0], [87.4, 26396.0], [87.5, 26414.0], [87.6, 26437.0], [87.7, 26461.0], [87.8, 26491.0], [87.9, 26511.0], [88.0, 26554.0], [88.1, 26556.0], [88.2, 26632.0], [88.3, 26644.0], [88.4, 26647.0], [88.5, 26669.0], [88.6, 26679.0], [88.7, 26702.0], [88.8, 26719.0], [88.9, 26734.0], [89.0, 26740.0], [89.1, 26761.0], [89.2, 26769.0], [89.3, 26801.0], [89.4, 26808.0], [89.5, 26809.0], [89.6, 26817.0], [89.7, 26830.0], [89.8, 26833.0], [89.9, 26838.0], [90.0, 26843.0], [90.1, 26860.0], [90.2, 26873.0], [90.3, 26892.0], [90.4, 26939.0], [90.5, 26954.0], [90.6, 27016.0], [90.7, 27042.0], [90.8, 27078.0], [90.9, 27093.0], [91.0, 27094.0], [91.1, 27106.0], [91.2, 27132.0], [91.3, 27146.0], [91.4, 27168.0], [91.5, 27185.0], [91.6, 27217.0], [91.7, 27244.0], [91.8, 27263.0], [91.9, 27285.0], [92.0, 27316.0], [92.1, 27386.0], [92.2, 27429.0], [92.3, 27453.0], [92.4, 27476.0], [92.5, 27479.0], [92.6, 27492.0], [92.7, 27493.0], [92.8, 27537.0], [92.9, 27592.0], [93.0, 27596.0], [93.1, 27629.0], [93.2, 27652.0], [93.3, 27669.0], [93.4, 27676.0], [93.5, 27753.0], [93.6, 27778.0], [93.7, 27808.0], [93.8, 27835.0], [93.9, 27848.0], [94.0, 27896.0], [94.1, 27917.0], [94.2, 27941.0], [94.3, 27973.0], [94.4, 28001.0], [94.5, 28051.0], [94.6, 28173.0], [94.7, 28232.0], [94.8, 28283.0], [94.9, 28305.0], [95.0, 28347.0], [95.1, 28378.0], [95.2, 28401.0], [95.3, 28422.0], [95.4, 28431.0], [95.5, 28472.0], [95.6, 28548.0], [95.7, 28670.0], [95.8, 28692.0], [95.9, 28753.0], [96.0, 28883.0], [96.1, 28924.0], [96.2, 29071.0], [96.3, 29200.0], [96.4, 29237.0], [96.5, 29278.0], [96.6, 29372.0], [96.7, 29422.0], [96.8, 29429.0], [96.9, 29518.0], [97.0, 29525.0], [97.1, 29585.0], [97.2, 29792.0], [97.3, 29878.0], [97.4, 29929.0], [97.5, 30042.0], [97.6, 30146.0], [97.7, 30163.0], [97.8, 30262.0], [97.9, 30326.0], [98.0, 30348.0], [98.1, 30351.0], [98.2, 30450.0], [98.3, 30560.0], [98.4, 30582.0], [98.5, 30741.0], [98.6, 30910.0], [98.7, 31065.0], [98.8, 31416.0], [98.9, 31637.0], [99.0, 31719.0], [99.1, 31899.0], [99.2, 32421.0], [99.3, 32469.0], [99.4, 32688.0], [99.5, 32866.0], [99.6, 33146.0], [99.7, 33609.0], [99.8, 34006.0], [99.9, 34258.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 43.0, "series": [{"data": [[34100.0, 1.0], [600.0, 1.0], [5200.0, 1.0], [6000.0, 1.0], [7000.0, 1.0], [7500.0, 1.0], [9400.0, 2.0], [9300.0, 1.0], [9800.0, 1.0], [10300.0, 1.0], [11600.0, 1.0], [12500.0, 1.0], [13300.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [13800.0, 1.0], [13900.0, 2.0], [14000.0, 2.0], [14200.0, 2.0], [14300.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [14800.0, 2.0], [14600.0, 1.0], [15100.0, 1.0], [15200.0, 2.0], [15300.0, 1.0], [15400.0, 3.0], [15600.0, 1.0], [15800.0, 4.0], [15700.0, 3.0], [15900.0, 1.0], [16000.0, 2.0], [16200.0, 1.0], [16100.0, 1.0], [16300.0, 1.0], [16600.0, 3.0], [16800.0, 3.0], [16400.0, 1.0], [17200.0, 3.0], [17000.0, 1.0], [17400.0, 5.0], [18000.0, 11.0], [18200.0, 6.0], [17600.0, 5.0], [17800.0, 3.0], [18400.0, 8.0], [19400.0, 16.0], [18800.0, 9.0], [19000.0, 10.0], [19200.0, 15.0], [18600.0, 6.0], [19800.0, 10.0], [20000.0, 19.0], [20200.0, 16.0], [20400.0, 23.0], [19600.0, 11.0], [20600.0, 16.0], [21200.0, 21.0], [21000.0, 18.0], [20800.0, 23.0], [21400.0, 28.0], [22400.0, 29.0], [21600.0, 27.0], [21800.0, 18.0], [22000.0, 22.0], [22200.0, 22.0], [22600.0, 20.0], [23400.0, 26.0], [23000.0, 26.0], [23200.0, 43.0], [22800.0, 25.0], [24400.0, 20.0], [24000.0, 28.0], [23600.0, 22.0], [23800.0, 20.0], [24200.0, 25.0], [24800.0, 32.0], [25000.0, 27.0], [25200.0, 31.0], [24600.0, 20.0], [25400.0, 10.0], [26400.0, 8.0], [26000.0, 12.0], [25800.0, 17.0], [26600.0, 10.0], [25600.0, 17.0], [26200.0, 9.0], [27400.0, 13.0], [27600.0, 8.0], [26800.0, 21.0], [27200.0, 8.0], [27000.0, 9.0], [28600.0, 4.0], [28000.0, 5.0], [27800.0, 7.0], [28400.0, 7.0], [28200.0, 4.0], [29400.0, 4.0], [29200.0, 5.0], [28800.0, 2.0], [29000.0, 1.0], [29600.0, 1.0], [30000.0, 3.0], [30200.0, 2.0], [30400.0, 2.0], [29800.0, 1.0], [30600.0, 1.0], [31400.0, 1.0], [31200.0, 1.0], [31600.0, 2.0], [30800.0, 1.0], [31000.0, 1.0], [31800.0, 1.0], [32400.0, 3.0], [32600.0, 2.0], [32800.0, 1.0], [34000.0, 1.0], [33600.0, 1.0], [33100.0, 2.0], [34300.0, 1.0], [16500.0, 2.0], [16900.0, 3.0], [16700.0, 6.0], [17100.0, 3.0], [17300.0, 3.0], [18300.0, 6.0], [17500.0, 7.0], [17700.0, 7.0], [17900.0, 6.0], [18100.0, 5.0], [18500.0, 4.0], [19100.0, 13.0], [19300.0, 15.0], [18700.0, 7.0], [18900.0, 9.0], [20300.0, 16.0], [19900.0, 11.0], [20100.0, 15.0], [19700.0, 22.0], [19500.0, 10.0], [21300.0, 25.0], [20500.0, 14.0], [20900.0, 26.0], [20700.0, 17.0], [21100.0, 28.0], [21500.0, 22.0], [22300.0, 28.0], [21700.0, 31.0], [22500.0, 24.0], [21900.0, 24.0], [22100.0, 30.0], [23300.0, 24.0], [22900.0, 24.0], [22700.0, 24.0], [23500.0, 37.0], [23100.0, 29.0], [23900.0, 19.0], [24300.0, 21.0], [24100.0, 39.0], [23700.0, 27.0], [24500.0, 28.0], [25300.0, 13.0], [25100.0, 21.0], [25500.0, 23.0], [24900.0, 22.0], [24700.0, 15.0], [25900.0, 13.0], [26100.0, 15.0], [26500.0, 7.0], [26300.0, 10.0], [25700.0, 17.0], [27500.0, 5.0], [27300.0, 3.0], [26900.0, 5.0], [27100.0, 11.0], [26700.0, 12.0], [28300.0, 6.0], [28100.0, 2.0], [27900.0, 6.0], [27700.0, 5.0], [28500.0, 2.0], [29500.0, 5.0], [29300.0, 3.0], [28900.0, 2.0], [28700.0, 3.0], [29100.0, 1.0], [29900.0, 2.0], [30500.0, 4.0], [30300.0, 5.0], [29700.0, 2.0], [30100.0, 4.0], [30700.0, 1.0], [30900.0, 2.0], [31700.0, 2.0], [31500.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [33400.0, 1.0], [33800.0, 1.0], [34200.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1999.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1999.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 42.38636363636367, "minX": 1.59338598E12, "maxY": 100.0, "series": [{"data": [[1.59338628E12, 100.0], [1.59338598E12, 100.0], [1.59338646E12, 42.38636363636367], [1.5933864E12, 98.09230769230774], [1.5933861E12, 100.0], [1.59338604E12, 100.0], [1.59338622E12, 100.0], [1.59338616E12, 100.0], [1.59338634E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 622.0, "minX": 1.0, "maxY": 25790.5, "series": [{"data": [[2.0, 5272.0], [3.0, 9815.0], [4.0, 7049.0], [5.0, 12570.0], [6.0, 6054.0], [7.0, 9348.0], [8.0, 9414.0], [9.0, 13065.5], [10.0, 11694.0], [11.0, 13806.0], [12.0, 14259.0], [13.0, 18157.0], [14.0, 17789.0], [15.0, 9436.0], [16.0, 18210.0], [17.0, 7556.0], [18.0, 15205.0], [19.0, 18507.0], [20.0, 13517.0], [21.0, 13734.0], [22.0, 15748.0], [23.0, 18290.0], [24.0, 17746.0], [25.0, 18681.0], [26.0, 18278.0], [28.0, 16538.0], [29.0, 17675.0], [30.0, 17546.0], [31.0, 18473.0], [33.0, 17592.0], [32.0, 18895.0], [35.0, 19397.0], [34.0, 19273.0], [37.0, 22394.0], [36.0, 20036.0], [39.0, 17854.0], [38.0, 18898.0], [41.0, 18921.0], [40.0, 17785.0], [43.0, 20927.0], [42.0, 21031.0], [45.0, 20289.0], [44.0, 19851.0], [47.0, 24191.0], [46.0, 20785.0], [49.0, 22873.0], [48.0, 20354.0], [51.0, 21119.0], [50.0, 20747.0], [53.0, 22665.0], [52.0, 20965.0], [54.0, 20848.0], [57.0, 20824.0], [56.0, 22483.0], [59.0, 21176.0], [58.0, 20263.0], [61.0, 20693.0], [60.0, 20298.0], [63.0, 23317.0], [62.0, 22625.0], [67.0, 25068.0], [66.0, 22543.0], [65.0, 21853.0], [64.0, 22357.0], [71.0, 25240.0], [70.0, 24196.0], [69.0, 24135.0], [68.0, 22684.0], [75.0, 23679.0], [74.0, 24013.0], [73.0, 23791.0], [72.0, 24543.333333333332], [79.0, 25553.5], [78.0, 25694.0], [77.0, 24355.0], [76.0, 25790.5], [83.0, 24070.0], [82.0, 24139.0], [81.0, 23228.0], [80.0, 22730.0], [87.0, 23028.8], [86.0, 22514.0], [85.0, 20668.0], [84.0, 23389.0], [91.0, 23619.5], [89.0, 21479.0], [88.0, 22882.0], [94.0, 22132.8], [93.0, 23662.333333333332], [92.0, 22191.399999999998], [99.0, 23812.578947368424], [98.0, 24770.0], [97.0, 20776.5], [96.0, 21666.333333333332], [100.0, 23142.515184381744], [1.0, 622.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.21700000000007, 22954.134999999984]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1114.6666666666667, "minX": 1.59338598E12, "maxY": 8911.316666666668, "series": [{"data": [[1.59338628E12, 3306.0], [1.59338598E12, 1545.3333333333333], [1.59338646E12, 1114.6666666666667], [1.5933864E12, 3293.3333333333335], [1.5933861E12, 3204.6666666666665], [1.59338604E12, 2976.6666666666665], [1.59338622E12, 3255.3333333333335], [1.59338616E12, 3306.0], [1.59338634E12, 3331.3333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59338628E12, 8843.55], [1.59338598E12, 4133.766666666666], [1.59338646E12, 2981.733333333333], [1.5933864E12, 8809.666666666666], [1.5933861E12, 8572.483333333334], [1.59338604E12, 7962.583333333333], [1.59338622E12, 8708.016666666666], [1.59338616E12, 8843.55], [1.59338634E12, 8911.316666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19001.25, "minX": 1.59338598E12, "maxY": 24313.029787234027, "series": [{"data": [[1.59338628E12, 22865.862068965518], [1.59338598E12, 21389.98360655738], [1.59338646E12, 19001.25], [1.5933864E12, 23099.95], [1.5933861E12, 23307.88142292491], [1.59338604E12, 24313.029787234027], [1.59338622E12, 22835.657587548627], [1.59338616E12, 23500.191570881223], [1.59338634E12, 22965.152091254753]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19001.238636363632, "minX": 1.59338598E12, "maxY": 24312.944680851066, "series": [{"data": [[1.59338628E12, 22865.80459770115], [1.59338598E12, 21389.803278688534], [1.59338646E12, 19001.238636363632], [1.5933864E12, 23099.919230769243], [1.5933861E12, 23307.782608695652], [1.59338604E12, 24312.944680851066], [1.59338622E12, 22835.587548638126], [1.59338616E12, 23500.05747126436], [1.59338634E12, 22965.10646387833]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11363636363636363, "minX": 1.59338598E12, "maxY": 18.901639344262293, "series": [{"data": [[1.59338628E12, 0.5900383141762445], [1.59338598E12, 18.901639344262293], [1.59338646E12, 0.11363636363636363], [1.5933864E12, 0.584615384615385], [1.5933861E12, 0.44268774703557306], [1.59338604E12, 0.4170212765957447], [1.59338622E12, 0.6225680933852143], [1.59338616E12, 0.597701149425288], [1.59338634E12, 0.5703422053231946]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 622.0, "minX": 1.59338598E12, "maxY": 34324.0, "series": [{"data": [[1.59338628E12, 28431.0], [1.59338598E12, 34324.0], [1.59338646E12, 26191.0], [1.5933864E12, 28675.0], [1.5933861E12, 29585.0], [1.59338604E12, 31650.0], [1.59338622E12, 27592.0], [1.59338616E12, 29793.0], [1.59338634E12, 30182.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59338628E12, 19188.20799525261], [1.59338598E12, 13332.855999765396], [1.59338646E12, 622.0], [1.5933864E12, 18702.610997573138], [1.5933861E12, 17940.31799315691], [1.59338604E12, 16597.335990772248], [1.59338622E12, 18577.869948637486], [1.59338616E12, 18133.805977699758], [1.59338634E12, 17453.367992572785]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59338628E12, 19206.128801898958], [1.59338598E12, 13333.741600093841], [1.59338646E12, 622.0], [1.5933864E12, 18711.772100970746], [1.5933861E12, 17966.149802737236], [1.59338604E12, 16632.1696036911], [1.59338622E12, 18771.757020545007], [1.59338616E12, 18217.9866089201], [1.59338634E12, 17481.404802970887]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59338628E12, 19198.163997626303], [1.59338598E12, 13333.347999882699], [1.59338646E12, 622.0], [1.5933864E12, 18707.70049878657], [1.5933861E12, 17954.668996578454], [1.59338604E12, 16616.687995386124], [1.59338622E12, 18685.584974318743], [1.59338616E12, 18180.57298884988], [1.59338634E12, 17468.94399628639]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59338628E12, 18404.0], [1.59338598E12, 13332.0], [1.59338646E12, 622.0], [1.5933864E12, 18438.0], [1.5933861E12, 16742.0], [1.59338604E12, 16563.0], [1.59338622E12, 18078.0], [1.59338616E12, 17983.0], [1.59338634E12, 17362.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59338628E12, 22727.0], [1.59338598E12, 17999.0], [1.59338646E12, 20214.5], [1.5933864E12, 23143.5], [1.5933861E12, 23356.0], [1.59338604E12, 25116.0], [1.59338622E12, 22980.0], [1.59338616E12, 23343.0], [1.59338634E12, 23291.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 17591.0, "minX": 1.0, "maxY": 26954.0, "series": [{"data": [[2.0, 23082.5], [8.0, 23254.5], [9.0, 22868.0], [10.0, 23805.5], [11.0, 23791.0], [12.0, 17591.0], [3.0, 23388.0], [13.0, 20711.0], [14.0, 17768.0], [15.0, 23234.0], [1.0, 22710.0], [4.0, 22904.5], [18.0, 17666.0], [19.0, 26954.0], [5.0, 23242.0], [6.0, 23268.0], [7.0, 23069.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 17590.5, "minX": 1.0, "maxY": 26954.0, "series": [{"data": [[2.0, 23082.5], [8.0, 23254.5], [9.0, 22868.0], [10.0, 23805.0], [11.0, 23791.0], [12.0, 17590.5], [3.0, 23388.0], [13.0, 20711.0], [14.0, 17768.0], [15.0, 23234.0], [1.0, 22710.0], [4.0, 22904.5], [18.0, 17666.0], [19.0, 26954.0], [5.0, 23242.0], [6.0, 23268.0], [7.0, 23069.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.59338598E12, "maxY": 4.383333333333334, "series": [{"data": [[1.59338628E12, 4.35], [1.59338598E12, 3.7], [1.59338646E12, 0.15], [1.5933864E12, 3.9833333333333334], [1.5933861E12, 4.216666666666667], [1.59338604E12, 3.9166666666666665], [1.59338622E12, 4.283333333333333], [1.59338616E12, 4.35], [1.59338634E12, 4.383333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.59338598E12, "maxY": 4.383333333333334, "series": [{"data": [[1.59338628E12, 4.35], [1.59338598E12, 2.033333333333333], [1.59338646E12, 1.4666666666666666], [1.5933864E12, 4.333333333333333], [1.5933861E12, 4.216666666666667], [1.59338604E12, 3.9166666666666665], [1.59338622E12, 4.283333333333333], [1.59338616E12, 4.35], [1.59338634E12, 4.383333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.59338598E12, "maxY": 4.383333333333334, "series": [{"data": [[1.59338628E12, 4.35], [1.59338598E12, 2.033333333333333], [1.59338646E12, 1.4666666666666666], [1.5933864E12, 4.333333333333333], [1.5933861E12, 4.216666666666667], [1.59338604E12, 3.9166666666666665], [1.59338622E12, 4.283333333333333], [1.59338616E12, 4.35], [1.59338634E12, 4.383333333333334]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.59338598E12, "maxY": 4.383333333333334, "series": [{"data": [[1.59338628E12, 4.35], [1.59338598E12, 2.033333333333333], [1.59338646E12, 1.4666666666666666], [1.5933864E12, 4.333333333333333], [1.5933861E12, 4.216666666666667], [1.59338604E12, 3.9166666666666665], [1.59338622E12, 4.283333333333333], [1.59338616E12, 4.35], [1.59338634E12, 4.383333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

