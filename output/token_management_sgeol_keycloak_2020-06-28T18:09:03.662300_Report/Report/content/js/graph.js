/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 765.0, "minX": 0.0, "maxY": 23256.0, "series": [{"data": [[0.0, 765.0], [0.1, 1726.0], [0.2, 2532.0], [0.3, 2746.0], [0.4, 2838.0], [0.5, 3041.0], [0.6, 3454.0], [0.7, 3698.0], [0.8, 4175.0], [0.9, 4419.0], [1.0, 4962.0], [1.1, 5228.0], [1.2, 5442.0], [1.3, 5565.0], [1.4, 5579.0], [1.5, 5709.0], [1.6, 6040.0], [1.7, 6252.0], [1.8, 6342.0], [1.9, 6410.0], [2.0, 6482.0], [2.1, 6516.0], [2.2, 6559.0], [2.3, 6620.0], [2.4, 6673.0], [2.5, 6728.0], [2.6, 6746.0], [2.7, 6798.0], [2.8, 6939.0], [2.9, 6971.0], [3.0, 7006.0], [3.1, 7017.0], [3.2, 7047.0], [3.3, 7073.0], [3.4, 7100.0], [3.5, 7144.0], [3.6, 7206.0], [3.7, 7231.0], [3.8, 7261.0], [3.9, 7282.0], [4.0, 7322.0], [4.1, 7337.0], [4.2, 7362.0], [4.3, 7402.0], [4.4, 7443.0], [4.5, 7465.0], [4.6, 7507.0], [4.7, 7555.0], [4.8, 7590.0], [4.9, 7605.0], [5.0, 7620.0], [5.1, 7640.0], [5.2, 7663.0], [5.3, 7698.0], [5.4, 7717.0], [5.5, 7744.0], [5.6, 7759.0], [5.7, 7774.0], [5.8, 7793.0], [5.9, 7804.0], [6.0, 7814.0], [6.1, 7840.0], [6.2, 7858.0], [6.3, 7874.0], [6.4, 7889.0], [6.5, 7903.0], [6.6, 7914.0], [6.7, 7929.0], [6.8, 7948.0], [6.9, 7964.0], [7.0, 7976.0], [7.1, 7989.0], [7.2, 8005.0], [7.3, 8009.0], [7.4, 8022.0], [7.5, 8030.0], [7.6, 8039.0], [7.7, 8080.0], [7.8, 8104.0], [7.9, 8135.0], [8.0, 8159.0], [8.1, 8172.0], [8.2, 8200.0], [8.3, 8216.0], [8.4, 8235.0], [8.5, 8261.0], [8.6, 8275.0], [8.7, 8290.0], [8.8, 8315.0], [8.9, 8320.0], [9.0, 8336.0], [9.1, 8365.0], [9.2, 8381.0], [9.3, 8395.0], [9.4, 8407.0], [9.5, 8426.0], [9.6, 8440.0], [9.7, 8445.0], [9.8, 8458.0], [9.9, 8477.0], [10.0, 8495.0], [10.1, 8504.0], [10.2, 8511.0], [10.3, 8515.0], [10.4, 8523.0], [10.5, 8529.0], [10.6, 8537.0], [10.7, 8555.0], [10.8, 8574.0], [10.9, 8584.0], [11.0, 8593.0], [11.1, 8618.0], [11.2, 8631.0], [11.3, 8644.0], [11.4, 8657.0], [11.5, 8665.0], [11.6, 8673.0], [11.7, 8682.0], [11.8, 8698.0], [11.9, 8706.0], [12.0, 8725.0], [12.1, 8728.0], [12.2, 8738.0], [12.3, 8750.0], [12.4, 8758.0], [12.5, 8768.0], [12.6, 8776.0], [12.7, 8787.0], [12.8, 8805.0], [12.9, 8810.0], [13.0, 8820.0], [13.1, 8828.0], [13.2, 8835.0], [13.3, 8849.0], [13.4, 8868.0], [13.5, 8875.0], [13.6, 8877.0], [13.7, 8884.0], [13.8, 8894.0], [13.9, 8913.0], [14.0, 8924.0], [14.1, 8940.0], [14.2, 8947.0], [14.3, 8953.0], [14.4, 8963.0], [14.5, 8966.0], [14.6, 8975.0], [14.7, 8979.0], [14.8, 8991.0], [14.9, 8995.0], [15.0, 8999.0], [15.1, 9008.0], [15.2, 9017.0], [15.3, 9024.0], [15.4, 9032.0], [15.5, 9037.0], [15.6, 9047.0], [15.7, 9062.0], [15.8, 9071.0], [15.9, 9075.0], [16.0, 9080.0], [16.1, 9082.0], [16.2, 9088.0], [16.3, 9093.0], [16.4, 9098.0], [16.5, 9114.0], [16.6, 9121.0], [16.7, 9127.0], [16.8, 9137.0], [16.9, 9142.0], [17.0, 9148.0], [17.1, 9158.0], [17.2, 9165.0], [17.3, 9176.0], [17.4, 9184.0], [17.5, 9195.0], [17.6, 9202.0], [17.7, 9205.0], [17.8, 9209.0], [17.9, 9220.0], [18.0, 9231.0], [18.1, 9243.0], [18.2, 9251.0], [18.3, 9254.0], [18.4, 9265.0], [18.5, 9273.0], [18.6, 9277.0], [18.7, 9283.0], [18.8, 9289.0], [18.9, 9293.0], [19.0, 9298.0], [19.1, 9303.0], [19.2, 9315.0], [19.3, 9324.0], [19.4, 9339.0], [19.5, 9345.0], [19.6, 9349.0], [19.7, 9358.0], [19.8, 9364.0], [19.9, 9376.0], [20.0, 9389.0], [20.1, 9399.0], [20.2, 9404.0], [20.3, 9407.0], [20.4, 9414.0], [20.5, 9420.0], [20.6, 9423.0], [20.7, 9431.0], [20.8, 9440.0], [20.9, 9444.0], [21.0, 9447.0], [21.1, 9454.0], [21.2, 9467.0], [21.3, 9476.0], [21.4, 9477.0], [21.5, 9481.0], [21.6, 9492.0], [21.7, 9502.0], [21.8, 9510.0], [21.9, 9517.0], [22.0, 9519.0], [22.1, 9524.0], [22.2, 9526.0], [22.3, 9538.0], [22.4, 9550.0], [22.5, 9557.0], [22.6, 9559.0], [22.7, 9564.0], [22.8, 9576.0], [22.9, 9585.0], [23.0, 9587.0], [23.1, 9589.0], [23.2, 9592.0], [23.3, 9598.0], [23.4, 9601.0], [23.5, 9605.0], [23.6, 9612.0], [23.7, 9616.0], [23.8, 9627.0], [23.9, 9633.0], [24.0, 9636.0], [24.1, 9640.0], [24.2, 9646.0], [24.3, 9649.0], [24.4, 9653.0], [24.5, 9655.0], [24.6, 9659.0], [24.7, 9661.0], [24.8, 9676.0], [24.9, 9682.0], [25.0, 9688.0], [25.1, 9693.0], [25.2, 9701.0], [25.3, 9710.0], [25.4, 9715.0], [25.5, 9728.0], [25.6, 9735.0], [25.7, 9746.0], [25.8, 9751.0], [25.9, 9759.0], [26.0, 9764.0], [26.1, 9766.0], [26.2, 9771.0], [26.3, 9774.0], [26.4, 9780.0], [26.5, 9789.0], [26.6, 9792.0], [26.7, 9795.0], [26.8, 9810.0], [26.9, 9814.0], [27.0, 9823.0], [27.1, 9824.0], [27.2, 9827.0], [27.3, 9829.0], [27.4, 9831.0], [27.5, 9840.0], [27.6, 9843.0], [27.7, 9848.0], [27.8, 9855.0], [27.9, 9863.0], [28.0, 9867.0], [28.1, 9876.0], [28.2, 9879.0], [28.3, 9885.0], [28.4, 9901.0], [28.5, 9911.0], [28.6, 9918.0], [28.7, 9920.0], [28.8, 9925.0], [28.9, 9937.0], [29.0, 9946.0], [29.1, 9953.0], [29.2, 9958.0], [29.3, 9961.0], [29.4, 9970.0], [29.5, 9982.0], [29.6, 9983.0], [29.7, 9997.0], [29.8, 9999.0], [29.9, 10002.0], [30.0, 10012.0], [30.1, 10016.0], [30.2, 10024.0], [30.3, 10028.0], [30.4, 10035.0], [30.5, 10039.0], [30.6, 10047.0], [30.7, 10048.0], [30.8, 10052.0], [30.9, 10062.0], [31.0, 10066.0], [31.1, 10070.0], [31.2, 10073.0], [31.3, 10091.0], [31.4, 10107.0], [31.5, 10121.0], [31.6, 10124.0], [31.7, 10131.0], [31.8, 10138.0], [31.9, 10142.0], [32.0, 10148.0], [32.1, 10150.0], [32.2, 10154.0], [32.3, 10164.0], [32.4, 10167.0], [32.5, 10176.0], [32.6, 10181.0], [32.7, 10186.0], [32.8, 10190.0], [32.9, 10198.0], [33.0, 10204.0], [33.1, 10213.0], [33.2, 10224.0], [33.3, 10232.0], [33.4, 10240.0], [33.5, 10245.0], [33.6, 10250.0], [33.7, 10258.0], [33.8, 10260.0], [33.9, 10266.0], [34.0, 10270.0], [34.1, 10277.0], [34.2, 10282.0], [34.3, 10293.0], [34.4, 10310.0], [34.5, 10315.0], [34.6, 10317.0], [34.7, 10320.0], [34.8, 10328.0], [34.9, 10338.0], [35.0, 10341.0], [35.1, 10350.0], [35.2, 10356.0], [35.3, 10360.0], [35.4, 10362.0], [35.5, 10371.0], [35.6, 10375.0], [35.7, 10378.0], [35.8, 10390.0], [35.9, 10400.0], [36.0, 10401.0], [36.1, 10411.0], [36.2, 10413.0], [36.3, 10420.0], [36.4, 10424.0], [36.5, 10436.0], [36.6, 10440.0], [36.7, 10443.0], [36.8, 10446.0], [36.9, 10451.0], [37.0, 10455.0], [37.1, 10465.0], [37.2, 10467.0], [37.3, 10479.0], [37.4, 10483.0], [37.5, 10486.0], [37.6, 10492.0], [37.7, 10500.0], [37.8, 10510.0], [37.9, 10515.0], [38.0, 10524.0], [38.1, 10527.0], [38.2, 10530.0], [38.3, 10533.0], [38.4, 10535.0], [38.5, 10543.0], [38.6, 10546.0], [38.7, 10552.0], [38.8, 10557.0], [38.9, 10562.0], [39.0, 10568.0], [39.1, 10579.0], [39.2, 10584.0], [39.3, 10586.0], [39.4, 10591.0], [39.5, 10598.0], [39.6, 10606.0], [39.7, 10611.0], [39.8, 10616.0], [39.9, 10619.0], [40.0, 10628.0], [40.1, 10641.0], [40.2, 10648.0], [40.3, 10649.0], [40.4, 10652.0], [40.5, 10665.0], [40.6, 10672.0], [40.7, 10677.0], [40.8, 10681.0], [40.9, 10684.0], [41.0, 10687.0], [41.1, 10695.0], [41.2, 10704.0], [41.3, 10708.0], [41.4, 10713.0], [41.5, 10719.0], [41.6, 10725.0], [41.7, 10730.0], [41.8, 10734.0], [41.9, 10743.0], [42.0, 10744.0], [42.1, 10747.0], [42.2, 10751.0], [42.3, 10754.0], [42.4, 10760.0], [42.5, 10771.0], [42.6, 10774.0], [42.7, 10784.0], [42.8, 10786.0], [42.9, 10795.0], [43.0, 10800.0], [43.1, 10805.0], [43.2, 10807.0], [43.3, 10812.0], [43.4, 10823.0], [43.5, 10826.0], [43.6, 10832.0], [43.7, 10848.0], [43.8, 10851.0], [43.9, 10859.0], [44.0, 10864.0], [44.1, 10868.0], [44.2, 10871.0], [44.3, 10878.0], [44.4, 10891.0], [44.5, 10895.0], [44.6, 10902.0], [44.7, 10908.0], [44.8, 10913.0], [44.9, 10923.0], [45.0, 10927.0], [45.1, 10934.0], [45.2, 10940.0], [45.3, 10945.0], [45.4, 10950.0], [45.5, 10958.0], [45.6, 10962.0], [45.7, 10965.0], [45.8, 10977.0], [45.9, 10983.0], [46.0, 10987.0], [46.1, 10991.0], [46.2, 10997.0], [46.3, 11001.0], [46.4, 11011.0], [46.5, 11014.0], [46.6, 11018.0], [46.7, 11023.0], [46.8, 11030.0], [46.9, 11036.0], [47.0, 11038.0], [47.1, 11050.0], [47.2, 11053.0], [47.3, 11054.0], [47.4, 11058.0], [47.5, 11063.0], [47.6, 11069.0], [47.7, 11075.0], [47.8, 11091.0], [47.9, 11099.0], [48.0, 11103.0], [48.1, 11111.0], [48.2, 11114.0], [48.3, 11120.0], [48.4, 11127.0], [48.5, 11129.0], [48.6, 11137.0], [48.7, 11142.0], [48.8, 11148.0], [48.9, 11149.0], [49.0, 11158.0], [49.1, 11163.0], [49.2, 11170.0], [49.3, 11172.0], [49.4, 11176.0], [49.5, 11177.0], [49.6, 11182.0], [49.7, 11188.0], [49.8, 11193.0], [49.9, 11203.0], [50.0, 11209.0], [50.1, 11215.0], [50.2, 11221.0], [50.3, 11224.0], [50.4, 11235.0], [50.5, 11238.0], [50.6, 11243.0], [50.7, 11251.0], [50.8, 11256.0], [50.9, 11261.0], [51.0, 11265.0], [51.1, 11268.0], [51.2, 11275.0], [51.3, 11277.0], [51.4, 11283.0], [51.5, 11287.0], [51.6, 11293.0], [51.7, 11295.0], [51.8, 11302.0], [51.9, 11313.0], [52.0, 11322.0], [52.1, 11325.0], [52.2, 11332.0], [52.3, 11343.0], [52.4, 11348.0], [52.5, 11352.0], [52.6, 11356.0], [52.7, 11361.0], [52.8, 11364.0], [52.9, 11368.0], [53.0, 11371.0], [53.1, 11374.0], [53.2, 11377.0], [53.3, 11382.0], [53.4, 11384.0], [53.5, 11390.0], [53.6, 11392.0], [53.7, 11401.0], [53.8, 11410.0], [53.9, 11413.0], [54.0, 11419.0], [54.1, 11425.0], [54.2, 11431.0], [54.3, 11434.0], [54.4, 11443.0], [54.5, 11447.0], [54.6, 11457.0], [54.7, 11466.0], [54.8, 11469.0], [54.9, 11476.0], [55.0, 11485.0], [55.1, 11493.0], [55.2, 11494.0], [55.3, 11507.0], [55.4, 11508.0], [55.5, 11511.0], [55.6, 11517.0], [55.7, 11521.0], [55.8, 11523.0], [55.9, 11531.0], [56.0, 11537.0], [56.1, 11553.0], [56.2, 11555.0], [56.3, 11558.0], [56.4, 11564.0], [56.5, 11567.0], [56.6, 11572.0], [56.7, 11577.0], [56.8, 11579.0], [56.9, 11588.0], [57.0, 11592.0], [57.1, 11600.0], [57.2, 11601.0], [57.3, 11608.0], [57.4, 11616.0], [57.5, 11623.0], [57.6, 11631.0], [57.7, 11635.0], [57.8, 11643.0], [57.9, 11645.0], [58.0, 11645.0], [58.1, 11654.0], [58.2, 11657.0], [58.3, 11664.0], [58.4, 11667.0], [58.5, 11672.0], [58.6, 11682.0], [58.7, 11688.0], [58.8, 11694.0], [58.9, 11706.0], [59.0, 11713.0], [59.1, 11716.0], [59.2, 11726.0], [59.3, 11730.0], [59.4, 11734.0], [59.5, 11741.0], [59.6, 11744.0], [59.7, 11747.0], [59.8, 11755.0], [59.9, 11760.0], [60.0, 11765.0], [60.1, 11768.0], [60.2, 11773.0], [60.3, 11778.0], [60.4, 11788.0], [60.5, 11801.0], [60.6, 11807.0], [60.7, 11812.0], [60.8, 11822.0], [60.9, 11827.0], [61.0, 11835.0], [61.1, 11840.0], [61.2, 11845.0], [61.3, 11855.0], [61.4, 11862.0], [61.5, 11869.0], [61.6, 11874.0], [61.7, 11878.0], [61.8, 11882.0], [61.9, 11894.0], [62.0, 11898.0], [62.1, 11910.0], [62.2, 11926.0], [62.3, 11936.0], [62.4, 11942.0], [62.5, 11946.0], [62.6, 11953.0], [62.7, 11964.0], [62.8, 11967.0], [62.9, 11974.0], [63.0, 11977.0], [63.1, 11979.0], [63.2, 11992.0], [63.3, 11997.0], [63.4, 12006.0], [63.5, 12023.0], [63.6, 12026.0], [63.7, 12032.0], [63.8, 12039.0], [63.9, 12044.0], [64.0, 12049.0], [64.1, 12056.0], [64.2, 12062.0], [64.3, 12069.0], [64.4, 12074.0], [64.5, 12081.0], [64.6, 12089.0], [64.7, 12094.0], [64.8, 12100.0], [64.9, 12109.0], [65.0, 12110.0], [65.1, 12117.0], [65.2, 12124.0], [65.3, 12126.0], [65.4, 12129.0], [65.5, 12137.0], [65.6, 12150.0], [65.7, 12152.0], [65.8, 12158.0], [65.9, 12165.0], [66.0, 12171.0], [66.1, 12174.0], [66.2, 12179.0], [66.3, 12187.0], [66.4, 12192.0], [66.5, 12203.0], [66.6, 12216.0], [66.7, 12221.0], [66.8, 12223.0], [66.9, 12231.0], [67.0, 12236.0], [67.1, 12246.0], [67.2, 12250.0], [67.3, 12258.0], [67.4, 12265.0], [67.5, 12270.0], [67.6, 12281.0], [67.7, 12286.0], [67.8, 12293.0], [67.9, 12302.0], [68.0, 12309.0], [68.1, 12319.0], [68.2, 12323.0], [68.3, 12333.0], [68.4, 12339.0], [68.5, 12345.0], [68.6, 12351.0], [68.7, 12357.0], [68.8, 12361.0], [68.9, 12371.0], [69.0, 12375.0], [69.1, 12390.0], [69.2, 12394.0], [69.3, 12402.0], [69.4, 12412.0], [69.5, 12423.0], [69.6, 12426.0], [69.7, 12434.0], [69.8, 12436.0], [69.9, 12444.0], [70.0, 12446.0], [70.1, 12452.0], [70.2, 12456.0], [70.3, 12461.0], [70.4, 12468.0], [70.5, 12476.0], [70.6, 12482.0], [70.7, 12484.0], [70.8, 12494.0], [70.9, 12500.0], [71.0, 12500.0], [71.1, 12502.0], [71.2, 12512.0], [71.3, 12525.0], [71.4, 12531.0], [71.5, 12539.0], [71.6, 12545.0], [71.7, 12553.0], [71.8, 12559.0], [71.9, 12570.0], [72.0, 12576.0], [72.1, 12586.0], [72.2, 12597.0], [72.3, 12607.0], [72.4, 12616.0], [72.5, 12626.0], [72.6, 12632.0], [72.7, 12634.0], [72.8, 12638.0], [72.9, 12646.0], [73.0, 12649.0], [73.1, 12660.0], [73.2, 12668.0], [73.3, 12678.0], [73.4, 12685.0], [73.5, 12690.0], [73.6, 12695.0], [73.7, 12700.0], [73.8, 12708.0], [73.9, 12719.0], [74.0, 12727.0], [74.1, 12732.0], [74.2, 12738.0], [74.3, 12743.0], [74.4, 12751.0], [74.5, 12760.0], [74.6, 12772.0], [74.7, 12781.0], [74.8, 12787.0], [74.9, 12792.0], [75.0, 12800.0], [75.1, 12808.0], [75.2, 12812.0], [75.3, 12820.0], [75.4, 12832.0], [75.5, 12836.0], [75.6, 12839.0], [75.7, 12843.0], [75.8, 12854.0], [75.9, 12875.0], [76.0, 12885.0], [76.1, 12900.0], [76.2, 12911.0], [76.3, 12928.0], [76.4, 12936.0], [76.5, 12951.0], [76.6, 12964.0], [76.7, 12974.0], [76.8, 12979.0], [76.9, 12983.0], [77.0, 12998.0], [77.1, 13001.0], [77.2, 13005.0], [77.3, 13007.0], [77.4, 13013.0], [77.5, 13025.0], [77.6, 13050.0], [77.7, 13071.0], [77.8, 13083.0], [77.9, 13091.0], [78.0, 13100.0], [78.1, 13104.0], [78.2, 13106.0], [78.3, 13112.0], [78.4, 13123.0], [78.5, 13136.0], [78.6, 13148.0], [78.7, 13157.0], [78.8, 13162.0], [78.9, 13169.0], [79.0, 13174.0], [79.1, 13191.0], [79.2, 13198.0], [79.3, 13203.0], [79.4, 13219.0], [79.5, 13223.0], [79.6, 13231.0], [79.7, 13240.0], [79.8, 13259.0], [79.9, 13272.0], [80.0, 13280.0], [80.1, 13288.0], [80.2, 13295.0], [80.3, 13305.0], [80.4, 13312.0], [80.5, 13326.0], [80.6, 13332.0], [80.7, 13350.0], [80.8, 13365.0], [80.9, 13374.0], [81.0, 13386.0], [81.1, 13401.0], [81.2, 13409.0], [81.3, 13418.0], [81.4, 13425.0], [81.5, 13429.0], [81.6, 13448.0], [81.7, 13456.0], [81.8, 13463.0], [81.9, 13470.0], [82.0, 13479.0], [82.1, 13492.0], [82.2, 13497.0], [82.3, 13511.0], [82.4, 13518.0], [82.5, 13533.0], [82.6, 13547.0], [82.7, 13549.0], [82.8, 13558.0], [82.9, 13569.0], [83.0, 13578.0], [83.1, 13585.0], [83.2, 13591.0], [83.3, 13595.0], [83.4, 13608.0], [83.5, 13616.0], [83.6, 13634.0], [83.7, 13645.0], [83.8, 13655.0], [83.9, 13667.0], [84.0, 13672.0], [84.1, 13685.0], [84.2, 13691.0], [84.3, 13706.0], [84.4, 13718.0], [84.5, 13736.0], [84.6, 13748.0], [84.7, 13752.0], [84.8, 13785.0], [84.9, 13793.0], [85.0, 13808.0], [85.1, 13816.0], [85.2, 13831.0], [85.3, 13849.0], [85.4, 13865.0], [85.5, 13887.0], [85.6, 13907.0], [85.7, 13908.0], [85.8, 13911.0], [85.9, 13918.0], [86.0, 13945.0], [86.1, 13951.0], [86.2, 13956.0], [86.3, 13973.0], [86.4, 13983.0], [86.5, 13992.0], [86.6, 14003.0], [86.7, 14011.0], [86.8, 14023.0], [86.9, 14033.0], [87.0, 14041.0], [87.1, 14057.0], [87.2, 14084.0], [87.3, 14090.0], [87.4, 14102.0], [87.5, 14109.0], [87.6, 14113.0], [87.7, 14121.0], [87.8, 14136.0], [87.9, 14139.0], [88.0, 14155.0], [88.1, 14177.0], [88.2, 14187.0], [88.3, 14197.0], [88.4, 14203.0], [88.5, 14214.0], [88.6, 14226.0], [88.7, 14229.0], [88.8, 14233.0], [88.9, 14237.0], [89.0, 14244.0], [89.1, 14278.0], [89.2, 14302.0], [89.3, 14313.0], [89.4, 14319.0], [89.5, 14331.0], [89.6, 14343.0], [89.7, 14354.0], [89.8, 14365.0], [89.9, 14388.0], [90.0, 14401.0], [90.1, 14419.0], [90.2, 14437.0], [90.3, 14451.0], [90.4, 14460.0], [90.5, 14473.0], [90.6, 14482.0], [90.7, 14490.0], [90.8, 14518.0], [90.9, 14542.0], [91.0, 14555.0], [91.1, 14560.0], [91.2, 14592.0], [91.3, 14597.0], [91.4, 14606.0], [91.5, 14617.0], [91.6, 14634.0], [91.7, 14647.0], [91.8, 14659.0], [91.9, 14670.0], [92.0, 14695.0], [92.1, 14724.0], [92.2, 14751.0], [92.3, 14771.0], [92.4, 14786.0], [92.5, 14801.0], [92.6, 14819.0], [92.7, 14844.0], [92.8, 14854.0], [92.9, 14878.0], [93.0, 14906.0], [93.1, 14915.0], [93.2, 14949.0], [93.3, 14975.0], [93.4, 15012.0], [93.5, 15031.0], [93.6, 15042.0], [93.7, 15052.0], [93.8, 15073.0], [93.9, 15089.0], [94.0, 15128.0], [94.1, 15157.0], [94.2, 15173.0], [94.3, 15185.0], [94.4, 15205.0], [94.5, 15227.0], [94.6, 15253.0], [94.7, 15268.0], [94.8, 15310.0], [94.9, 15339.0], [95.0, 15373.0], [95.1, 15387.0], [95.2, 15416.0], [95.3, 15450.0], [95.4, 15471.0], [95.5, 15506.0], [95.6, 15544.0], [95.7, 15572.0], [95.8, 15615.0], [95.9, 15660.0], [96.0, 15676.0], [96.1, 15720.0], [96.2, 15748.0], [96.3, 15790.0], [96.4, 15823.0], [96.5, 15897.0], [96.6, 15926.0], [96.7, 15997.0], [96.8, 16014.0], [96.9, 16076.0], [97.0, 16101.0], [97.1, 16134.0], [97.2, 16199.0], [97.3, 16228.0], [97.4, 16272.0], [97.5, 16320.0], [97.6, 16339.0], [97.7, 16415.0], [97.8, 16444.0], [97.9, 16497.0], [98.0, 16587.0], [98.1, 16621.0], [98.2, 16680.0], [98.3, 16706.0], [98.4, 16730.0], [98.5, 16793.0], [98.6, 16821.0], [98.7, 16861.0], [98.8, 17067.0], [98.9, 17136.0], [99.0, 17202.0], [99.1, 17375.0], [99.2, 17525.0], [99.3, 17579.0], [99.4, 17729.0], [99.5, 17782.0], [99.6, 18148.0], [99.7, 18511.0], [99.8, 18673.0], [99.9, 19974.0], [100.0, 23256.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 78.0, "series": [{"data": [[700.0, 1.0], [800.0, 1.0], [1000.0, 1.0], [1300.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 3.0], [2800.0, 2.0], [2900.0, 2.0], [3000.0, 3.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 3.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 2.0], [4300.0, 1.0], [4400.0, 2.0], [4700.0, 1.0], [4900.0, 2.0], [5000.0, 1.0], [5100.0, 2.0], [5200.0, 4.0], [5400.0, 5.0], [5500.0, 5.0], [5600.0, 3.0], [5800.0, 1.0], [5700.0, 2.0], [6000.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 3.0], [6300.0, 7.0], [6400.0, 6.0], [6500.0, 10.0], [6600.0, 8.0], [6700.0, 9.0], [6800.0, 3.0], [6900.0, 6.0], [7000.0, 18.0], [7100.0, 8.0], [7300.0, 12.0], [7400.0, 12.0], [7200.0, 15.0], [7500.0, 12.0], [7600.0, 17.0], [7800.0, 26.0], [7900.0, 27.0], [7700.0, 21.0], [8000.0, 24.0], [8100.0, 17.0], [8700.0, 37.0], [8500.0, 41.0], [8400.0, 27.0], [8600.0, 30.0], [8200.0, 22.0], [8300.0, 25.0], [8900.0, 48.0], [9000.0, 56.0], [9200.0, 59.0], [9100.0, 45.0], [8800.0, 43.0], [9300.0, 44.0], [9500.0, 68.0], [9700.0, 62.0], [9400.0, 64.0], [9600.0, 72.0], [9800.0, 65.0], [9900.0, 58.0], [10000.0, 62.0], [10200.0, 57.0], [10100.0, 62.0], [10400.0, 72.0], [10500.0, 73.0], [10700.0, 73.0], [10300.0, 62.0], [10600.0, 66.0], [11000.0, 67.0], [11100.0, 78.0], [11200.0, 76.0], [10900.0, 66.0], [10800.0, 64.0], [11400.0, 62.0], [11300.0, 77.0], [11500.0, 74.0], [11700.0, 66.0], [11600.0, 70.0], [11800.0, 61.0], [12100.0, 66.0], [11900.0, 53.0], [12000.0, 58.0], [12200.0, 58.0], [12400.0, 64.0], [12700.0, 52.0], [12500.0, 53.0], [12300.0, 56.0], [12600.0, 59.0], [13300.0, 33.0], [12900.0, 38.0], [13200.0, 41.0], [12800.0, 44.0], [13000.0, 37.0], [13100.0, 50.0], [13500.0, 46.0], [13400.0, 45.0], [13700.0, 28.0], [13800.0, 25.0], [13600.0, 35.0], [14100.0, 38.0], [14000.0, 34.0], [14300.0, 34.0], [13900.0, 39.0], [14200.0, 32.0], [14700.0, 19.0], [14600.0, 27.0], [14400.0, 29.0], [14800.0, 19.0], [14500.0, 25.0], [15000.0, 24.0], [15100.0, 17.0], [14900.0, 15.0], [15200.0, 16.0], [15300.0, 15.0], [15700.0, 10.0], [15600.0, 13.0], [15800.0, 8.0], [15500.0, 11.0], [15400.0, 13.0], [15900.0, 8.0], [16100.0, 9.0], [16000.0, 11.0], [16200.0, 11.0], [16300.0, 8.0], [17200.0, 3.0], [16500.0, 5.0], [16900.0, 1.0], [16400.0, 9.0], [16800.0, 9.0], [17100.0, 7.0], [17000.0, 1.0], [16600.0, 9.0], [16700.0, 11.0], [17300.0, 3.0], [17400.0, 2.0], [17600.0, 2.0], [18000.0, 3.0], [17700.0, 5.0], [17500.0, 6.0], [18400.0, 2.0], [18100.0, 1.0], [18200.0, 1.0], [18600.0, 1.0], [18500.0, 4.0], [18900.0, 1.0], [19000.0, 2.0], [19900.0, 2.0], [20600.0, 1.0], [22000.0, 1.0], [23200.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3996.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3996.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 79.31695331695332, "minX": 1.59337854E12, "maxY": 100.0, "series": [{"data": [[1.59337866E12, 100.0], [1.59337896E12, 79.31695331695332], [1.59337854E12, 100.0], [1.59337884E12, 100.0], [1.5933789E12, 100.0], [1.59337872E12, 100.0], [1.59337878E12, 100.0], [1.5933786E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59337896E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 765.0, "minX": 1.0, "maxY": 15910.0, "series": [{"data": [[2.0, 765.0], [3.0, 1376.0], [4.0, 1869.0], [5.0, 1726.0], [6.0, 1064.0], [7.0, 2710.0], [8.0, 2243.0], [9.0, 2532.0], [10.0, 3001.0], [11.0, 4306.5], [12.0, 5934.0], [13.0, 5250.0], [14.0, 5227.0], [15.0, 3587.0], [16.0, 7094.0], [17.0, 3791.0], [18.0, 9760.0], [19.0, 4673.0], [20.0, 7941.0], [21.0, 5228.0], [22.0, 7597.0], [23.0, 5950.0], [24.0, 10641.0], [25.0, 7889.0], [26.0, 7640.0], [27.0, 5682.0], [28.0, 9285.5], [29.0, 2823.0], [30.0, 10660.0], [31.0, 7293.0], [33.0, 7859.5], [32.0, 7976.0], [35.0, 6526.0], [34.0, 5709.0], [37.0, 8236.0], [36.0, 12701.5], [39.0, 5468.0], [38.0, 12461.0], [41.0, 11275.5], [40.0, 10601.0], [43.0, 7539.5], [42.0, 15910.0], [45.0, 8527.666666666666], [44.0, 8581.0], [47.0, 7207.0], [46.0, 8726.5], [49.0, 9789.0], [48.0, 4419.0], [51.0, 5626.0], [50.0, 11900.0], [52.0, 10622.333333333334], [55.0, 10628.0], [54.0, 14011.0], [57.0, 12028.0], [56.0, 9472.0], [59.0, 10684.0], [58.0, 10468.666666666666], [61.0, 11496.0], [60.0, 9581.0], [63.0, 11725.25], [62.0, 11919.75], [67.0, 10950.0], [66.0, 9423.0], [65.0, 15310.0], [64.0, 11993.5], [71.0, 12568.5], [70.0, 12949.5], [69.0, 12370.5], [68.0, 9753.5], [75.0, 12688.0], [74.0, 11923.0], [73.0, 9806.4], [72.0, 11697.333333333334], [79.0, 12685.0], [78.0, 9617.0], [77.0, 14319.0], [76.0, 13498.25], [83.0, 12116.333333333334], [82.0, 14139.0], [81.0, 13299.0], [80.0, 10072.0], [87.0, 10384.0], [86.0, 11064.5], [85.0, 9556.0], [84.0, 11466.0], [91.0, 12413.666666666666], [90.0, 12875.250000000002], [89.0, 11730.0], [88.0, 12282.333333333334], [95.0, 12006.090909090908], [94.0, 12592.0], [93.0, 12030.90909090909], [92.0, 12483.0], [99.0, 12577.75], [98.0, 11842.966666666667], [97.0, 14058.461538461535], [96.0, 12780.4], [100.0, 11316.388585472407], [1.0, 810.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.89550000000006, 11293.69199999998]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1933.25, "minX": 1.59337854E12, "maxY": 11803.6, "series": [{"data": [[1.59337866E12, 11803.6], [1.59337896E12, 8703.016666666666], [1.59337854E12, 10007.4], [1.59337884E12, 10862.733333333334], [1.5933789E12, 10456.45], [1.59337872E12, 11055.183333333332], [1.59337878E12, 10926.883333333333], [1.5933786E12, 11718.066666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59337866E12, 2622.0], [1.59337896E12, 1933.25], [1.59337854E12, 2223.0], [1.59337884E12, 2413.0], [1.5933789E12, 2322.75], [1.59337872E12, 2455.75], [1.59337878E12, 2427.25], [1.5933786E12, 2603.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59337896E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10140.358974358975, "minX": 1.59337854E12, "maxY": 12219.437627811854, "series": [{"data": [[1.59337866E12, 11042.545289855074], [1.59337896E12, 11213.702702702696], [1.59337854E12, 10140.358974358975], [1.59337884E12, 11870.092519685044], [1.5933789E12, 12219.437627811854], [1.59337872E12, 11427.203094777575], [1.59337878E12, 11634.581213307243], [1.5933786E12, 10786.808394160582]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59337896E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10140.245726495717, "minX": 1.59337854E12, "maxY": 12219.411042944788, "series": [{"data": [[1.59337866E12, 11042.49456521739], [1.59337896E12, 11213.663390663378], [1.59337854E12, 10140.245726495717], [1.59337884E12, 11870.051181102368], [1.5933789E12, 12219.411042944788], [1.59337872E12, 11427.139264990328], [1.59337878E12, 11634.545988258318], [1.5933786E12, 10786.724452554732]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59337896E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.17444717444717456, "minX": 1.59337854E12, "maxY": 4.880341880341882, "series": [{"data": [[1.59337866E12, 0.2753623188405797], [1.59337896E12, 0.17444717444717456], [1.59337854E12, 4.880341880341882], [1.59337884E12, 0.23818897637795272], [1.5933789E12, 0.30470347648261775], [1.59337872E12, 0.3810444874274663], [1.59337878E12, 0.2935420743639923], [1.5933786E12, 0.2828467153284668]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59337896E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 765.0, "minX": 1.59337854E12, "maxY": 23256.0, "series": [{"data": [[1.59337866E12, 18057.0], [1.59337896E12, 19069.0], [1.59337854E12, 16958.0], [1.59337884E12, 22045.0], [1.5933789E12, 23256.0], [1.59337872E12, 20624.0], [1.59337878E12, 19975.0], [1.5933786E12, 19974.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59337866E12, 6334.815998945236], [1.59337896E12, 1273.6639696502687], [1.59337854E12, 2747.988998993635], [1.59337884E12, 7573.786984587908], [1.5933789E12, 7347.279975700379], [1.59337872E12, 6522.367992095948], [1.59337878E12, 7021.903998413086], [1.5933786E12, 6907.788930758238]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59337866E12, 6387.217005801201], [1.59337896E12, 1389.7200136184692], [1.59337854E12, 2751.787900402546], [1.59337884E12, 7632.122106359005], [1.5933789E12, 7439.008009719849], [1.59337872E12, 6553.743203754425], [1.59337878E12, 7031.05920288086], [1.5933786E12, 7006.005408062935]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59337866E12, 6362.884992748499], [1.59337896E12, 1337.3119848251342], [1.59337854E12, 2750.0994994968178], [1.59337884E12, 7606.1084922939535], [1.5933789E12, 7398.239987850189], [1.59337872E12, 6538.943996047974], [1.59337878E12, 7025.231999206543], [1.5933786E12, 6972.186989921332]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59337866E12, 5442.0], [1.59337896E12, 765.0], [1.59337854E12, 2436.0], [1.59337884E12, 6673.0], [1.5933789E12, 5579.0], [1.59337872E12, 6160.0], [1.59337878E12, 6739.0], [1.5933786E12, 5006.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59337866E12, 10846.5], [1.59337896E12, 11522.0], [1.59337854E12, 10255.5], [1.59337884E12, 11782.5], [1.5933789E12, 12115.0], [1.59337872E12, 11265.0], [1.59337878E12, 11536.0], [1.5933786E12, 10706.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59337896E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9935.5, "minX": 1.0, "maxY": 11998.0, "series": [{"data": [[8.0, 11401.5], [2.0, 11177.0], [9.0, 11294.0], [10.0, 11501.0], [11.0, 11790.5], [3.0, 10971.5], [12.0, 11348.5], [13.0, 11194.0], [14.0, 11078.0], [15.0, 11335.5], [4.0, 11034.5], [1.0, 10356.0], [16.0, 10905.0], [17.0, 10440.0], [18.0, 9935.5], [19.0, 11998.0], [5.0, 10816.0], [20.0, 10897.5], [21.0, 11914.0], [22.0, 10103.0], [6.0, 11064.5], [7.0, 10934.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9935.5, "minX": 1.0, "maxY": 11998.0, "series": [{"data": [[8.0, 11401.5], [2.0, 11177.0], [9.0, 11294.0], [10.0, 11500.5], [11.0, 11790.5], [3.0, 10971.0], [12.0, 11348.5], [13.0, 11194.0], [14.0, 11078.0], [15.0, 11335.5], [4.0, 11034.5], [1.0, 10355.0], [16.0, 10905.0], [17.0, 10440.0], [18.0, 9935.5], [19.0, 11998.0], [5.0, 10816.0], [20.0, 10897.5], [21.0, 11914.0], [22.0, 10103.0], [6.0, 11064.5], [7.0, 10933.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.116666666666666, "minX": 1.59337854E12, "maxY": 9.466666666666667, "series": [{"data": [[1.59337866E12, 9.2], [1.59337896E12, 5.116666666666666], [1.59337854E12, 9.466666666666667], [1.59337884E12, 8.466666666666667], [1.5933789E12, 8.15], [1.59337872E12, 8.616666666666667], [1.59337878E12, 8.516666666666667], [1.5933786E12, 9.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59337896E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.783333333333333, "minX": 1.59337854E12, "maxY": 9.2, "series": [{"data": [[1.59337866E12, 9.2], [1.59337896E12, 6.783333333333333], [1.59337854E12, 7.8], [1.59337884E12, 8.466666666666667], [1.5933789E12, 8.15], [1.59337872E12, 8.616666666666667], [1.59337878E12, 8.516666666666667], [1.5933786E12, 9.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59337896E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.783333333333333, "minX": 1.59337854E12, "maxY": 9.2, "series": [{"data": [[1.59337866E12, 9.2], [1.59337896E12, 6.783333333333333], [1.59337854E12, 7.8], [1.59337884E12, 8.466666666666667], [1.5933789E12, 8.15], [1.59337872E12, 8.616666666666667], [1.59337878E12, 8.516666666666667], [1.5933786E12, 9.133333333333333]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59337896E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.783333333333333, "minX": 1.59337854E12, "maxY": 9.2, "series": [{"data": [[1.59337866E12, 9.2], [1.59337896E12, 6.783333333333333], [1.59337854E12, 7.8], [1.59337884E12, 8.466666666666667], [1.5933789E12, 8.15], [1.59337872E12, 8.616666666666667], [1.59337878E12, 8.516666666666667], [1.5933786E12, 9.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59337896E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

