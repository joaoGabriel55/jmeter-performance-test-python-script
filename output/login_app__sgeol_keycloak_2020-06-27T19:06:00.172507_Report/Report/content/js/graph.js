/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 839.0, "minX": 0.0, "maxY": 28130.0, "series": [{"data": [[0.0, 839.0], [0.1, 1841.0], [0.2, 3608.0], [0.3, 3866.0], [0.4, 4047.0], [0.5, 4371.0], [0.6, 4501.0], [0.7, 4621.0], [0.8, 4846.0], [0.9, 5113.0], [1.0, 5242.0], [1.1, 5374.0], [1.2, 5671.0], [1.3, 5849.0], [1.4, 6100.0], [1.5, 6326.0], [1.6, 6514.0], [1.7, 6725.0], [1.8, 6846.0], [1.9, 6949.0], [2.0, 7079.0], [2.1, 7258.0], [2.2, 7332.0], [2.3, 7472.0], [2.4, 7648.0], [2.5, 7724.0], [2.6, 7824.0], [2.7, 7928.0], [2.8, 7971.0], [2.9, 8082.0], [3.0, 8158.0], [3.1, 8209.0], [3.2, 8254.0], [3.3, 8324.0], [3.4, 8438.0], [3.5, 8480.0], [3.6, 8533.0], [3.7, 8621.0], [3.8, 8682.0], [3.9, 8710.0], [4.0, 8752.0], [4.1, 8818.0], [4.2, 8847.0], [4.3, 8877.0], [4.4, 8918.0], [4.5, 8977.0], [4.6, 9048.0], [4.7, 9076.0], [4.8, 9133.0], [4.9, 9174.0], [5.0, 9202.0], [5.1, 9255.0], [5.2, 9291.0], [5.3, 9322.0], [5.4, 9358.0], [5.5, 9395.0], [5.6, 9427.0], [5.7, 9462.0], [5.8, 9497.0], [5.9, 9518.0], [6.0, 9548.0], [6.1, 9586.0], [6.2, 9602.0], [6.3, 9644.0], [6.4, 9676.0], [6.5, 9693.0], [6.6, 9711.0], [6.7, 9722.0], [6.8, 9747.0], [6.9, 9791.0], [7.0, 9828.0], [7.1, 9857.0], [7.2, 9873.0], [7.3, 9913.0], [7.4, 9923.0], [7.5, 9943.0], [7.6, 9963.0], [7.7, 9980.0], [7.8, 9991.0], [7.9, 10016.0], [8.0, 10035.0], [8.1, 10048.0], [8.2, 10071.0], [8.3, 10095.0], [8.4, 10110.0], [8.5, 10137.0], [8.6, 10158.0], [8.7, 10179.0], [8.8, 10208.0], [8.9, 10218.0], [9.0, 10250.0], [9.1, 10276.0], [9.2, 10285.0], [9.3, 10313.0], [9.4, 10327.0], [9.5, 10348.0], [9.6, 10369.0], [9.7, 10384.0], [9.8, 10391.0], [9.9, 10401.0], [10.0, 10416.0], [10.1, 10427.0], [10.2, 10441.0], [10.3, 10463.0], [10.4, 10500.0], [10.5, 10515.0], [10.6, 10528.0], [10.7, 10540.0], [10.8, 10556.0], [10.9, 10565.0], [11.0, 10588.0], [11.1, 10603.0], [11.2, 10618.0], [11.3, 10638.0], [11.4, 10653.0], [11.5, 10677.0], [11.6, 10699.0], [11.7, 10705.0], [11.8, 10741.0], [11.9, 10758.0], [12.0, 10763.0], [12.1, 10777.0], [12.2, 10785.0], [12.3, 10799.0], [12.4, 10810.0], [12.5, 10825.0], [12.6, 10850.0], [12.7, 10859.0], [12.8, 10875.0], [12.9, 10879.0], [13.0, 10894.0], [13.1, 10904.0], [13.2, 10913.0], [13.3, 10926.0], [13.4, 10932.0], [13.5, 10958.0], [13.6, 10967.0], [13.7, 10975.0], [13.8, 10984.0], [13.9, 10993.0], [14.0, 11008.0], [14.1, 11012.0], [14.2, 11035.0], [14.3, 11041.0], [14.4, 11057.0], [14.5, 11074.0], [14.6, 11080.0], [14.7, 11087.0], [14.8, 11101.0], [14.9, 11119.0], [15.0, 11124.0], [15.1, 11134.0], [15.2, 11144.0], [15.3, 11156.0], [15.4, 11161.0], [15.5, 11175.0], [15.6, 11188.0], [15.7, 11198.0], [15.8, 11208.0], [15.9, 11219.0], [16.0, 11235.0], [16.1, 11245.0], [16.2, 11261.0], [16.3, 11275.0], [16.4, 11282.0], [16.5, 11289.0], [16.6, 11302.0], [16.7, 11315.0], [16.8, 11325.0], [16.9, 11343.0], [17.0, 11352.0], [17.1, 11364.0], [17.2, 11375.0], [17.3, 11387.0], [17.4, 11391.0], [17.5, 11399.0], [17.6, 11407.0], [17.7, 11409.0], [17.8, 11416.0], [17.9, 11425.0], [18.0, 11439.0], [18.1, 11445.0], [18.2, 11461.0], [18.3, 11468.0], [18.4, 11479.0], [18.5, 11489.0], [18.6, 11500.0], [18.7, 11509.0], [18.8, 11522.0], [18.9, 11537.0], [19.0, 11544.0], [19.1, 11552.0], [19.2, 11559.0], [19.3, 11566.0], [19.4, 11576.0], [19.5, 11586.0], [19.6, 11597.0], [19.7, 11603.0], [19.8, 11612.0], [19.9, 11625.0], [20.0, 11645.0], [20.1, 11651.0], [20.2, 11658.0], [20.3, 11662.0], [20.4, 11672.0], [20.5, 11685.0], [20.6, 11689.0], [20.7, 11702.0], [20.8, 11706.0], [20.9, 11713.0], [21.0, 11729.0], [21.1, 11732.0], [21.2, 11739.0], [21.3, 11743.0], [21.4, 11754.0], [21.5, 11764.0], [21.6, 11777.0], [21.7, 11785.0], [21.8, 11796.0], [21.9, 11804.0], [22.0, 11818.0], [22.1, 11829.0], [22.2, 11839.0], [22.3, 11843.0], [22.4, 11860.0], [22.5, 11870.0], [22.6, 11880.0], [22.7, 11888.0], [22.8, 11903.0], [22.9, 11913.0], [23.0, 11929.0], [23.1, 11940.0], [23.2, 11950.0], [23.3, 11956.0], [23.4, 11963.0], [23.5, 11979.0], [23.6, 11994.0], [23.7, 12004.0], [23.8, 12009.0], [23.9, 12017.0], [24.0, 12025.0], [24.1, 12029.0], [24.2, 12036.0], [24.3, 12040.0], [24.4, 12046.0], [24.5, 12052.0], [24.6, 12059.0], [24.7, 12072.0], [24.8, 12082.0], [24.9, 12092.0], [25.0, 12108.0], [25.1, 12113.0], [25.2, 12117.0], [25.3, 12129.0], [25.4, 12145.0], [25.5, 12155.0], [25.6, 12164.0], [25.7, 12169.0], [25.8, 12182.0], [25.9, 12193.0], [26.0, 12203.0], [26.1, 12210.0], [26.2, 12216.0], [26.3, 12224.0], [26.4, 12238.0], [26.5, 12241.0], [26.6, 12252.0], [26.7, 12257.0], [26.8, 12266.0], [26.9, 12272.0], [27.0, 12280.0], [27.1, 12289.0], [27.2, 12303.0], [27.3, 12311.0], [27.4, 12324.0], [27.5, 12332.0], [27.6, 12337.0], [27.7, 12348.0], [27.8, 12356.0], [27.9, 12361.0], [28.0, 12368.0], [28.1, 12373.0], [28.2, 12375.0], [28.3, 12390.0], [28.4, 12397.0], [28.5, 12407.0], [28.6, 12417.0], [28.7, 12422.0], [28.8, 12424.0], [28.9, 12428.0], [29.0, 12437.0], [29.1, 12453.0], [29.2, 12465.0], [29.3, 12478.0], [29.4, 12497.0], [29.5, 12510.0], [29.6, 12517.0], [29.7, 12531.0], [29.8, 12540.0], [29.9, 12546.0], [30.0, 12554.0], [30.1, 12562.0], [30.2, 12567.0], [30.3, 12571.0], [30.4, 12586.0], [30.5, 12592.0], [30.6, 12604.0], [30.7, 12608.0], [30.8, 12614.0], [30.9, 12625.0], [31.0, 12631.0], [31.1, 12636.0], [31.2, 12644.0], [31.3, 12649.0], [31.4, 12654.0], [31.5, 12663.0], [31.6, 12667.0], [31.7, 12670.0], [31.8, 12677.0], [31.9, 12680.0], [32.0, 12686.0], [32.1, 12695.0], [32.2, 12700.0], [32.3, 12708.0], [32.4, 12721.0], [32.5, 12729.0], [32.6, 12740.0], [32.7, 12751.0], [32.8, 12757.0], [32.9, 12764.0], [33.0, 12771.0], [33.1, 12778.0], [33.2, 12786.0], [33.3, 12796.0], [33.4, 12803.0], [33.5, 12808.0], [33.6, 12818.0], [33.7, 12829.0], [33.8, 12836.0], [33.9, 12840.0], [34.0, 12845.0], [34.1, 12854.0], [34.2, 12872.0], [34.3, 12881.0], [34.4, 12885.0], [34.5, 12889.0], [34.6, 12897.0], [34.7, 12904.0], [34.8, 12912.0], [34.9, 12918.0], [35.0, 12925.0], [35.1, 12928.0], [35.2, 12935.0], [35.3, 12941.0], [35.4, 12946.0], [35.5, 12954.0], [35.6, 12957.0], [35.7, 12969.0], [35.8, 12979.0], [35.9, 12984.0], [36.0, 12988.0], [36.1, 12991.0], [36.2, 12997.0], [36.3, 13006.0], [36.4, 13014.0], [36.5, 13026.0], [36.6, 13033.0], [36.7, 13038.0], [36.8, 13049.0], [36.9, 13052.0], [37.0, 13056.0], [37.1, 13065.0], [37.2, 13072.0], [37.3, 13075.0], [37.4, 13082.0], [37.5, 13092.0], [37.6, 13097.0], [37.7, 13100.0], [37.8, 13107.0], [37.9, 13115.0], [38.0, 13125.0], [38.1, 13133.0], [38.2, 13140.0], [38.3, 13144.0], [38.4, 13151.0], [38.5, 13164.0], [38.6, 13173.0], [38.7, 13181.0], [38.8, 13193.0], [38.9, 13197.0], [39.0, 13210.0], [39.1, 13215.0], [39.2, 13220.0], [39.3, 13223.0], [39.4, 13234.0], [39.5, 13239.0], [39.6, 13249.0], [39.7, 13254.0], [39.8, 13259.0], [39.9, 13265.0], [40.0, 13272.0], [40.1, 13283.0], [40.2, 13298.0], [40.3, 13304.0], [40.4, 13310.0], [40.5, 13314.0], [40.6, 13319.0], [40.7, 13324.0], [40.8, 13331.0], [40.9, 13340.0], [41.0, 13349.0], [41.1, 13357.0], [41.2, 13364.0], [41.3, 13372.0], [41.4, 13383.0], [41.5, 13392.0], [41.6, 13407.0], [41.7, 13410.0], [41.8, 13417.0], [41.9, 13422.0], [42.0, 13428.0], [42.1, 13436.0], [42.2, 13442.0], [42.3, 13456.0], [42.4, 13464.0], [42.5, 13475.0], [42.6, 13492.0], [42.7, 13503.0], [42.8, 13509.0], [42.9, 13517.0], [43.0, 13529.0], [43.1, 13542.0], [43.2, 13553.0], [43.3, 13562.0], [43.4, 13564.0], [43.5, 13570.0], [43.6, 13577.0], [43.7, 13584.0], [43.8, 13594.0], [43.9, 13597.0], [44.0, 13604.0], [44.1, 13613.0], [44.2, 13619.0], [44.3, 13623.0], [44.4, 13629.0], [44.5, 13636.0], [44.6, 13641.0], [44.7, 13652.0], [44.8, 13655.0], [44.9, 13660.0], [45.0, 13671.0], [45.1, 13678.0], [45.2, 13688.0], [45.3, 13694.0], [45.4, 13702.0], [45.5, 13708.0], [45.6, 13713.0], [45.7, 13716.0], [45.8, 13720.0], [45.9, 13725.0], [46.0, 13736.0], [46.1, 13742.0], [46.2, 13757.0], [46.3, 13768.0], [46.4, 13772.0], [46.5, 13781.0], [46.6, 13792.0], [46.7, 13800.0], [46.8, 13804.0], [46.9, 13807.0], [47.0, 13812.0], [47.1, 13820.0], [47.2, 13832.0], [47.3, 13839.0], [47.4, 13845.0], [47.5, 13856.0], [47.6, 13861.0], [47.7, 13867.0], [47.8, 13871.0], [47.9, 13884.0], [48.0, 13890.0], [48.1, 13895.0], [48.2, 13901.0], [48.3, 13920.0], [48.4, 13922.0], [48.5, 13927.0], [48.6, 13931.0], [48.7, 13938.0], [48.8, 13941.0], [48.9, 13944.0], [49.0, 13954.0], [49.1, 13958.0], [49.2, 13966.0], [49.3, 13979.0], [49.4, 13986.0], [49.5, 14001.0], [49.6, 14011.0], [49.7, 14015.0], [49.8, 14021.0], [49.9, 14030.0], [50.0, 14034.0], [50.1, 14040.0], [50.2, 14047.0], [50.3, 14059.0], [50.4, 14073.0], [50.5, 14082.0], [50.6, 14087.0], [50.7, 14095.0], [50.8, 14098.0], [50.9, 14112.0], [51.0, 14119.0], [51.1, 14125.0], [51.2, 14130.0], [51.3, 14138.0], [51.4, 14147.0], [51.5, 14152.0], [51.6, 14161.0], [51.7, 14164.0], [51.8, 14171.0], [51.9, 14175.0], [52.0, 14178.0], [52.1, 14188.0], [52.2, 14201.0], [52.3, 14205.0], [52.4, 14208.0], [52.5, 14214.0], [52.6, 14226.0], [52.7, 14233.0], [52.8, 14237.0], [52.9, 14246.0], [53.0, 14253.0], [53.1, 14262.0], [53.2, 14266.0], [53.3, 14277.0], [53.4, 14286.0], [53.5, 14300.0], [53.6, 14307.0], [53.7, 14322.0], [53.8, 14327.0], [53.9, 14338.0], [54.0, 14342.0], [54.1, 14354.0], [54.2, 14362.0], [54.3, 14366.0], [54.4, 14372.0], [54.5, 14377.0], [54.6, 14388.0], [54.7, 14396.0], [54.8, 14403.0], [54.9, 14415.0], [55.0, 14422.0], [55.1, 14433.0], [55.2, 14441.0], [55.3, 14448.0], [55.4, 14459.0], [55.5, 14464.0], [55.6, 14473.0], [55.7, 14481.0], [55.8, 14487.0], [55.9, 14493.0], [56.0, 14498.0], [56.1, 14505.0], [56.2, 14508.0], [56.3, 14516.0], [56.4, 14523.0], [56.5, 14545.0], [56.6, 14555.0], [56.7, 14560.0], [56.8, 14571.0], [56.9, 14579.0], [57.0, 14595.0], [57.1, 14604.0], [57.2, 14608.0], [57.3, 14616.0], [57.4, 14622.0], [57.5, 14630.0], [57.6, 14640.0], [57.7, 14647.0], [57.8, 14653.0], [57.9, 14660.0], [58.0, 14668.0], [58.1, 14679.0], [58.2, 14685.0], [58.3, 14697.0], [58.4, 14703.0], [58.5, 14708.0], [58.6, 14713.0], [58.7, 14716.0], [58.8, 14723.0], [58.9, 14727.0], [59.0, 14733.0], [59.1, 14739.0], [59.2, 14745.0], [59.3, 14751.0], [59.4, 14756.0], [59.5, 14771.0], [59.6, 14787.0], [59.7, 14797.0], [59.8, 14800.0], [59.9, 14815.0], [60.0, 14824.0], [60.1, 14830.0], [60.2, 14835.0], [60.3, 14849.0], [60.4, 14859.0], [60.5, 14870.0], [60.6, 14879.0], [60.7, 14890.0], [60.8, 14901.0], [60.9, 14907.0], [61.0, 14911.0], [61.1, 14916.0], [61.2, 14929.0], [61.3, 14934.0], [61.4, 14941.0], [61.5, 14952.0], [61.6, 14963.0], [61.7, 14969.0], [61.8, 14984.0], [61.9, 14994.0], [62.0, 15005.0], [62.1, 15012.0], [62.2, 15023.0], [62.3, 15029.0], [62.4, 15040.0], [62.5, 15047.0], [62.6, 15058.0], [62.7, 15071.0], [62.8, 15081.0], [62.9, 15084.0], [63.0, 15093.0], [63.1, 15098.0], [63.2, 15104.0], [63.3, 15114.0], [63.4, 15117.0], [63.5, 15124.0], [63.6, 15131.0], [63.7, 15133.0], [63.8, 15143.0], [63.9, 15151.0], [64.0, 15159.0], [64.1, 15164.0], [64.2, 15172.0], [64.3, 15188.0], [64.4, 15200.0], [64.5, 15213.0], [64.6, 15217.0], [64.7, 15222.0], [64.8, 15234.0], [64.9, 15238.0], [65.0, 15245.0], [65.1, 15258.0], [65.2, 15267.0], [65.3, 15278.0], [65.4, 15289.0], [65.5, 15298.0], [65.6, 15308.0], [65.7, 15311.0], [65.8, 15319.0], [65.9, 15331.0], [66.0, 15336.0], [66.1, 15349.0], [66.2, 15357.0], [66.3, 15371.0], [66.4, 15373.0], [66.5, 15383.0], [66.6, 15387.0], [66.7, 15398.0], [66.8, 15402.0], [66.9, 15407.0], [67.0, 15414.0], [67.1, 15425.0], [67.2, 15443.0], [67.3, 15455.0], [67.4, 15462.0], [67.5, 15470.0], [67.6, 15477.0], [67.7, 15499.0], [67.8, 15506.0], [67.9, 15516.0], [68.0, 15524.0], [68.1, 15534.0], [68.2, 15551.0], [68.3, 15553.0], [68.4, 15564.0], [68.5, 15578.0], [68.6, 15587.0], [68.7, 15596.0], [68.8, 15612.0], [68.9, 15628.0], [69.0, 15643.0], [69.1, 15653.0], [69.2, 15657.0], [69.3, 15664.0], [69.4, 15688.0], [69.5, 15692.0], [69.6, 15707.0], [69.7, 15716.0], [69.8, 15724.0], [69.9, 15736.0], [70.0, 15748.0], [70.1, 15762.0], [70.2, 15767.0], [70.3, 15773.0], [70.4, 15780.0], [70.5, 15792.0], [70.6, 15801.0], [70.7, 15810.0], [70.8, 15823.0], [70.9, 15847.0], [71.0, 15851.0], [71.1, 15853.0], [71.2, 15857.0], [71.3, 15864.0], [71.4, 15872.0], [71.5, 15875.0], [71.6, 15885.0], [71.7, 15889.0], [71.8, 15894.0], [71.9, 15908.0], [72.0, 15918.0], [72.1, 15927.0], [72.2, 15936.0], [72.3, 15940.0], [72.4, 15957.0], [72.5, 15977.0], [72.6, 15993.0], [72.7, 16005.0], [72.8, 16021.0], [72.9, 16040.0], [73.0, 16046.0], [73.1, 16055.0], [73.2, 16071.0], [73.3, 16093.0], [73.4, 16108.0], [73.5, 16112.0], [73.6, 16118.0], [73.7, 16127.0], [73.8, 16140.0], [73.9, 16144.0], [74.0, 16154.0], [74.1, 16160.0], [74.2, 16172.0], [74.3, 16177.0], [74.4, 16179.0], [74.5, 16186.0], [74.6, 16192.0], [74.7, 16202.0], [74.8, 16208.0], [74.9, 16219.0], [75.0, 16231.0], [75.1, 16244.0], [75.2, 16255.0], [75.3, 16263.0], [75.4, 16268.0], [75.5, 16284.0], [75.6, 16296.0], [75.7, 16303.0], [75.8, 16319.0], [75.9, 16333.0], [76.0, 16341.0], [76.1, 16353.0], [76.2, 16362.0], [76.3, 16368.0], [76.4, 16381.0], [76.5, 16396.0], [76.6, 16404.0], [76.7, 16411.0], [76.8, 16420.0], [76.9, 16427.0], [77.0, 16443.0], [77.1, 16456.0], [77.2, 16475.0], [77.3, 16495.0], [77.4, 16505.0], [77.5, 16513.0], [77.6, 16518.0], [77.7, 16528.0], [77.8, 16535.0], [77.9, 16542.0], [78.0, 16557.0], [78.1, 16572.0], [78.2, 16583.0], [78.3, 16598.0], [78.4, 16609.0], [78.5, 16617.0], [78.6, 16627.0], [78.7, 16635.0], [78.8, 16642.0], [78.9, 16657.0], [79.0, 16679.0], [79.1, 16701.0], [79.2, 16714.0], [79.3, 16729.0], [79.4, 16745.0], [79.5, 16753.0], [79.6, 16759.0], [79.7, 16787.0], [79.8, 16815.0], [79.9, 16825.0], [80.0, 16837.0], [80.1, 16841.0], [80.2, 16853.0], [80.3, 16870.0], [80.4, 16883.0], [80.5, 16896.0], [80.6, 16907.0], [80.7, 16911.0], [80.8, 16926.0], [80.9, 16948.0], [81.0, 16968.0], [81.1, 16975.0], [81.2, 16987.0], [81.3, 16993.0], [81.4, 17017.0], [81.5, 17032.0], [81.6, 17042.0], [81.7, 17053.0], [81.8, 17064.0], [81.9, 17075.0], [82.0, 17085.0], [82.1, 17087.0], [82.2, 17099.0], [82.3, 17110.0], [82.4, 17132.0], [82.5, 17145.0], [82.6, 17160.0], [82.7, 17175.0], [82.8, 17181.0], [82.9, 17199.0], [83.0, 17206.0], [83.1, 17210.0], [83.2, 17224.0], [83.3, 17243.0], [83.4, 17264.0], [83.5, 17270.0], [83.6, 17281.0], [83.7, 17288.0], [83.8, 17308.0], [83.9, 17328.0], [84.0, 17341.0], [84.1, 17355.0], [84.2, 17373.0], [84.3, 17384.0], [84.4, 17398.0], [84.5, 17420.0], [84.6, 17424.0], [84.7, 17446.0], [84.8, 17455.0], [84.9, 17478.0], [85.0, 17486.0], [85.1, 17494.0], [85.2, 17521.0], [85.3, 17534.0], [85.4, 17543.0], [85.5, 17561.0], [85.6, 17571.0], [85.7, 17596.0], [85.8, 17625.0], [85.9, 17643.0], [86.0, 17662.0], [86.1, 17667.0], [86.2, 17681.0], [86.3, 17696.0], [86.4, 17705.0], [86.5, 17732.0], [86.6, 17742.0], [86.7, 17757.0], [86.8, 17772.0], [86.9, 17784.0], [87.0, 17802.0], [87.1, 17812.0], [87.2, 17827.0], [87.3, 17838.0], [87.4, 17856.0], [87.5, 17879.0], [87.6, 17896.0], [87.7, 17909.0], [87.8, 17933.0], [87.9, 17945.0], [88.0, 17966.0], [88.1, 18007.0], [88.2, 18020.0], [88.3, 18041.0], [88.4, 18067.0], [88.5, 18091.0], [88.6, 18108.0], [88.7, 18125.0], [88.8, 18150.0], [88.9, 18170.0], [89.0, 18177.0], [89.1, 18189.0], [89.2, 18223.0], [89.3, 18233.0], [89.4, 18244.0], [89.5, 18285.0], [89.6, 18297.0], [89.7, 18311.0], [89.8, 18337.0], [89.9, 18371.0], [90.0, 18380.0], [90.1, 18401.0], [90.2, 18429.0], [90.3, 18461.0], [90.4, 18476.0], [90.5, 18492.0], [90.6, 18511.0], [90.7, 18538.0], [90.8, 18562.0], [90.9, 18583.0], [91.0, 18599.0], [91.1, 18619.0], [91.2, 18636.0], [91.3, 18650.0], [91.4, 18661.0], [91.5, 18675.0], [91.6, 18696.0], [91.7, 18722.0], [91.8, 18733.0], [91.9, 18756.0], [92.0, 18774.0], [92.1, 18803.0], [92.2, 18818.0], [92.3, 18837.0], [92.4, 18854.0], [92.5, 18890.0], [92.6, 18924.0], [92.7, 18947.0], [92.8, 18969.0], [92.9, 18989.0], [93.0, 19022.0], [93.1, 19040.0], [93.2, 19075.0], [93.3, 19109.0], [93.4, 19128.0], [93.5, 19136.0], [93.6, 19156.0], [93.7, 19192.0], [93.8, 19237.0], [93.9, 19266.0], [94.0, 19281.0], [94.1, 19293.0], [94.2, 19315.0], [94.3, 19328.0], [94.4, 19344.0], [94.5, 19393.0], [94.6, 19411.0], [94.7, 19447.0], [94.8, 19460.0], [94.9, 19475.0], [95.0, 19506.0], [95.1, 19541.0], [95.2, 19562.0], [95.3, 19573.0], [95.4, 19599.0], [95.5, 19609.0], [95.6, 19656.0], [95.7, 19685.0], [95.8, 19698.0], [95.9, 19741.0], [96.0, 19768.0], [96.1, 19815.0], [96.2, 19838.0], [96.3, 19882.0], [96.4, 19928.0], [96.5, 19971.0], [96.6, 20022.0], [96.7, 20059.0], [96.8, 20114.0], [96.9, 20178.0], [97.0, 20230.0], [97.1, 20341.0], [97.2, 20416.0], [97.3, 20476.0], [97.4, 20504.0], [97.5, 20539.0], [97.6, 20615.0], [97.7, 20666.0], [97.8, 20716.0], [97.9, 20814.0], [98.0, 20900.0], [98.1, 20933.0], [98.2, 21024.0], [98.3, 21060.0], [98.4, 21132.0], [98.5, 21210.0], [98.6, 21275.0], [98.7, 21329.0], [98.8, 21415.0], [98.9, 21589.0], [99.0, 21677.0], [99.1, 21895.0], [99.2, 22067.0], [99.3, 22266.0], [99.4, 22329.0], [99.5, 22532.0], [99.6, 23021.0], [99.7, 23411.0], [99.8, 24165.0], [99.9, 25032.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 82.0, "series": [{"data": [[800.0, 2.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 1.0], [1800.0, 1.0], [2400.0, 1.0], [2900.0, 2.0], [3100.0, 1.0], [3700.0, 1.0], [3600.0, 3.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 4.0], [4200.0, 1.0], [4300.0, 1.0], [4400.0, 4.0], [4600.0, 3.0], [4500.0, 4.0], [4800.0, 1.0], [4700.0, 3.0], [4900.0, 3.0], [5100.0, 4.0], [5000.0, 1.0], [5300.0, 5.0], [5200.0, 2.0], [5500.0, 3.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 3.0], [5700.0, 3.0], [6000.0, 2.0], [6100.0, 3.0], [5900.0, 1.0], [6200.0, 2.0], [6300.0, 3.0], [6500.0, 2.0], [6600.0, 3.0], [6400.0, 1.0], [6700.0, 3.0], [6800.0, 8.0], [6900.0, 2.0], [7100.0, 2.0], [7000.0, 4.0], [7400.0, 3.0], [7200.0, 5.0], [7300.0, 5.0], [7500.0, 2.0], [7600.0, 6.0], [7800.0, 7.0], [7900.0, 9.0], [7700.0, 3.0], [8000.0, 5.0], [8100.0, 6.0], [8200.0, 9.0], [8700.0, 10.0], [8600.0, 8.0], [8400.0, 9.0], [8300.0, 5.0], [8500.0, 7.0], [8800.0, 18.0], [9100.0, 13.0], [8900.0, 8.0], [9000.0, 10.0], [9200.0, 12.0], [9300.0, 15.0], [9600.0, 18.0], [9700.0, 20.0], [9500.0, 18.0], [9400.0, 14.0], [9900.0, 29.0], [10100.0, 19.0], [9800.0, 17.0], [10200.0, 25.0], [10000.0, 25.0], [10600.0, 28.0], [10400.0, 25.0], [10300.0, 33.0], [10700.0, 37.0], [10500.0, 33.0], [11000.0, 42.0], [11100.0, 49.0], [10900.0, 45.0], [10800.0, 35.0], [11200.0, 39.0], [11600.0, 52.0], [11400.0, 53.0], [11300.0, 48.0], [11700.0, 57.0], [11500.0, 54.0], [11800.0, 47.0], [12100.0, 51.0], [12000.0, 65.0], [12200.0, 58.0], [11900.0, 45.0], [12300.0, 64.0], [12400.0, 49.0], [12600.0, 82.0], [12700.0, 58.0], [12500.0, 56.0], [12900.0, 81.0], [13200.0, 66.0], [13000.0, 73.0], [13300.0, 64.0], [13100.0, 61.0], [12800.0, 64.0], [13800.0, 73.0], [13500.0, 64.0], [13700.0, 66.0], [13600.0, 71.0], [13400.0, 57.0], [14100.0, 69.0], [14200.0, 65.0], [14000.0, 66.0], [14300.0, 65.0], [13900.0, 67.0], [14600.0, 65.0], [14800.0, 52.0], [14400.0, 63.0], [14700.0, 70.0], [14500.0, 50.0], [15100.0, 61.0], [15000.0, 62.0], [14900.0, 57.0], [15300.0, 63.0], [15200.0, 56.0], [15400.0, 48.0], [15800.0, 64.0], [15600.0, 40.0], [15700.0, 51.0], [15500.0, 51.0], [15900.0, 40.0], [16200.0, 50.0], [16300.0, 43.0], [16100.0, 64.0], [16000.0, 36.0], [16600.0, 39.0], [17000.0, 45.0], [16400.0, 43.0], [16800.0, 42.0], [17200.0, 40.0], [17400.0, 35.0], [17600.0, 29.0], [17800.0, 31.0], [18200.0, 24.0], [18000.0, 24.0], [18400.0, 23.0], [18600.0, 30.0], [19200.0, 23.0], [19400.0, 22.0], [18800.0, 24.0], [19000.0, 15.0], [20000.0, 11.0], [19800.0, 14.0], [20200.0, 8.0], [19600.0, 20.0], [20400.0, 9.0], [21400.0, 2.0], [21200.0, 8.0], [20800.0, 5.0], [21000.0, 10.0], [20600.0, 10.0], [21600.0, 4.0], [21800.0, 4.0], [22200.0, 4.0], [22400.0, 2.0], [22000.0, 1.0], [23400.0, 1.0], [23000.0, 1.0], [23600.0, 1.0], [24000.0, 2.0], [24200.0, 1.0], [24400.0, 1.0], [25000.0, 2.0], [26400.0, 1.0], [16900.0, 37.0], [17100.0, 35.0], [16700.0, 32.0], [16500.0, 47.0], [17300.0, 36.0], [18300.0, 23.0], [18100.0, 30.0], [17900.0, 23.0], [17700.0, 33.0], [17500.0, 31.0], [19300.0, 19.0], [18700.0, 23.0], [18900.0, 21.0], [19100.0, 22.0], [18500.0, 24.0], [19700.0, 12.0], [19500.0, 21.0], [20100.0, 8.0], [19900.0, 11.0], [20300.0, 5.0], [21500.0, 5.0], [20700.0, 7.0], [21300.0, 7.0], [20500.0, 9.0], [21100.0, 6.0], [20900.0, 9.0], [21900.0, 4.0], [22500.0, 3.0], [21700.0, 1.0], [22100.0, 4.0], [22300.0, 3.0], [23300.0, 2.0], [22700.0, 3.0], [23100.0, 2.0], [23900.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [25900.0, 1.0], [26500.0, 1.0], [28100.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4947.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4947.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 48.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 22.622950819672123, "minX": 1.59329556E12, "maxY": 100.0, "series": [{"data": [[1.5932961E12, 100.0], [1.5932958E12, 100.0], [1.59329568E12, 100.0], [1.59329574E12, 100.0], [1.59329604E12, 100.0], [1.59329562E12, 100.0], [1.59329592E12, 100.0], [1.59329598E12, 100.0], [1.59329628E12, 22.622950819672123], [1.59329586E12, 100.0], [1.59329616E12, 100.0], [1.59329622E12, 83.73629242819847], [1.59329556E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329628E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 839.0, "minX": 1.0, "maxY": 19356.5, "series": [{"data": [[2.0, 899.0], [3.0, 1490.0], [4.0, 1400.0], [5.0, 3865.0], [7.0, 5445.0], [8.0, 4547.0], [9.0, 3645.0], [10.0, 4371.0], [11.0, 2425.0], [12.0, 5789.0], [13.0, 4718.0], [14.0, 4743.0], [15.0, 3639.0], [16.0, 5549.0], [17.0, 4562.0], [18.0, 5463.5], [19.0, 4781.0], [20.0, 5849.0], [21.0, 5671.0], [22.0, 6725.0], [23.0, 4612.0], [24.0, 6202.0], [25.0, 5374.0], [26.0, 5989.0], [27.0, 7003.0], [28.0, 7103.0], [29.0, 10051.0], [30.0, 9250.333333333334], [31.0, 8815.0], [33.0, 7328.0], [32.0, 6931.0], [35.0, 6362.0], [34.0, 8192.5], [37.0, 7467.333333333333], [36.0, 6068.0], [39.0, 8155.7], [38.0, 11057.0], [41.0, 11589.0], [40.0, 5560.0], [43.0, 8824.666666666666], [42.0, 9292.666666666666], [45.0, 14666.400000000001], [44.0, 13884.333333333334], [47.0, 13758.0], [46.0, 12030.5], [49.0, 15612.5], [48.0, 13667.5], [51.0, 15086.5], [50.0, 14464.0], [52.0, 7802.0], [55.0, 11128.0], [54.0, 11327.333333333334], [57.0, 11959.0], [56.0, 12400.333333333334], [58.0, 15234.0], [61.0, 8164.0], [60.0, 9676.5], [63.0, 9575.0], [62.0, 14131.0], [67.0, 17175.2], [66.0, 12102.375], [65.0, 12645.0], [64.0, 9222.0], [71.0, 15529.666666666666], [70.0, 14363.666666666666], [69.0, 14903.5], [68.0, 15593.57142857143], [75.0, 15833.666666666666], [74.0, 10428.5], [73.0, 11565.0], [72.0, 16879.0], [79.0, 10917.0], [78.0, 13635.333333333334], [77.0, 13852.5], [76.0, 11852.5], [83.0, 17481.166666666668], [82.0, 14353.0], [81.0, 14747.0], [80.0, 14409.5], [87.0, 11578.0], [86.0, 12292.5], [85.0, 16156.166666666666], [84.0, 13950.75], [91.0, 15519.696969696968], [90.0, 15802.0], [89.0, 17992.5], [88.0, 16391.090909090908], [95.0, 16994.8], [94.0, 16206.285714285716], [93.0, 16517.416666666668], [92.0, 19356.5], [99.0, 16204.250000000002], [98.0, 16116.900000000001], [97.0, 15028.5], [96.0, 17799.0], [100.0, 14245.41000859103], [1.0, 839.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.8102000000001, 14163.941599999953]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 284.6666666666667, "minX": 1.59329556E12, "maxY": 14801.6, "series": [{"data": [[1.5932961E12, 12281.5], [1.5932958E12, 13557.5], [1.59329568E12, 13780.8], [1.59329574E12, 14355.0], [1.59329604E12, 12441.0], [1.59329562E12, 14801.6], [1.59329592E12, 12185.8], [1.59329598E12, 12728.1], [1.59329628E12, 1945.9], [1.59329586E12, 12262.6], [1.59329616E12, 12728.1], [1.59329622E12, 12217.7], [1.59329556E12, 13015.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5932961E12, 1796.6666666666667], [1.5932958E12, 1983.3333333333333], [1.59329568E12, 2016.0], [1.59329574E12, 2100.0], [1.59329604E12, 1820.0], [1.59329562E12, 2165.3333333333335], [1.59329592E12, 1782.6666666666667], [1.59329598E12, 1862.0], [1.59329628E12, 284.6666666666667], [1.59329586E12, 1969.3333333333333], [1.59329616E12, 1862.0], [1.59329622E12, 1787.3333333333333], [1.59329556E12, 1904.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329628E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6099.426229508197, "minX": 1.59329556E12, "maxY": 15991.240837696323, "series": [{"data": [[1.5932961E12, 15148.109090909085], [1.5932958E12, 14338.887058823528], [1.59329568E12, 13371.43518518518], [1.59329574E12, 13351.528888888895], [1.59329604E12, 15514.738461538465], [1.59329562E12, 13247.967672413775], [1.59329592E12, 15991.240837696323], [1.59329598E12, 14991.097744360903], [1.59329628E12, 6099.426229508197], [1.59329586E12, 13837.545023696672], [1.59329616E12, 15147.676691729323], [1.59329622E12, 14756.182767624025], [1.59329556E12, 12044.249999999993]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329628E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6099.4098360655735, "minX": 1.59329556E12, "maxY": 15991.18586387435, "series": [{"data": [[1.5932961E12, 15148.075324675314], [1.5932958E12, 14338.84], [1.59329568E12, 13371.393518518526], [1.59329574E12, 13351.497777777771], [1.59329604E12, 15514.712820512814], [1.59329562E12, 13247.881465517243], [1.59329592E12, 15991.18586387435], [1.59329598E12, 14991.062656641601], [1.59329628E12, 6099.4098360655735], [1.59329586E12, 13837.502369668244], [1.59329616E12, 15147.64160401002], [1.59329622E12, 14756.138381201046], [1.59329556E12, 12044.14460784313]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329628E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.11475409836065573, "minX": 1.59329556E12, "maxY": 5.39950980392158, "series": [{"data": [[1.5932961E12, 0.2987012987012988], [1.5932958E12, 0.308235294117647], [1.59329568E12, 0.33796296296296297], [1.59329574E12, 0.33111111111111124], [1.59329604E12, 0.2948717948717949], [1.59329562E12, 0.3556034482758622], [1.59329592E12, 0.2722513089005235], [1.59329598E12, 0.3007518796992481], [1.59329628E12, 0.11475409836065573], [1.59329586E12, 0.2085308056872039], [1.59329616E12, 0.2907268170426067], [1.59329622E12, 0.27154046997389014], [1.59329556E12, 5.39950980392158]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329628E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 839.0, "minX": 1.59329556E12, "maxY": 28130.0, "series": [{"data": [[1.5932961E12, 24165.0], [1.5932958E12, 23411.0], [1.59329568E12, 20219.0], [1.59329574E12, 21474.0], [1.59329604E12, 22791.0], [1.59329562E12, 22525.0], [1.59329592E12, 25931.0], [1.59329598E12, 23106.0], [1.59329628E12, 14990.0], [1.59329586E12, 22266.0], [1.59329616E12, 26504.0], [1.59329622E12, 28130.0], [1.59329556E12, 21908.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5932961E12, 8580.91597846508], [1.5932958E12, 8857.16999949217], [1.59329568E12, 7031.001951892376], [1.59329574E12, 8061.254952150583], [1.59329604E12, 9096.835995898247], [1.59329562E12, 8008.954973059893], [1.59329592E12, 8468.418992968798], [1.59329598E12, 8512.999953269958], [1.59329628E12, 839.0], [1.59329586E12, 8047.124984711409], [1.59329616E12, 9106.19999074936], [1.59329622E12, 5520.2879933166505], [1.59329556E12, 3870.085999414921]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5932961E12, 8662.207608613968], [1.5932958E12, 8981.700623116492], [1.59329568E12, 7109.103504335881], [1.59329574E12, 8241.880519139766], [1.59329604E12, 9112.319601640702], [1.59329562E12, 8110.650510776043], [1.59329592E12, 8494.960902812481], [1.59329598E12, 8689.400018692017], [1.59329628E12, 839.0], [1.59329586E12, 8104.837506115437], [1.59329616E12, 9141.120003700256], [1.59329622E12, 5545.51680267334], [1.59329556E12, 3874.3077018332483]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5932961E12, 8626.07798923254], [1.5932958E12, 8884.742971104384], [1.59329568E12, 7090.91749458015], [1.59329574E12, 8161.602476075292], [1.59329604E12, 9105.437997949124], [1.59329562E12, 8065.452486529946], [1.59329592E12, 8483.164496484398], [1.59329598E12, 8610.99997663498], [1.59329628E12, 839.0], [1.59329586E12, 8079.187492355704], [1.59329616E12, 9125.59999537468], [1.59329622E12, 5534.303996658326], [1.59329556E12, 3871.31299970746]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5932961E12, 7812.0], [1.5932958E12, 7299.0], [1.59329568E12, 5920.0], [1.59329574E12, 7715.0], [1.59329604E12, 7648.0], [1.59329562E12, 6633.0], [1.59329592E12, 5559.0], [1.59329598E12, 7629.0], [1.59329628E12, 839.0], [1.59329586E12, 7956.0], [1.59329616E12, 7504.0], [1.59329622E12, 3174.0], [1.59329556E12, 2931.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5932961E12, 15112.0], [1.5932958E12, 14204.0], [1.59329568E12, 13106.5], [1.59329574E12, 13244.0], [1.59329604E12, 15220.5], [1.59329562E12, 12838.0], [1.59329592E12, 15869.0], [1.59329598E12, 14711.0], [1.59329628E12, 5896.0], [1.59329586E12, 13373.0], [1.59329616E12, 14800.0], [1.59329622E12, 14790.0], [1.59329556E12, 12349.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329628E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11409.0, "minX": 1.0, "maxY": 20533.0, "series": [{"data": [[8.0, 13846.0], [2.0, 14125.0], [9.0, 14181.0], [10.0, 14075.5], [11.0, 14120.0], [3.0, 14370.5], [12.0, 14399.0], [13.0, 14372.0], [14.0, 14046.5], [15.0, 13245.5], [1.0, 14911.0], [4.0, 14086.0], [16.0, 14590.5], [17.0, 11409.0], [19.0, 12832.0], [5.0, 13861.5], [6.0, 14127.0], [7.0, 13701.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 15709.5], [4.0, 20533.0], [19.0, 18311.0], [10.0, 13961.5], [12.0, 17285.0], [6.0, 18593.0], [14.0, 13325.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11409.0, "minX": 1.0, "maxY": 20533.0, "series": [{"data": [[8.0, 13846.0], [2.0, 14125.0], [9.0, 14181.0], [10.0, 14075.5], [11.0, 14120.0], [3.0, 14370.5], [12.0, 14399.0], [13.0, 14372.0], [14.0, 14046.5], [15.0, 13245.5], [1.0, 14911.0], [4.0, 14086.0], [16.0, 14590.5], [17.0, 11409.0], [19.0, 12832.0], [5.0, 13861.5], [6.0, 14127.0], [7.0, 13701.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 15708.5], [4.0, 20533.0], [19.0, 18311.0], [10.0, 13961.5], [12.0, 17285.0], [6.0, 18593.0], [14.0, 13325.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.59329556E12, "maxY": 8.466666666666667, "series": [{"data": [[1.5932961E12, 6.416666666666667], [1.5932958E12, 7.083333333333333], [1.59329568E12, 7.2], [1.59329574E12, 7.5], [1.59329604E12, 6.5], [1.59329562E12, 7.733333333333333], [1.59329592E12, 6.366666666666666], [1.59329598E12, 6.65], [1.59329628E12, 0.36666666666666664], [1.59329586E12, 7.033333333333333], [1.59329616E12, 6.65], [1.59329622E12, 5.366666666666666], [1.59329556E12, 8.466666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329628E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.59329556E12, "maxY": 7.733333333333333, "series": [{"data": [[1.5932961E12, 6.416666666666667], [1.5932958E12, 7.083333333333333], [1.59329568E12, 7.2], [1.59329574E12, 7.5], [1.59329604E12, 6.5], [1.59329562E12, 7.733333333333333], [1.59329592E12, 6.366666666666666], [1.59329598E12, 6.65], [1.59329628E12, 1.0166666666666666], [1.59329586E12, 6.233333333333333], [1.59329616E12, 6.65], [1.59329622E12, 6.383333333333334], [1.59329556E12, 6.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59329586E12, 0.8]], "isOverall": false, "label": "401", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329628E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.59329556E12, "maxY": 7.733333333333333, "series": [{"data": [[1.59329586E12, 0.8]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-failure", "isController": false}, {"data": [[1.5932961E12, 6.416666666666667], [1.5932958E12, 7.083333333333333], [1.59329568E12, 7.2], [1.59329574E12, 7.5], [1.59329604E12, 6.5], [1.59329562E12, 7.733333333333333], [1.59329592E12, 6.366666666666666], [1.59329598E12, 6.65], [1.59329628E12, 1.0166666666666666], [1.59329586E12, 6.233333333333333], [1.59329616E12, 6.65], [1.59329622E12, 6.383333333333334], [1.59329556E12, 6.8]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329628E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.59329556E12, "maxY": 7.733333333333333, "series": [{"data": [[1.5932961E12, 6.416666666666667], [1.5932958E12, 7.083333333333333], [1.59329568E12, 7.2], [1.59329574E12, 7.5], [1.59329604E12, 6.5], [1.59329562E12, 7.733333333333333], [1.59329592E12, 6.366666666666666], [1.59329598E12, 6.65], [1.59329628E12, 1.0166666666666666], [1.59329586E12, 6.233333333333333], [1.59329616E12, 6.65], [1.59329622E12, 6.383333333333334], [1.59329556E12, 6.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59329586E12, 0.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329628E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

