/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1590.0, "minX": 0.0, "maxY": 35788.0, "series": [{"data": [[0.0, 1590.0], [0.1, 2733.0], [0.2, 8455.0], [0.3, 8897.0], [0.4, 12661.0], [0.5, 13289.0], [0.6, 13750.0], [0.7, 13835.0], [0.8, 14012.0], [0.9, 14341.0], [1.0, 14374.0], [1.1, 14593.0], [1.2, 14891.0], [1.3, 14946.0], [1.4, 15169.0], [1.5, 15287.0], [1.6, 15555.0], [1.7, 16060.0], [1.8, 16276.0], [1.9, 16354.0], [2.0, 16712.0], [2.1, 16821.0], [2.2, 16920.0], [2.3, 16977.0], [2.4, 17151.0], [2.5, 17196.0], [2.6, 17249.0], [2.7, 17404.0], [2.8, 17495.0], [2.9, 17666.0], [3.0, 17710.0], [3.1, 17829.0], [3.2, 17861.0], [3.3, 17888.0], [3.4, 17937.0], [3.5, 18008.0], [3.6, 18060.0], [3.7, 18081.0], [3.8, 18102.0], [3.9, 18149.0], [4.0, 18197.0], [4.1, 18255.0], [4.2, 18340.0], [4.3, 18422.0], [4.4, 18457.0], [4.5, 18506.0], [4.6, 18529.0], [4.7, 18628.0], [4.8, 18657.0], [4.9, 18705.0], [5.0, 18765.0], [5.1, 18805.0], [5.2, 18839.0], [5.3, 18867.0], [5.4, 18878.0], [5.5, 18897.0], [5.6, 18908.0], [5.7, 18973.0], [5.8, 18997.0], [5.9, 19012.0], [6.0, 19043.0], [6.1, 19086.0], [6.2, 19094.0], [6.3, 19127.0], [6.4, 19140.0], [6.5, 19179.0], [6.6, 19186.0], [6.7, 19220.0], [6.8, 19240.0], [6.9, 19260.0], [7.0, 19278.0], [7.1, 19299.0], [7.2, 19307.0], [7.3, 19316.0], [7.4, 19320.0], [7.5, 19337.0], [7.6, 19358.0], [7.7, 19365.0], [7.8, 19372.0], [7.9, 19387.0], [8.0, 19418.0], [8.1, 19469.0], [8.2, 19474.0], [8.3, 19484.0], [8.4, 19491.0], [8.5, 19516.0], [8.6, 19549.0], [8.7, 19565.0], [8.8, 19593.0], [8.9, 19606.0], [9.0, 19626.0], [9.1, 19653.0], [9.2, 19668.0], [9.3, 19697.0], [9.4, 19698.0], [9.5, 19715.0], [9.6, 19718.0], [9.7, 19731.0], [9.8, 19756.0], [9.9, 19761.0], [10.0, 19766.0], [10.1, 19782.0], [10.2, 19795.0], [10.3, 19799.0], [10.4, 19813.0], [10.5, 19820.0], [10.6, 19829.0], [10.7, 19838.0], [10.8, 19853.0], [10.9, 19860.0], [11.0, 19871.0], [11.1, 19878.0], [11.2, 19885.0], [11.3, 19910.0], [11.4, 19915.0], [11.5, 19921.0], [11.6, 19932.0], [11.7, 19948.0], [11.8, 19960.0], [11.9, 19964.0], [12.0, 19966.0], [12.1, 19978.0], [12.2, 19988.0], [12.3, 19993.0], [12.4, 20007.0], [12.5, 20013.0], [12.6, 20030.0], [12.7, 20056.0], [12.8, 20068.0], [12.9, 20077.0], [13.0, 20082.0], [13.1, 20089.0], [13.2, 20102.0], [13.3, 20122.0], [13.4, 20141.0], [13.5, 20153.0], [13.6, 20167.0], [13.7, 20174.0], [13.8, 20176.0], [13.9, 20186.0], [14.0, 20198.0], [14.1, 20206.0], [14.2, 20210.0], [14.3, 20226.0], [14.4, 20234.0], [14.5, 20241.0], [14.6, 20248.0], [14.7, 20252.0], [14.8, 20277.0], [14.9, 20291.0], [15.0, 20303.0], [15.1, 20315.0], [15.2, 20319.0], [15.3, 20339.0], [15.4, 20356.0], [15.5, 20376.0], [15.6, 20400.0], [15.7, 20403.0], [15.8, 20414.0], [15.9, 20417.0], [16.0, 20425.0], [16.1, 20434.0], [16.2, 20440.0], [16.3, 20445.0], [16.4, 20451.0], [16.5, 20455.0], [16.6, 20468.0], [16.7, 20475.0], [16.8, 20485.0], [16.9, 20489.0], [17.0, 20494.0], [17.1, 20499.0], [17.2, 20510.0], [17.3, 20517.0], [17.4, 20530.0], [17.5, 20536.0], [17.6, 20542.0], [17.7, 20561.0], [17.8, 20567.0], [17.9, 20579.0], [18.0, 20592.0], [18.1, 20603.0], [18.2, 20616.0], [18.3, 20623.0], [18.4, 20641.0], [18.5, 20649.0], [18.6, 20659.0], [18.7, 20669.0], [18.8, 20672.0], [18.9, 20679.0], [19.0, 20686.0], [19.1, 20696.0], [19.2, 20701.0], [19.3, 20713.0], [19.4, 20729.0], [19.5, 20735.0], [19.6, 20749.0], [19.7, 20755.0], [19.8, 20788.0], [19.9, 20804.0], [20.0, 20809.0], [20.1, 20819.0], [20.2, 20826.0], [20.3, 20843.0], [20.4, 20855.0], [20.5, 20865.0], [20.6, 20870.0], [20.7, 20880.0], [20.8, 20894.0], [20.9, 20897.0], [21.0, 20906.0], [21.1, 20918.0], [21.2, 20923.0], [21.3, 20939.0], [21.4, 20942.0], [21.5, 20944.0], [21.6, 20970.0], [21.7, 20983.0], [21.8, 20990.0], [21.9, 20999.0], [22.0, 21006.0], [22.1, 21022.0], [22.2, 21033.0], [22.3, 21045.0], [22.4, 21054.0], [22.5, 21064.0], [22.6, 21067.0], [22.7, 21088.0], [22.8, 21095.0], [22.9, 21109.0], [23.0, 21122.0], [23.1, 21126.0], [23.2, 21138.0], [23.3, 21150.0], [23.4, 21153.0], [23.5, 21156.0], [23.6, 21159.0], [23.7, 21169.0], [23.8, 21173.0], [23.9, 21181.0], [24.0, 21185.0], [24.1, 21188.0], [24.2, 21196.0], [24.3, 21201.0], [24.4, 21207.0], [24.5, 21217.0], [24.6, 21218.0], [24.7, 21229.0], [24.8, 21233.0], [24.9, 21237.0], [25.0, 21248.0], [25.1, 21258.0], [25.2, 21266.0], [25.3, 21272.0], [25.4, 21282.0], [25.5, 21289.0], [25.6, 21300.0], [25.7, 21307.0], [25.8, 21308.0], [25.9, 21313.0], [26.0, 21326.0], [26.1, 21340.0], [26.2, 21342.0], [26.3, 21356.0], [26.4, 21366.0], [26.5, 21378.0], [26.6, 21385.0], [26.7, 21396.0], [26.8, 21409.0], [26.9, 21429.0], [27.0, 21437.0], [27.1, 21440.0], [27.2, 21443.0], [27.3, 21455.0], [27.4, 21462.0], [27.5, 21470.0], [27.6, 21485.0], [27.7, 21487.0], [27.8, 21489.0], [27.9, 21497.0], [28.0, 21506.0], [28.1, 21512.0], [28.2, 21520.0], [28.3, 21528.0], [28.4, 21537.0], [28.5, 21539.0], [28.6, 21548.0], [28.7, 21551.0], [28.8, 21556.0], [28.9, 21577.0], [29.0, 21585.0], [29.1, 21590.0], [29.2, 21602.0], [29.3, 21612.0], [29.4, 21634.0], [29.5, 21640.0], [29.6, 21646.0], [29.7, 21663.0], [29.8, 21669.0], [29.9, 21680.0], [30.0, 21683.0], [30.1, 21697.0], [30.2, 21701.0], [30.3, 21705.0], [30.4, 21711.0], [30.5, 21716.0], [30.6, 21720.0], [30.7, 21731.0], [30.8, 21737.0], [30.9, 21755.0], [31.0, 21763.0], [31.1, 21771.0], [31.2, 21773.0], [31.3, 21779.0], [31.4, 21795.0], [31.5, 21799.0], [31.6, 21816.0], [31.7, 21827.0], [31.8, 21832.0], [31.9, 21840.0], [32.0, 21847.0], [32.1, 21857.0], [32.2, 21865.0], [32.3, 21875.0], [32.4, 21878.0], [32.5, 21884.0], [32.6, 21892.0], [32.7, 21904.0], [32.8, 21910.0], [32.9, 21917.0], [33.0, 21924.0], [33.1, 21929.0], [33.2, 21936.0], [33.3, 21955.0], [33.4, 21958.0], [33.5, 21965.0], [33.6, 21967.0], [33.7, 21969.0], [33.8, 21975.0], [33.9, 21985.0], [34.0, 21990.0], [34.1, 21992.0], [34.2, 21994.0], [34.3, 21999.0], [34.4, 22008.0], [34.5, 22014.0], [34.6, 22017.0], [34.7, 22025.0], [34.8, 22031.0], [34.9, 22041.0], [35.0, 22045.0], [35.1, 22051.0], [35.2, 22061.0], [35.3, 22071.0], [35.4, 22073.0], [35.5, 22078.0], [35.6, 22087.0], [35.7, 22095.0], [35.8, 22103.0], [35.9, 22114.0], [36.0, 22115.0], [36.1, 22119.0], [36.2, 22123.0], [36.3, 22126.0], [36.4, 22129.0], [36.5, 22138.0], [36.6, 22147.0], [36.7, 22150.0], [36.8, 22156.0], [36.9, 22168.0], [37.0, 22179.0], [37.1, 22181.0], [37.2, 22189.0], [37.3, 22194.0], [37.4, 22198.0], [37.5, 22205.0], [37.6, 22212.0], [37.7, 22221.0], [37.8, 22225.0], [37.9, 22230.0], [38.0, 22235.0], [38.1, 22240.0], [38.2, 22245.0], [38.3, 22253.0], [38.4, 22259.0], [38.5, 22262.0], [38.6, 22266.0], [38.7, 22278.0], [38.8, 22282.0], [38.9, 22287.0], [39.0, 22289.0], [39.1, 22308.0], [39.2, 22312.0], [39.3, 22316.0], [39.4, 22324.0], [39.5, 22327.0], [39.6, 22338.0], [39.7, 22350.0], [39.8, 22353.0], [39.9, 22368.0], [40.0, 22382.0], [40.1, 22386.0], [40.2, 22390.0], [40.3, 22393.0], [40.4, 22397.0], [40.5, 22402.0], [40.6, 22408.0], [40.7, 22417.0], [40.8, 22425.0], [40.9, 22431.0], [41.0, 22445.0], [41.1, 22454.0], [41.2, 22456.0], [41.3, 22463.0], [41.4, 22466.0], [41.5, 22470.0], [41.6, 22478.0], [41.7, 22482.0], [41.8, 22490.0], [41.9, 22496.0], [42.0, 22507.0], [42.1, 22514.0], [42.2, 22521.0], [42.3, 22524.0], [42.4, 22525.0], [42.5, 22535.0], [42.6, 22541.0], [42.7, 22544.0], [42.8, 22553.0], [42.9, 22562.0], [43.0, 22569.0], [43.1, 22573.0], [43.2, 22581.0], [43.3, 22589.0], [43.4, 22597.0], [43.5, 22603.0], [43.6, 22611.0], [43.7, 22616.0], [43.8, 22622.0], [43.9, 22626.0], [44.0, 22636.0], [44.1, 22645.0], [44.2, 22657.0], [44.3, 22662.0], [44.4, 22671.0], [44.5, 22679.0], [44.6, 22693.0], [44.7, 22698.0], [44.8, 22700.0], [44.9, 22711.0], [45.0, 22725.0], [45.1, 22732.0], [45.2, 22737.0], [45.3, 22741.0], [45.4, 22763.0], [45.5, 22766.0], [45.6, 22771.0], [45.7, 22774.0], [45.8, 22789.0], [45.9, 22799.0], [46.0, 22808.0], [46.1, 22820.0], [46.2, 22824.0], [46.3, 22832.0], [46.4, 22835.0], [46.5, 22838.0], [46.6, 22841.0], [46.7, 22849.0], [46.8, 22852.0], [46.9, 22859.0], [47.0, 22863.0], [47.1, 22867.0], [47.2, 22874.0], [47.3, 22888.0], [47.4, 22895.0], [47.5, 22901.0], [47.6, 22907.0], [47.7, 22917.0], [47.8, 22921.0], [47.9, 22929.0], [48.0, 22932.0], [48.1, 22936.0], [48.2, 22945.0], [48.3, 22951.0], [48.4, 22959.0], [48.5, 22965.0], [48.6, 22968.0], [48.7, 22969.0], [48.8, 22976.0], [48.9, 22978.0], [49.0, 22983.0], [49.1, 22989.0], [49.2, 22994.0], [49.3, 22997.0], [49.4, 23011.0], [49.5, 23020.0], [49.6, 23034.0], [49.7, 23043.0], [49.8, 23058.0], [49.9, 23068.0], [50.0, 23083.0], [50.1, 23090.0], [50.2, 23096.0], [50.3, 23107.0], [50.4, 23115.0], [50.5, 23119.0], [50.6, 23130.0], [50.7, 23145.0], [50.8, 23152.0], [50.9, 23165.0], [51.0, 23167.0], [51.1, 23177.0], [51.2, 23187.0], [51.3, 23194.0], [51.4, 23197.0], [51.5, 23201.0], [51.6, 23211.0], [51.7, 23212.0], [51.8, 23215.0], [51.9, 23220.0], [52.0, 23226.0], [52.1, 23230.0], [52.2, 23232.0], [52.3, 23239.0], [52.4, 23254.0], [52.5, 23260.0], [52.6, 23265.0], [52.7, 23278.0], [52.8, 23291.0], [52.9, 23293.0], [53.0, 23297.0], [53.1, 23308.0], [53.2, 23311.0], [53.3, 23317.0], [53.4, 23324.0], [53.5, 23328.0], [53.6, 23342.0], [53.7, 23350.0], [53.8, 23355.0], [53.9, 23364.0], [54.0, 23368.0], [54.1, 23377.0], [54.2, 23380.0], [54.3, 23384.0], [54.4, 23387.0], [54.5, 23396.0], [54.6, 23405.0], [54.7, 23410.0], [54.8, 23414.0], [54.9, 23425.0], [55.0, 23434.0], [55.1, 23440.0], [55.2, 23448.0], [55.3, 23452.0], [55.4, 23457.0], [55.5, 23464.0], [55.6, 23469.0], [55.7, 23473.0], [55.8, 23476.0], [55.9, 23490.0], [56.0, 23498.0], [56.1, 23503.0], [56.2, 23505.0], [56.3, 23522.0], [56.4, 23531.0], [56.5, 23539.0], [56.6, 23544.0], [56.7, 23556.0], [56.8, 23564.0], [56.9, 23571.0], [57.0, 23573.0], [57.1, 23574.0], [57.2, 23582.0], [57.3, 23591.0], [57.4, 23594.0], [57.5, 23600.0], [57.6, 23606.0], [57.7, 23615.0], [57.8, 23623.0], [57.9, 23628.0], [58.0, 23631.0], [58.1, 23633.0], [58.2, 23637.0], [58.3, 23641.0], [58.4, 23653.0], [58.5, 23659.0], [58.6, 23676.0], [58.7, 23688.0], [58.8, 23693.0], [58.9, 23700.0], [59.0, 23705.0], [59.1, 23707.0], [59.2, 23713.0], [59.3, 23730.0], [59.4, 23736.0], [59.5, 23743.0], [59.6, 23755.0], [59.7, 23766.0], [59.8, 23770.0], [59.9, 23774.0], [60.0, 23782.0], [60.1, 23796.0], [60.2, 23798.0], [60.3, 23808.0], [60.4, 23809.0], [60.5, 23812.0], [60.6, 23827.0], [60.7, 23831.0], [60.8, 23835.0], [60.9, 23840.0], [61.0, 23844.0], [61.1, 23847.0], [61.2, 23853.0], [61.3, 23859.0], [61.4, 23864.0], [61.5, 23871.0], [61.6, 23878.0], [61.7, 23889.0], [61.8, 23896.0], [61.9, 23903.0], [62.0, 23910.0], [62.1, 23912.0], [62.2, 23917.0], [62.3, 23934.0], [62.4, 23941.0], [62.5, 23953.0], [62.6, 23960.0], [62.7, 23966.0], [62.8, 23972.0], [62.9, 23975.0], [63.0, 23980.0], [63.1, 23983.0], [63.2, 23992.0], [63.3, 24006.0], [63.4, 24017.0], [63.5, 24022.0], [63.6, 24046.0], [63.7, 24053.0], [63.8, 24056.0], [63.9, 24062.0], [64.0, 24066.0], [64.1, 24070.0], [64.2, 24073.0], [64.3, 24081.0], [64.4, 24087.0], [64.5, 24089.0], [64.6, 24096.0], [64.7, 24099.0], [64.8, 24103.0], [64.9, 24110.0], [65.0, 24116.0], [65.1, 24117.0], [65.2, 24123.0], [65.3, 24126.0], [65.4, 24133.0], [65.5, 24138.0], [65.6, 24148.0], [65.7, 24156.0], [65.8, 24159.0], [65.9, 24168.0], [66.0, 24172.0], [66.1, 24181.0], [66.2, 24192.0], [66.3, 24205.0], [66.4, 24223.0], [66.5, 24229.0], [66.6, 24244.0], [66.7, 24246.0], [66.8, 24261.0], [66.9, 24275.0], [67.0, 24282.0], [67.1, 24287.0], [67.2, 24295.0], [67.3, 24308.0], [67.4, 24309.0], [67.5, 24317.0], [67.6, 24329.0], [67.7, 24339.0], [67.8, 24351.0], [67.9, 24360.0], [68.0, 24368.0], [68.1, 24374.0], [68.2, 24384.0], [68.3, 24388.0], [68.4, 24397.0], [68.5, 24402.0], [68.6, 24408.0], [68.7, 24427.0], [68.8, 24434.0], [68.9, 24440.0], [69.0, 24443.0], [69.1, 24454.0], [69.2, 24462.0], [69.3, 24471.0], [69.4, 24476.0], [69.5, 24477.0], [69.6, 24487.0], [69.7, 24490.0], [69.8, 24494.0], [69.9, 24506.0], [70.0, 24508.0], [70.1, 24513.0], [70.2, 24520.0], [70.3, 24526.0], [70.4, 24544.0], [70.5, 24552.0], [70.6, 24573.0], [70.7, 24578.0], [70.8, 24586.0], [70.9, 24595.0], [71.0, 24608.0], [71.1, 24617.0], [71.2, 24627.0], [71.3, 24635.0], [71.4, 24639.0], [71.5, 24645.0], [71.6, 24664.0], [71.7, 24673.0], [71.8, 24675.0], [71.9, 24689.0], [72.0, 24690.0], [72.1, 24693.0], [72.2, 24698.0], [72.3, 24702.0], [72.4, 24715.0], [72.5, 24739.0], [72.6, 24748.0], [72.7, 24763.0], [72.8, 24768.0], [72.9, 24772.0], [73.0, 24783.0], [73.1, 24789.0], [73.2, 24808.0], [73.3, 24814.0], [73.4, 24818.0], [73.5, 24824.0], [73.6, 24841.0], [73.7, 24849.0], [73.8, 24856.0], [73.9, 24863.0], [74.0, 24879.0], [74.1, 24890.0], [74.2, 24902.0], [74.3, 24919.0], [74.4, 24936.0], [74.5, 24951.0], [74.6, 24958.0], [74.7, 24968.0], [74.8, 24976.0], [74.9, 24992.0], [75.0, 25001.0], [75.1, 25008.0], [75.2, 25013.0], [75.3, 25016.0], [75.4, 25030.0], [75.5, 25035.0], [75.6, 25039.0], [75.7, 25051.0], [75.8, 25060.0], [75.9, 25072.0], [76.0, 25087.0], [76.1, 25096.0], [76.2, 25110.0], [76.3, 25115.0], [76.4, 25119.0], [76.5, 25133.0], [76.6, 25147.0], [76.7, 25174.0], [76.8, 25181.0], [76.9, 25194.0], [77.0, 25199.0], [77.1, 25204.0], [77.2, 25216.0], [77.3, 25224.0], [77.4, 25236.0], [77.5, 25240.0], [77.6, 25259.0], [77.7, 25262.0], [77.8, 25269.0], [77.9, 25289.0], [78.0, 25295.0], [78.1, 25300.0], [78.2, 25312.0], [78.3, 25320.0], [78.4, 25330.0], [78.5, 25346.0], [78.6, 25364.0], [78.7, 25370.0], [78.8, 25388.0], [78.9, 25400.0], [79.0, 25412.0], [79.1, 25431.0], [79.2, 25441.0], [79.3, 25456.0], [79.4, 25460.0], [79.5, 25467.0], [79.6, 25470.0], [79.7, 25475.0], [79.8, 25477.0], [79.9, 25489.0], [80.0, 25501.0], [80.1, 25516.0], [80.2, 25519.0], [80.3, 25554.0], [80.4, 25570.0], [80.5, 25580.0], [80.6, 25590.0], [80.7, 25613.0], [80.8, 25625.0], [80.9, 25635.0], [81.0, 25640.0], [81.1, 25654.0], [81.2, 25665.0], [81.3, 25673.0], [81.4, 25684.0], [81.5, 25694.0], [81.6, 25700.0], [81.7, 25710.0], [81.8, 25728.0], [81.9, 25741.0], [82.0, 25746.0], [82.1, 25770.0], [82.2, 25782.0], [82.3, 25786.0], [82.4, 25790.0], [82.5, 25808.0], [82.6, 25826.0], [82.7, 25834.0], [82.8, 25840.0], [82.9, 25846.0], [83.0, 25859.0], [83.1, 25879.0], [83.2, 25887.0], [83.3, 25902.0], [83.4, 25933.0], [83.5, 25947.0], [83.6, 25964.0], [83.7, 25978.0], [83.8, 25986.0], [83.9, 25998.0], [84.0, 26008.0], [84.1, 26017.0], [84.2, 26029.0], [84.3, 26054.0], [84.4, 26062.0], [84.5, 26081.0], [84.6, 26135.0], [84.7, 26152.0], [84.8, 26176.0], [84.9, 26188.0], [85.0, 26204.0], [85.1, 26216.0], [85.2, 26244.0], [85.3, 26254.0], [85.4, 26262.0], [85.5, 26273.0], [85.6, 26279.0], [85.7, 26292.0], [85.8, 26311.0], [85.9, 26332.0], [86.0, 26344.0], [86.1, 26358.0], [86.2, 26370.0], [86.3, 26377.0], [86.4, 26379.0], [86.5, 26388.0], [86.6, 26405.0], [86.7, 26428.0], [86.8, 26433.0], [86.9, 26436.0], [87.0, 26461.0], [87.1, 26470.0], [87.2, 26485.0], [87.3, 26493.0], [87.4, 26515.0], [87.5, 26545.0], [87.6, 26572.0], [87.7, 26595.0], [87.8, 26621.0], [87.9, 26636.0], [88.0, 26646.0], [88.1, 26656.0], [88.2, 26657.0], [88.3, 26680.0], [88.4, 26685.0], [88.5, 26701.0], [88.6, 26718.0], [88.7, 26722.0], [88.8, 26756.0], [88.9, 26763.0], [89.0, 26776.0], [89.1, 26800.0], [89.2, 26811.0], [89.3, 26831.0], [89.4, 26857.0], [89.5, 26864.0], [89.6, 26898.0], [89.7, 26912.0], [89.8, 26915.0], [89.9, 26933.0], [90.0, 26943.0], [90.1, 26960.0], [90.2, 26980.0], [90.3, 26983.0], [90.4, 27001.0], [90.5, 27016.0], [90.6, 27031.0], [90.7, 27047.0], [90.8, 27056.0], [90.9, 27097.0], [91.0, 27128.0], [91.1, 27144.0], [91.2, 27164.0], [91.3, 27177.0], [91.4, 27196.0], [91.5, 27238.0], [91.6, 27262.0], [91.7, 27286.0], [91.8, 27301.0], [91.9, 27331.0], [92.0, 27367.0], [92.1, 27375.0], [92.2, 27391.0], [92.3, 27400.0], [92.4, 27417.0], [92.5, 27488.0], [92.6, 27505.0], [92.7, 27519.0], [92.8, 27579.0], [92.9, 27626.0], [93.0, 27659.0], [93.1, 27707.0], [93.2, 27729.0], [93.3, 27751.0], [93.4, 27769.0], [93.5, 27822.0], [93.6, 27876.0], [93.7, 27900.0], [93.8, 27915.0], [93.9, 27953.0], [94.0, 27973.0], [94.1, 27996.0], [94.2, 28011.0], [94.3, 28052.0], [94.4, 28089.0], [94.5, 28118.0], [94.6, 28164.0], [94.7, 28187.0], [94.8, 28192.0], [94.9, 28223.0], [95.0, 28237.0], [95.1, 28282.0], [95.2, 28313.0], [95.3, 28331.0], [95.4, 28408.0], [95.5, 28452.0], [95.6, 28491.0], [95.7, 28509.0], [95.8, 28564.0], [95.9, 28599.0], [96.0, 28729.0], [96.1, 28754.0], [96.2, 28800.0], [96.3, 28824.0], [96.4, 28901.0], [96.5, 28947.0], [96.6, 28982.0], [96.7, 28996.0], [96.8, 29012.0], [96.9, 29051.0], [97.0, 29078.0], [97.1, 29114.0], [97.2, 29139.0], [97.3, 29219.0], [97.4, 29337.0], [97.5, 29367.0], [97.6, 29382.0], [97.7, 29444.0], [97.8, 29521.0], [97.9, 29560.0], [98.0, 29660.0], [98.1, 29779.0], [98.2, 29833.0], [98.3, 29865.0], [98.4, 29996.0], [98.5, 30179.0], [98.6, 30208.0], [98.7, 30272.0], [98.8, 30426.0], [98.9, 30514.0], [99.0, 30669.0], [99.1, 30937.0], [99.2, 31047.0], [99.3, 31136.0], [99.4, 31260.0], [99.5, 31391.0], [99.6, 31854.0], [99.7, 32159.0], [99.8, 32231.0], [99.9, 34100.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1500.0, "maxY": 56.0, "series": [{"data": [[33500.0, 1.0], [34100.0, 1.0], [34300.0, 1.0], [35700.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [2500.0, 1.0], [2700.0, 1.0], [4000.0, 1.0], [5800.0, 1.0], [8400.0, 2.0], [8500.0, 1.0], [8800.0, 1.0], [11100.0, 1.0], [11500.0, 1.0], [12600.0, 1.0], [13100.0, 1.0], [13200.0, 2.0], [13700.0, 4.0], [13800.0, 4.0], [14200.0, 1.0], [14300.0, 4.0], [14100.0, 1.0], [14000.0, 1.0], [14500.0, 2.0], [14800.0, 2.0], [14400.0, 1.0], [14900.0, 3.0], [15100.0, 2.0], [15200.0, 3.0], [15000.0, 1.0], [15500.0, 3.0], [15700.0, 1.0], [15900.0, 1.0], [16000.0, 1.0], [16300.0, 3.0], [16100.0, 1.0], [16200.0, 2.0], [17300.0, 2.0], [16700.0, 2.0], [16800.0, 3.0], [17000.0, 2.0], [17100.0, 4.0], [17200.0, 4.0], [17400.0, 4.0], [16900.0, 5.0], [16600.0, 2.0], [18200.0, 4.0], [17700.0, 3.0], [17800.0, 9.0], [18000.0, 9.0], [18100.0, 7.0], [17900.0, 4.0], [18400.0, 6.0], [18300.0, 4.0], [17600.0, 3.0], [17500.0, 1.0], [19200.0, 15.0], [19300.0, 25.0], [18900.0, 9.0], [18800.0, 13.0], [19000.0, 12.0], [19100.0, 12.0], [18600.0, 7.0], [19400.0, 14.0], [18500.0, 5.0], [18700.0, 6.0], [19700.0, 28.0], [19900.0, 33.0], [20400.0, 46.0], [20000.0, 25.0], [20100.0, 25.0], [20200.0, 28.0], [20300.0, 19.0], [19800.0, 27.0], [19500.0, 13.0], [19600.0, 17.0], [21400.0, 36.0], [20500.0, 28.0], [20800.0, 34.0], [20700.0, 19.0], [21200.0, 39.0], [21300.0, 35.0], [20600.0, 33.0], [20900.0, 29.0], [21000.0, 28.0], [21500.0, 37.0], [21100.0, 43.0], [22300.0, 43.0], [21800.0, 34.0], [22100.0, 51.0], [22400.0, 45.0], [21900.0, 50.0], [21700.0, 40.0], [22500.0, 45.0], [22000.0, 43.0], [21600.0, 30.0], [22200.0, 47.0], [23000.0, 29.0], [22600.0, 40.0], [22900.0, 56.0], [23200.0, 46.0], [23400.0, 45.0], [22800.0, 46.0], [22700.0, 34.0], [23300.0, 45.0], [23500.0, 44.0], [23100.0, 37.0], [23800.0, 48.0], [23900.0, 41.0], [24100.0, 46.0], [24200.0, 30.0], [23600.0, 42.0], [23700.0, 41.0], [24400.0, 42.0], [24500.0, 34.0], [24300.0, 36.0], [24000.0, 45.0], [24800.0, 31.0], [24600.0, 38.0], [25000.0, 35.0], [24900.0, 23.0], [25200.0, 31.0], [25100.0, 27.0], [24700.0, 27.0], [25400.0, 33.0], [25300.0, 25.0], [25500.0, 20.0], [25700.0, 25.0], [26500.0, 13.0], [26300.0, 24.0], [26000.0, 18.0], [26600.0, 21.0], [26200.0, 23.0], [26100.0, 14.0], [25600.0, 28.0], [25900.0, 20.0], [25800.0, 25.0], [26400.0, 23.0], [27400.0, 9.0], [27300.0, 15.0], [27100.0, 15.0], [27500.0, 8.0], [27600.0, 6.0], [26700.0, 19.0], [27000.0, 17.0], [27200.0, 10.0], [26900.0, 22.0], [26800.0, 17.0], [27900.0, 13.0], [27700.0, 12.0], [28000.0, 11.0], [28100.0, 10.0], [28300.0, 6.0], [28400.0, 8.0], [28500.0, 8.0], [28200.0, 11.0], [28600.0, 2.0], [27800.0, 7.0], [28900.0, 11.0], [28700.0, 6.0], [29500.0, 5.0], [29100.0, 8.0], [29000.0, 8.0], [29600.0, 3.0], [29300.0, 7.0], [29200.0, 3.0], [28800.0, 6.0], [29400.0, 5.0], [29900.0, 2.0], [30400.0, 3.0], [30200.0, 4.0], [29800.0, 5.0], [30100.0, 5.0], [29700.0, 4.0], [30300.0, 2.0], [30600.0, 3.0], [30500.0, 1.0], [30700.0, 1.0], [31200.0, 4.0], [30900.0, 3.0], [31100.0, 3.0], [31000.0, 1.0], [31400.0, 2.0], [31300.0, 2.0], [30800.0, 1.0], [32000.0, 2.0], [32100.0, 2.0], [31800.0, 1.0], [32300.0, 1.0], [32200.0, 2.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 35700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 77.09665427509297, "minX": 1.59330114E12, "maxY": 100.0, "series": [{"data": [[1.5933018E12, 77.09665427509297], [1.59330132E12, 100.0], [1.5933015E12, 100.0], [1.59330144E12, 100.0], [1.59330114E12, 100.0], [1.59330162E12, 100.0], [1.59330156E12, 100.0], [1.59330126E12, 100.0], [1.59330174E12, 100.0], [1.5933012E12, 100.0], [1.59330168E12, 100.0], [1.59330138E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933018E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1590.0, "minX": 2.0, "maxY": 32207.0, "series": [{"data": [[2.0, 2167.5], [3.0, 1590.0], [4.0, 4020.0], [5.0, 2594.0], [6.0, 8461.0], [7.0, 5825.0], [8.0, 16633.0], [10.0, 16713.0], [11.0, 8567.0], [12.0, 14012.0], [13.0, 11574.0], [14.0, 8455.0], [15.0, 8897.0], [16.0, 15263.0], [17.0, 14161.0], [18.0, 11170.0], [19.0, 16276.0], [20.0, 13743.0], [21.0, 16606.0], [22.0, 15169.0], [23.0, 17211.0], [24.0, 15027.0], [25.0, 21078.333333333332], [26.0, 18008.0], [27.0, 21093.0], [28.0, 16920.0], [29.0, 13289.0], [30.0, 19760.0], [31.0, 20175.0], [33.0, 19738.333333333332], [32.0, 19578.0], [35.0, 19316.0], [34.0, 14923.0], [37.0, 18877.0], [36.0, 16201.0], [39.0, 23500.0], [38.0, 23956.0], [41.0, 25970.0], [40.0, 26195.0], [43.0, 19910.0], [42.0, 21286.0], [45.0, 26802.0], [44.0, 21307.0], [47.0, 23214.0], [46.0, 23426.0], [49.0, 26526.0], [48.0, 29136.0], [51.0, 21533.0], [50.0, 25060.0], [53.0, 14593.0], [52.0, 20713.0], [55.0, 24234.0], [54.0, 32207.0], [57.0, 20776.0], [56.0, 20743.0], [59.0, 24246.0], [58.0, 24384.0], [61.0, 28599.0], [60.0, 28531.0], [63.0, 28982.0], [62.0, 23641.0], [67.0, 27749.5], [66.0, 25528.0], [65.0, 25187.0], [64.0, 23197.0], [71.0, 25978.0], [70.0, 23320.0], [69.0, 25646.0], [68.0, 25214.666666666668], [75.0, 24011.0], [74.0, 20854.0], [73.0, 25385.0], [72.0, 25519.0], [79.0, 23494.0], [78.0, 22235.0], [77.0, 24611.0], [76.0, 24155.75], [83.0, 21541.0], [82.0, 24846.0], [81.0, 23891.2], [80.0, 23466.0], [87.0, 28367.0], [86.0, 23831.0], [85.0, 26594.5], [84.0, 25995.699999999997], [91.0, 18657.0], [90.0, 29266.5], [89.0, 24165.0], [88.0, 24808.0], [95.0, 26939.714285714286], [94.0, 26228.000000000004], [93.0, 26664.0], [92.0, 22463.0], [99.0, 25772.090909090908], [98.0, 25418.37142857143], [97.0, 24888.5], [96.0, 25447.049999999992], [100.0, 23133.30143884894]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.94633333333329, 23134.54166666667]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3022.5, "minX": 1.59330114E12, "maxY": 8910.0, "series": [{"data": [[1.5933018E12, 8877.0], [1.59330132E12, 8679.0], [1.5933015E12, 8679.0], [1.59330144E12, 8646.0], [1.59330114E12, 5115.0], [1.59330162E12, 8151.0], [1.59330156E12, 8415.0], [1.59330126E12, 8910.0], [1.59330174E12, 7755.0], [1.5933012E12, 8844.0], [1.59330168E12, 8019.0], [1.59330138E12, 8910.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5933018E12, 5245.5], [1.59330132E12, 5128.5], [1.5933015E12, 5128.5], [1.59330144E12, 5109.0], [1.59330114E12, 3022.5], [1.59330162E12, 4816.5], [1.59330156E12, 4972.5], [1.59330126E12, 5265.0], [1.59330174E12, 4582.5], [1.5933012E12, 5226.0], [1.59330168E12, 4738.5], [1.59330138E12, 5265.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933018E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21799.17419354839, "minX": 1.59330114E12, "maxY": 25456.017021276588, "series": [{"data": [[1.5933018E12, 23483.61710037174], [1.59330132E12, 22693.463878326995], [1.5933015E12, 23131.102661596957], [1.59330144E12, 22536.645038167946], [1.59330114E12, 21799.17419354839], [1.59330162E12, 23821.514170040493], [1.59330156E12, 23463.537254901967], [1.59330126E12, 21998.044444444444], [1.59330174E12, 25456.017021276588], [1.5933012E12, 22310.5037313433], [1.59330168E12, 24735.15226337449], [1.59330138E12, 22120.700000000008]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933018E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21799.012903225794, "minX": 1.59330114E12, "maxY": 25455.97021276597, "series": [{"data": [[1.5933018E12, 23483.565055762083], [1.59330132E12, 22693.403041825113], [1.5933015E12, 23131.030418250935], [1.59330144E12, 22536.58015267174], [1.59330114E12, 21799.012903225794], [1.59330162E12, 23821.46558704453], [1.59330156E12, 23463.4705882353], [1.59330126E12, 21997.99629629629], [1.59330174E12, 25455.97021276597], [1.5933012E12, 22310.37686567165], [1.59330168E12, 24735.115226337457], [1.59330138E12, 22120.651851851868]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933018E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.327659574468085, "minX": 1.59330114E12, "maxY": 19.335483870967728, "series": [{"data": [[1.5933018E12, 0.3828996282527884], [1.59330132E12, 0.3726235741444869], [1.5933015E12, 0.6083650190114066], [1.59330144E12, 0.5687022900763359], [1.59330114E12, 19.335483870967728], [1.59330162E12, 0.5303643724696356], [1.59330156E12, 0.5490196078431372], [1.59330126E12, 0.39999999999999997], [1.59330174E12, 0.327659574468085], [1.5933012E12, 0.6044776119402987], [1.59330168E12, 0.49794238683127556], [1.59330138E12, 0.45925925925925953]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933018E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1590.0, "minX": 1.59330114E12, "maxY": 35788.0, "series": [{"data": [[1.5933018E12, 32207.0], [1.59330132E12, 30941.0], [1.5933015E12, 31136.0], [1.59330144E12, 29906.0], [1.59330114E12, 35788.0], [1.59330162E12, 31260.0], [1.59330156E12, 31109.0], [1.59330126E12, 27367.0], [1.59330174E12, 32348.0], [1.5933012E12, 28011.0], [1.59330168E12, 32039.0], [1.59330138E12, 29685.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5933018E12, 2028.5599361419677], [1.59330132E12, 17840.35998520851], [1.5933015E12, 17028.135983572007], [1.59330144E12, 16809.254983383416], [1.59330114E12, 12862.99998140335], [1.59330162E12, 17882.591986341475], [1.59330156E12, 18465.575979003905], [1.59330126E12, 17454.484992569684], [1.59330174E12, 19981.139986777307], [1.5933012E12, 17928.314999037982], [1.59330168E12, 18991.71196090698], [1.59330138E12, 17168.336988176106]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5933018E12, 2269.616025543213], [1.59330132E12, 17896.196005916594], [1.5933015E12, 17090.149606571198], [1.59330144E12, 16871.980506646632], [1.59330114E12, 12933.20000743866], [1.59330162E12, 17934.151205463408], [1.59330156E12, 18544.833608398436], [1.59330126E12, 17482.533502972125], [1.59330174E12, 20031.05400528908], [1.5933012E12, 17931.94650038481], [1.59330168E12, 19139.283215637206], [1.59330138E12, 17212.970704729556]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5933018E12, 2162.479968070984], [1.59330132E12, 17871.379992604256], [1.5933015E12, 17062.587991786004], [1.59330144E12, 16844.10249169171], [1.59330114E12, 12901.999990701675], [1.59330162E12, 17911.23599317074], [1.59330156E12, 18509.607989501954], [1.59330126E12, 17470.067496284842], [1.59330174E12, 20008.869993388653], [1.5933012E12, 17930.33249951899], [1.59330168E12, 19073.695980453493], [1.59330138E12, 17193.133494088055]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5933018E12, 1590.0], [1.59330132E12, 16956.0], [1.5933015E12, 16354.0], [1.59330144E12, 16129.0], [1.59330114E12, 12661.0], [1.59330162E12, 17802.0], [1.59330156E12, 17234.0], [1.59330126E12, 17371.0], [1.59330174E12, 19938.0], [1.5933012E12, 17151.0], [1.59330168E12, 18446.0], [1.59330138E12, 16809.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5933018E12, 24431.0], [1.59330132E12, 22404.0], [1.5933015E12, 23151.0], [1.59330144E12, 22467.0], [1.59330114E12, 21455.0], [1.59330162E12, 23799.0], [1.59330156E12, 23392.0], [1.59330126E12, 22116.5], [1.59330174E12, 25250.0], [1.5933012E12, 22249.5], [1.59330168E12, 24581.0], [1.59330138E12, 22066.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933018E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15027.0, "minX": 1.0, "maxY": 23364.0, "series": [{"data": [[2.0, 23153.0], [8.0, 23129.0], [9.0, 23256.0], [10.0, 22398.5], [11.0, 22431.0], [3.0, 23172.0], [12.0, 22817.5], [13.0, 22732.0], [14.0, 23320.0], [4.0, 23312.5], [1.0, 22739.0], [17.0, 15027.0], [5.0, 22934.0], [6.0, 23364.0], [7.0, 23201.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15027.0, "minX": 1.0, "maxY": 23363.5, "series": [{"data": [[2.0, 23152.5], [8.0, 23129.0], [9.0, 23256.0], [10.0, 22398.5], [11.0, 22431.0], [3.0, 23172.0], [12.0, 22817.5], [13.0, 22732.0], [14.0, 23320.0], [4.0, 23312.5], [1.0, 22739.0], [17.0, 15027.0], [5.0, 22934.0], [6.0, 23363.5], [7.0, 23201.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.816666666666667, "minX": 1.59330114E12, "maxY": 4.5, "series": [{"data": [[1.5933018E12, 2.816666666666667], [1.59330132E12, 4.383333333333334], [1.5933015E12, 4.383333333333334], [1.59330144E12, 4.366666666666666], [1.59330114E12, 4.25], [1.59330162E12, 4.116666666666666], [1.59330156E12, 4.25], [1.59330126E12, 4.5], [1.59330174E12, 3.9166666666666665], [1.5933012E12, 4.466666666666667], [1.59330168E12, 4.05], [1.59330138E12, 4.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933018E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.59330114E12, "maxY": 4.5, "series": [{"data": [[1.5933018E12, 4.483333333333333], [1.59330132E12, 4.383333333333334], [1.5933015E12, 4.383333333333334], [1.59330144E12, 4.366666666666666], [1.59330114E12, 2.5833333333333335], [1.59330162E12, 4.116666666666666], [1.59330156E12, 4.25], [1.59330126E12, 4.5], [1.59330174E12, 3.9166666666666665], [1.5933012E12, 4.466666666666667], [1.59330168E12, 4.05], [1.59330138E12, 4.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933018E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.59330114E12, "maxY": 4.5, "series": [{"data": [[1.5933018E12, 4.483333333333333], [1.59330132E12, 4.383333333333334], [1.5933015E12, 4.383333333333334], [1.59330144E12, 4.366666666666666], [1.59330114E12, 2.5833333333333335], [1.59330162E12, 4.116666666666666], [1.59330156E12, 4.25], [1.59330126E12, 4.5], [1.59330174E12, 3.9166666666666665], [1.5933012E12, 4.466666666666667], [1.59330168E12, 4.05], [1.59330138E12, 4.5]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933018E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.59330114E12, "maxY": 4.5, "series": [{"data": [[1.5933018E12, 4.483333333333333], [1.59330132E12, 4.383333333333334], [1.5933015E12, 4.383333333333334], [1.59330144E12, 4.366666666666666], [1.59330114E12, 2.5833333333333335], [1.59330162E12, 4.116666666666666], [1.59330156E12, 4.25], [1.59330126E12, 4.5], [1.59330174E12, 3.9166666666666665], [1.5933012E12, 4.466666666666667], [1.59330168E12, 4.05], [1.59330138E12, 4.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933018E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

