/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5334.0, "minX": 0.0, "maxY": 36075.0, "series": [{"data": [[0.0, 5334.0], [0.1, 7541.0], [0.2, 8103.0], [0.3, 8103.0], [0.4, 9050.0], [0.5, 9525.0], [0.6, 10120.0], [0.7, 10190.0], [0.8, 11009.0], [0.9, 11500.0], [1.0, 12362.0], [1.1, 13309.0], [1.2, 13945.0], [1.3, 14324.0], [1.4, 14324.0], [1.5, 14744.0], [1.6, 15544.0], [1.7, 15569.0], [1.8, 15743.0], [1.9, 15767.0], [2.0, 15861.0], [2.1, 15890.0], [2.2, 15947.0], [2.3, 16011.0], [2.4, 16374.0], [2.5, 16379.0], [2.6, 16396.0], [2.7, 16400.0], [2.8, 16403.0], [2.9, 16413.0], [3.0, 16422.0], [3.1, 16440.0], [3.2, 16443.0], [3.3, 16535.0], [3.4, 16573.0], [3.5, 16592.0], [3.6, 16593.0], [3.7, 16634.0], [3.8, 16636.0], [3.9, 16666.0], [4.0, 16672.0], [4.1, 16898.0], [4.2, 16904.0], [4.3, 16956.0], [4.4, 17048.0], [4.5, 17049.0], [4.6, 17055.0], [4.7, 17081.0], [4.8, 17121.0], [4.9, 17155.0], [5.0, 17166.0], [5.1, 17182.0], [5.2, 17200.0], [5.3, 17215.0], [5.4, 17281.0], [5.5, 17326.0], [5.6, 17398.0], [5.7, 17398.0], [5.8, 17418.0], [5.9, 17430.0], [6.0, 17441.0], [6.1, 17499.0], [6.2, 17599.0], [6.3, 17625.0], [6.4, 17684.0], [6.5, 17709.0], [6.6, 17769.0], [6.7, 17775.0], [6.8, 17786.0], [6.9, 17799.0], [7.0, 17812.0], [7.1, 17815.0], [7.2, 17817.0], [7.3, 17893.0], [7.4, 17907.0], [7.5, 17926.0], [7.6, 17963.0], [7.7, 17989.0], [7.8, 18002.0], [7.9, 18093.0], [8.0, 18126.0], [8.1, 18223.0], [8.2, 18238.0], [8.3, 18262.0], [8.4, 18270.0], [8.5, 18271.0], [8.6, 18280.0], [8.7, 18282.0], [8.8, 18299.0], [8.9, 18303.0], [9.0, 18338.0], [9.1, 18355.0], [9.2, 18363.0], [9.3, 18363.0], [9.4, 18429.0], [9.5, 18438.0], [9.6, 18449.0], [9.7, 18463.0], [9.8, 18480.0], [9.9, 18486.0], [10.0, 18510.0], [10.1, 18543.0], [10.2, 18553.0], [10.3, 18591.0], [10.4, 18592.0], [10.5, 18595.0], [10.6, 18613.0], [10.7, 18617.0], [10.8, 18623.0], [10.9, 18656.0], [11.0, 18659.0], [11.1, 18661.0], [11.2, 18665.0], [11.3, 18671.0], [11.4, 18682.0], [11.5, 18690.0], [11.6, 18722.0], [11.7, 18732.0], [11.8, 18736.0], [11.9, 18765.0], [12.0, 18789.0], [12.1, 18790.0], [12.2, 18795.0], [12.3, 18797.0], [12.4, 18806.0], [12.5, 18816.0], [12.6, 18821.0], [12.7, 18849.0], [12.8, 18854.0], [12.9, 18861.0], [13.0, 18866.0], [13.1, 18891.0], [13.2, 18900.0], [13.3, 18932.0], [13.4, 18933.0], [13.5, 18933.0], [13.6, 18950.0], [13.7, 18964.0], [13.8, 18986.0], [13.9, 18988.0], [14.0, 18995.0], [14.1, 18998.0], [14.2, 19030.0], [14.3, 19031.0], [14.4, 19035.0], [14.5, 19049.0], [14.6, 19056.0], [14.7, 19092.0], [14.8, 19107.0], [14.9, 19120.0], [15.0, 19123.0], [15.1, 19152.0], [15.2, 19157.0], [15.3, 19169.0], [15.4, 19173.0], [15.5, 19176.0], [15.6, 19176.0], [15.7, 19179.0], [15.8, 19183.0], [15.9, 19191.0], [16.0, 19195.0], [16.1, 19200.0], [16.2, 19204.0], [16.3, 19216.0], [16.4, 19224.0], [16.5, 19240.0], [16.6, 19242.0], [16.7, 19248.0], [16.8, 19252.0], [16.9, 19261.0], [17.0, 19262.0], [17.1, 19266.0], [17.2, 19281.0], [17.3, 19295.0], [17.4, 19307.0], [17.5, 19316.0], [17.6, 19336.0], [17.7, 19346.0], [17.8, 19354.0], [17.9, 19359.0], [18.0, 19368.0], [18.1, 19374.0], [18.2, 19376.0], [18.3, 19379.0], [18.4, 19394.0], [18.5, 19420.0], [18.6, 19455.0], [18.7, 19483.0], [18.8, 19488.0], [18.9, 19488.0], [19.0, 19491.0], [19.1, 19501.0], [19.2, 19502.0], [19.3, 19508.0], [19.4, 19512.0], [19.5, 19515.0], [19.6, 19537.0], [19.7, 19538.0], [19.8, 19541.0], [19.9, 19561.0], [20.0, 19582.0], [20.1, 19585.0], [20.2, 19587.0], [20.3, 19590.0], [20.4, 19597.0], [20.5, 19599.0], [20.6, 19623.0], [20.7, 19632.0], [20.8, 19656.0], [20.9, 19672.0], [21.0, 19688.0], [21.1, 19694.0], [21.2, 19726.0], [21.3, 19740.0], [21.4, 19846.0], [21.5, 19853.0], [21.6, 19854.0], [21.7, 19856.0], [21.8, 19856.0], [21.9, 19885.0], [22.0, 19902.0], [22.1, 19908.0], [22.2, 19911.0], [22.3, 19914.0], [22.4, 19919.0], [22.5, 19923.0], [22.6, 19923.0], [22.7, 19925.0], [22.8, 19929.0], [22.9, 19935.0], [23.0, 19949.0], [23.1, 19954.0], [23.2, 19954.0], [23.3, 19967.0], [23.4, 19976.0], [23.5, 20007.0], [23.6, 20008.0], [23.7, 20019.0], [23.8, 20027.0], [23.9, 20031.0], [24.0, 20047.0], [24.1, 20059.0], [24.2, 20073.0], [24.3, 20105.0], [24.4, 20121.0], [24.5, 20124.0], [24.6, 20128.0], [24.7, 20133.0], [24.8, 20134.0], [24.9, 20140.0], [25.0, 20161.0], [25.1, 20165.0], [25.2, 20168.0], [25.3, 20170.0], [25.4, 20174.0], [25.5, 20198.0], [25.6, 20224.0], [25.7, 20224.0], [25.8, 20236.0], [25.9, 20239.0], [26.0, 20250.0], [26.1, 20262.0], [26.2, 20273.0], [26.3, 20280.0], [26.4, 20309.0], [26.5, 20321.0], [26.6, 20343.0], [26.7, 20353.0], [26.8, 20357.0], [26.9, 20361.0], [27.0, 20363.0], [27.1, 20366.0], [27.2, 20370.0], [27.3, 20371.0], [27.4, 20380.0], [27.5, 20398.0], [27.6, 20402.0], [27.7, 20415.0], [27.8, 20434.0], [27.9, 20458.0], [28.0, 20469.0], [28.1, 20494.0], [28.2, 20502.0], [28.3, 20504.0], [28.4, 20507.0], [28.5, 20509.0], [28.6, 20519.0], [28.7, 20538.0], [28.8, 20552.0], [28.9, 20603.0], [29.0, 20639.0], [29.1, 20648.0], [29.2, 20668.0], [29.3, 20671.0], [29.4, 20685.0], [29.5, 20712.0], [29.6, 20731.0], [29.7, 20746.0], [29.8, 20756.0], [29.9, 20769.0], [30.0, 20770.0], [30.1, 20770.0], [30.2, 20773.0], [30.3, 20806.0], [30.4, 20827.0], [30.5, 20833.0], [30.6, 20844.0], [30.7, 20872.0], [30.8, 20876.0], [30.9, 20889.0], [31.0, 20904.0], [31.1, 20918.0], [31.2, 20932.0], [31.3, 20939.0], [31.4, 20949.0], [31.5, 20977.0], [31.6, 20984.0], [31.7, 21001.0], [31.8, 21023.0], [31.9, 21023.0], [32.0, 21039.0], [32.1, 21042.0], [32.2, 21072.0], [32.3, 21073.0], [32.4, 21098.0], [32.5, 21098.0], [32.6, 21109.0], [32.7, 21125.0], [32.8, 21127.0], [32.9, 21131.0], [33.0, 21133.0], [33.1, 21143.0], [33.2, 21144.0], [33.3, 21152.0], [33.4, 21152.0], [33.5, 21153.0], [33.6, 21156.0], [33.7, 21158.0], [33.8, 21160.0], [33.9, 21165.0], [34.0, 21170.0], [34.1, 21175.0], [34.2, 21177.0], [34.3, 21182.0], [34.4, 21206.0], [34.5, 21209.0], [34.6, 21214.0], [34.7, 21215.0], [34.8, 21230.0], [34.9, 21234.0], [35.0, 21249.0], [35.1, 21250.0], [35.2, 21250.0], [35.3, 21257.0], [35.4, 21264.0], [35.5, 21270.0], [35.6, 21270.0], [35.7, 21280.0], [35.8, 21286.0], [35.9, 21289.0], [36.0, 21325.0], [36.1, 21340.0], [36.2, 21340.0], [36.3, 21341.0], [36.4, 21361.0], [36.5, 21362.0], [36.6, 21382.0], [36.7, 21388.0], [36.8, 21389.0], [36.9, 21391.0], [37.0, 21393.0], [37.1, 21397.0], [37.2, 21400.0], [37.3, 21401.0], [37.4, 21440.0], [37.5, 21442.0], [37.6, 21443.0], [37.7, 21446.0], [37.8, 21448.0], [37.9, 21458.0], [38.0, 21460.0], [38.1, 21472.0], [38.2, 21506.0], [38.3, 21518.0], [38.4, 21525.0], [38.5, 21539.0], [38.6, 21541.0], [38.7, 21553.0], [38.8, 21569.0], [38.9, 21572.0], [39.0, 21584.0], [39.1, 21595.0], [39.2, 21623.0], [39.3, 21637.0], [39.4, 21641.0], [39.5, 21661.0], [39.6, 21667.0], [39.7, 21696.0], [39.8, 21697.0], [39.9, 21710.0], [40.0, 21717.0], [40.1, 21751.0], [40.2, 21764.0], [40.3, 21780.0], [40.4, 21809.0], [40.5, 21829.0], [40.6, 21835.0], [40.7, 21857.0], [40.8, 21866.0], [40.9, 21873.0], [41.0, 21878.0], [41.1, 21883.0], [41.2, 21886.0], [41.3, 21887.0], [41.4, 21888.0], [41.5, 21901.0], [41.6, 21903.0], [41.7, 21909.0], [41.8, 21925.0], [41.9, 21925.0], [42.0, 21934.0], [42.1, 21974.0], [42.2, 21976.0], [42.3, 21977.0], [42.4, 21982.0], [42.5, 21994.0], [42.6, 22008.0], [42.7, 22009.0], [42.8, 22015.0], [42.9, 22031.0], [43.0, 22039.0], [43.1, 22040.0], [43.2, 22044.0], [43.3, 22047.0], [43.4, 22053.0], [43.5, 22057.0], [43.6, 22086.0], [43.7, 22098.0], [43.8, 22118.0], [43.9, 22124.0], [44.0, 22140.0], [44.1, 22158.0], [44.2, 22223.0], [44.3, 22243.0], [44.4, 22258.0], [44.5, 22261.0], [44.6, 22264.0], [44.7, 22283.0], [44.8, 22306.0], [44.9, 22306.0], [45.0, 22308.0], [45.1, 22330.0], [45.2, 22348.0], [45.3, 22353.0], [45.4, 22359.0], [45.5, 22362.0], [45.6, 22379.0], [45.7, 22382.0], [45.8, 22382.0], [45.9, 22386.0], [46.0, 22388.0], [46.1, 22390.0], [46.2, 22409.0], [46.3, 22419.0], [46.4, 22433.0], [46.5, 22444.0], [46.6, 22462.0], [46.7, 22465.0], [46.8, 22513.0], [46.9, 22520.0], [47.0, 22525.0], [47.1, 22538.0], [47.2, 22539.0], [47.3, 22570.0], [47.4, 22591.0], [47.5, 22593.0], [47.6, 22593.0], [47.7, 22598.0], [47.8, 22602.0], [47.9, 22605.0], [48.0, 22633.0], [48.1, 22642.0], [48.2, 22655.0], [48.3, 22668.0], [48.4, 22687.0], [48.5, 22688.0], [48.6, 22695.0], [48.7, 22705.0], [48.8, 22751.0], [48.9, 22785.0], [49.0, 22787.0], [49.1, 22828.0], [49.2, 22891.0], [49.3, 22963.0], [49.4, 22967.0], [49.5, 22978.0], [49.6, 22980.0], [49.7, 22984.0], [49.8, 22994.0], [49.9, 23002.0], [50.0, 23012.0], [50.1, 23016.0], [50.2, 23026.0], [50.3, 23031.0], [50.4, 23065.0], [50.5, 23073.0], [50.6, 23084.0], [50.7, 23110.0], [50.8, 23138.0], [50.9, 23152.0], [51.0, 23158.0], [51.1, 23159.0], [51.2, 23164.0], [51.3, 23180.0], [51.4, 23184.0], [51.5, 23203.0], [51.6, 23206.0], [51.7, 23217.0], [51.8, 23222.0], [51.9, 23239.0], [52.0, 23253.0], [52.1, 23270.0], [52.2, 23270.0], [52.3, 23280.0], [52.4, 23281.0], [52.5, 23317.0], [52.6, 23330.0], [52.7, 23334.0], [52.8, 23338.0], [52.9, 23347.0], [53.0, 23351.0], [53.1, 23374.0], [53.2, 23377.0], [53.3, 23395.0], [53.4, 23410.0], [53.5, 23414.0], [53.6, 23465.0], [53.7, 23471.0], [53.8, 23488.0], [53.9, 23492.0], [54.0, 23494.0], [54.1, 23506.0], [54.2, 23511.0], [54.3, 23514.0], [54.4, 23523.0], [54.5, 23547.0], [54.6, 23557.0], [54.7, 23558.0], [54.8, 23564.0], [54.9, 23567.0], [55.0, 23608.0], [55.1, 23624.0], [55.2, 23633.0], [55.3, 23670.0], [55.4, 23681.0], [55.5, 23701.0], [55.6, 23721.0], [55.7, 23748.0], [55.8, 23752.0], [55.9, 23757.0], [56.0, 23765.0], [56.1, 23821.0], [56.2, 23825.0], [56.3, 23840.0], [56.4, 23862.0], [56.5, 23868.0], [56.6, 23913.0], [56.7, 23963.0], [56.8, 23966.0], [56.9, 23974.0], [57.0, 23994.0], [57.1, 23996.0], [57.2, 24003.0], [57.3, 24035.0], [57.4, 24052.0], [57.5, 24076.0], [57.6, 24083.0], [57.7, 24110.0], [57.8, 24111.0], [57.9, 24126.0], [58.0, 24126.0], [58.1, 24138.0], [58.2, 24149.0], [58.3, 24149.0], [58.4, 24156.0], [58.5, 24160.0], [58.6, 24162.0], [58.7, 24162.0], [58.8, 24230.0], [58.9, 24247.0], [59.0, 24265.0], [59.1, 24314.0], [59.2, 24330.0], [59.3, 24339.0], [59.4, 24350.0], [59.5, 24358.0], [59.6, 24378.0], [59.7, 24378.0], [59.8, 24383.0], [59.9, 24386.0], [60.0, 24386.0], [60.1, 24439.0], [60.2, 24468.0], [60.3, 24479.0], [60.4, 24498.0], [60.5, 24509.0], [60.6, 24513.0], [60.7, 24515.0], [60.8, 24515.0], [60.9, 24541.0], [61.0, 24572.0], [61.1, 24594.0], [61.2, 24637.0], [61.3, 24643.0], [61.4, 24675.0], [61.5, 24677.0], [61.6, 24680.0], [61.7, 24681.0], [61.8, 24695.0], [61.9, 24734.0], [62.0, 24741.0], [62.1, 24752.0], [62.2, 24758.0], [62.3, 24778.0], [62.4, 24781.0], [62.5, 24809.0], [62.6, 24828.0], [62.7, 24833.0], [62.8, 24847.0], [62.9, 24881.0], [63.0, 24893.0], [63.1, 24900.0], [63.2, 24931.0], [63.3, 24935.0], [63.4, 24946.0], [63.5, 24995.0], [63.6, 24996.0], [63.7, 25001.0], [63.8, 25035.0], [63.9, 25059.0], [64.0, 25083.0], [64.1, 25131.0], [64.2, 25160.0], [64.3, 25180.0], [64.4, 25193.0], [64.5, 25202.0], [64.6, 25203.0], [64.7, 25222.0], [64.8, 25225.0], [64.9, 25233.0], [65.0, 25269.0], [65.1, 25276.0], [65.2, 25336.0], [65.3, 25358.0], [65.4, 25360.0], [65.5, 25377.0], [65.6, 25408.0], [65.7, 25408.0], [65.8, 25409.0], [65.9, 25410.0], [66.0, 25439.0], [66.1, 25465.0], [66.2, 25474.0], [66.3, 25487.0], [66.4, 25507.0], [66.5, 25534.0], [66.6, 25539.0], [66.7, 25546.0], [66.8, 25560.0], [66.9, 25570.0], [67.0, 25576.0], [67.1, 25625.0], [67.2, 25628.0], [67.3, 25640.0], [67.4, 25656.0], [67.5, 25681.0], [67.6, 25682.0], [67.7, 25684.0], [67.8, 25699.0], [67.9, 25699.0], [68.0, 25718.0], [68.1, 25740.0], [68.2, 25757.0], [68.3, 25771.0], [68.4, 25774.0], [68.5, 25796.0], [68.6, 25800.0], [68.7, 25800.0], [68.8, 25803.0], [68.9, 25804.0], [69.0, 25809.0], [69.1, 25814.0], [69.2, 25840.0], [69.3, 25840.0], [69.4, 25856.0], [69.5, 25887.0], [69.6, 25893.0], [69.7, 25894.0], [69.8, 25894.0], [69.9, 25928.0], [70.0, 25947.0], [70.1, 25961.0], [70.2, 25971.0], [70.3, 25976.0], [70.4, 25978.0], [70.5, 25986.0], [70.6, 25988.0], [70.7, 25989.0], [70.8, 25989.0], [70.9, 25995.0], [71.0, 25997.0], [71.1, 25998.0], [71.2, 26043.0], [71.3, 26081.0], [71.4, 26134.0], [71.5, 26144.0], [71.6, 26149.0], [71.7, 26172.0], [71.8, 26173.0], [71.9, 26175.0], [72.0, 26181.0], [72.1, 26231.0], [72.2, 26251.0], [72.3, 26261.0], [72.4, 26264.0], [72.5, 26267.0], [72.6, 26287.0], [72.7, 26290.0], [72.8, 26316.0], [72.9, 26328.0], [73.0, 26336.0], [73.1, 26338.0], [73.2, 26349.0], [73.3, 26355.0], [73.4, 26355.0], [73.5, 26358.0], [73.6, 26360.0], [73.7, 26368.0], [73.8, 26371.0], [73.9, 26375.0], [74.0, 26399.0], [74.1, 26409.0], [74.2, 26416.0], [74.3, 26418.0], [74.4, 26447.0], [74.5, 26463.0], [74.6, 26476.0], [74.7, 26499.0], [74.8, 26501.0], [74.9, 26533.0], [75.0, 26537.0], [75.1, 26556.0], [75.2, 26562.0], [75.3, 26580.0], [75.4, 26591.0], [75.5, 26592.0], [75.6, 26612.0], [75.7, 26646.0], [75.8, 26677.0], [75.9, 26677.0], [76.0, 26693.0], [76.1, 26703.0], [76.2, 26747.0], [76.3, 26759.0], [76.4, 26761.0], [76.5, 26774.0], [76.6, 26779.0], [76.7, 26788.0], [76.8, 26793.0], [76.9, 26839.0], [77.0, 26860.0], [77.1, 26870.0], [77.2, 26892.0], [77.3, 26897.0], [77.4, 26907.0], [77.5, 26997.0], [77.6, 27018.0], [77.7, 27052.0], [77.8, 27060.0], [77.9, 27143.0], [78.0, 27157.0], [78.1, 27166.0], [78.2, 27169.0], [78.3, 27176.0], [78.4, 27202.0], [78.5, 27223.0], [78.6, 27241.0], [78.7, 27267.0], [78.8, 27277.0], [78.9, 27295.0], [79.0, 27296.0], [79.1, 27301.0], [79.2, 27344.0], [79.3, 27355.0], [79.4, 27392.0], [79.5, 27395.0], [79.6, 27401.0], [79.7, 27429.0], [79.8, 27459.0], [79.9, 27476.0], [80.0, 27482.0], [80.1, 27484.0], [80.2, 27499.0], [80.3, 27503.0], [80.4, 27509.0], [80.5, 27529.0], [80.6, 27529.0], [80.7, 27537.0], [80.8, 27553.0], [80.9, 27553.0], [81.0, 27575.0], [81.1, 27608.0], [81.2, 27615.0], [81.3, 27617.0], [81.4, 27618.0], [81.5, 27641.0], [81.6, 27650.0], [81.7, 27652.0], [81.8, 27656.0], [81.9, 27667.0], [82.0, 27728.0], [82.1, 27731.0], [82.2, 27744.0], [82.3, 27784.0], [82.4, 27785.0], [82.5, 27792.0], [82.6, 27807.0], [82.7, 27819.0], [82.8, 27829.0], [82.9, 27841.0], [83.0, 27886.0], [83.1, 27900.0], [83.2, 27903.0], [83.3, 27922.0], [83.4, 27925.0], [83.5, 27932.0], [83.6, 27936.0], [83.7, 27938.0], [83.8, 28016.0], [83.9, 28050.0], [84.0, 28060.0], [84.1, 28079.0], [84.2, 28100.0], [84.3, 28109.0], [84.4, 28121.0], [84.5, 28173.0], [84.6, 28178.0], [84.7, 28198.0], [84.8, 28280.0], [84.9, 28290.0], [85.0, 28304.0], [85.1, 28389.0], [85.2, 28394.0], [85.3, 28434.0], [85.4, 28459.0], [85.5, 28476.0], [85.6, 28499.0], [85.7, 28530.0], [85.8, 28548.0], [85.9, 28553.0], [86.0, 28632.0], [86.1, 28652.0], [86.2, 28772.0], [86.3, 28804.0], [86.4, 28806.0], [86.5, 28827.0], [86.6, 28877.0], [86.7, 28887.0], [86.8, 28912.0], [86.9, 28913.0], [87.0, 29037.0], [87.1, 29114.0], [87.2, 29149.0], [87.3, 29188.0], [87.4, 29222.0], [87.5, 29245.0], [87.6, 29261.0], [87.7, 29322.0], [87.8, 29375.0], [87.9, 29396.0], [88.0, 29528.0], [88.1, 29532.0], [88.2, 29532.0], [88.3, 29547.0], [88.4, 29605.0], [88.5, 29640.0], [88.6, 29659.0], [88.7, 29795.0], [88.8, 29823.0], [88.9, 29834.0], [89.0, 29845.0], [89.1, 29918.0], [89.2, 30003.0], [89.3, 30031.0], [89.4, 30071.0], [89.5, 30132.0], [89.6, 30156.0], [89.7, 30165.0], [89.8, 30215.0], [89.9, 30233.0], [90.0, 30317.0], [90.1, 30329.0], [90.2, 30357.0], [90.3, 30391.0], [90.4, 30402.0], [90.5, 30484.0], [90.6, 30609.0], [90.7, 30620.0], [90.8, 30637.0], [90.9, 30652.0], [91.0, 30653.0], [91.1, 30693.0], [91.2, 30723.0], [91.3, 30796.0], [91.4, 30805.0], [91.5, 30848.0], [91.6, 30870.0], [91.7, 30873.0], [91.8, 30909.0], [91.9, 31043.0], [92.0, 31046.0], [92.1, 31110.0], [92.2, 31113.0], [92.3, 31169.0], [92.4, 31204.0], [92.5, 31235.0], [92.6, 31259.0], [92.7, 31351.0], [92.8, 31404.0], [92.9, 31414.0], [93.0, 31431.0], [93.1, 31562.0], [93.2, 31776.0], [93.3, 31803.0], [93.4, 31874.0], [93.5, 31916.0], [93.6, 31946.0], [93.7, 31950.0], [93.8, 32010.0], [93.9, 32032.0], [94.0, 32107.0], [94.1, 32194.0], [94.2, 32246.0], [94.3, 32262.0], [94.4, 32265.0], [94.5, 32297.0], [94.6, 32336.0], [94.7, 32350.0], [94.8, 32364.0], [94.9, 32407.0], [95.0, 32420.0], [95.1, 32422.0], [95.2, 32431.0], [95.3, 32443.0], [95.4, 32465.0], [95.5, 32470.0], [95.6, 32546.0], [95.7, 32574.0], [95.8, 32586.0], [95.9, 32599.0], [96.0, 32609.0], [96.1, 32609.0], [96.2, 32613.0], [96.3, 32651.0], [96.4, 32658.0], [96.5, 32749.0], [96.6, 32782.0], [96.7, 32791.0], [96.8, 32800.0], [96.9, 32802.0], [97.0, 32804.0], [97.1, 32809.0], [97.2, 32847.0], [97.3, 32874.0], [97.4, 33005.0], [97.5, 33016.0], [97.6, 33147.0], [97.7, 33219.0], [97.8, 33350.0], [97.9, 33407.0], [98.0, 33463.0], [98.1, 33722.0], [98.2, 33797.0], [98.3, 33850.0], [98.4, 33857.0], [98.5, 33967.0], [98.6, 34105.0], [98.7, 34180.0], [98.8, 34481.0], [98.9, 35325.0], [99.0, 35327.0], [99.1, 35476.0], [99.2, 35485.0], [99.3, 35524.0], [99.4, 35655.0], [99.5, 35904.0], [99.6, 35914.0], [99.7, 35921.0], [99.8, 36027.0], [99.9, 36075.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5300.0, "maxY": 18.0, "series": [{"data": [[33700.0, 2.0], [34100.0, 2.0], [33300.0, 1.0], [35300.0, 2.0], [5300.0, 1.0], [7500.0, 1.0], [8100.0, 1.0], [8300.0, 1.0], [9000.0, 1.0], [9500.0, 1.0], [10100.0, 2.0], [11000.0, 1.0], [11500.0, 1.0], [12300.0, 1.0], [13300.0, 1.0], [14300.0, 1.0], [13900.0, 1.0], [14700.0, 1.0], [15500.0, 2.0], [15800.0, 2.0], [15700.0, 2.0], [16000.0, 1.0], [16300.0, 3.0], [15900.0, 1.0], [17200.0, 3.0], [16400.0, 6.0], [16600.0, 4.0], [17000.0, 4.0], [17400.0, 4.0], [16800.0, 1.0], [18200.0, 8.0], [18000.0, 2.0], [17800.0, 4.0], [18400.0, 6.0], [17600.0, 2.0], [19200.0, 13.0], [18600.0, 10.0], [18800.0, 8.0], [19000.0, 6.0], [19400.0, 5.0], [20400.0, 6.0], [19600.0, 6.0], [20200.0, 8.0], [20000.0, 8.0], [19800.0, 6.0], [21400.0, 10.0], [21200.0, 16.0], [20800.0, 7.0], [20600.0, 6.0], [21000.0, 9.0], [21600.0, 7.0], [21800.0, 11.0], [22000.0, 12.0], [22400.0, 6.0], [22200.0, 6.0], [22600.0, 9.0], [23400.0, 7.0], [22800.0, 2.0], [23000.0, 8.0], [23200.0, 10.0], [24400.0, 4.0], [23600.0, 5.0], [23800.0, 5.0], [24000.0, 5.0], [24200.0, 3.0], [25400.0, 8.0], [25200.0, 7.0], [25000.0, 4.0], [24600.0, 7.0], [24800.0, 6.0], [25800.0, 13.0], [25600.0, 9.0], [26200.0, 7.0], [26600.0, 5.0], [26400.0, 7.0], [26000.0, 2.0], [27400.0, 7.0], [27200.0, 7.0], [27600.0, 9.0], [27000.0, 3.0], [26800.0, 5.0], [27800.0, 5.0], [28400.0, 4.0], [28200.0, 2.0], [28000.0, 4.0], [28600.0, 2.0], [29600.0, 3.0], [29200.0, 3.0], [28800.0, 5.0], [29000.0, 1.0], [30600.0, 6.0], [29800.0, 3.0], [30000.0, 3.0], [30400.0, 2.0], [30200.0, 2.0], [30800.0, 4.0], [31000.0, 2.0], [31200.0, 3.0], [31400.0, 3.0], [32600.0, 5.0], [32200.0, 4.0], [32400.0, 7.0], [32000.0, 2.0], [31800.0, 2.0], [32800.0, 6.0], [33200.0, 1.0], [34400.0, 1.0], [35600.0, 1.0], [36000.0, 2.0], [33900.0, 1.0], [33100.0, 1.0], [35500.0, 1.0], [35900.0, 3.0], [16500.0, 4.0], [17100.0, 4.0], [17300.0, 3.0], [16900.0, 3.0], [17900.0, 4.0], [18100.0, 1.0], [18300.0, 5.0], [17500.0, 1.0], [17700.0, 5.0], [18500.0, 6.0], [18700.0, 8.0], [18900.0, 10.0], [19100.0, 13.0], [19300.0, 11.0], [19500.0, 15.0], [20100.0, 13.0], [19900.0, 15.0], [20300.0, 12.0], [19700.0, 2.0], [21300.0, 12.0], [21100.0, 18.0], [20500.0, 7.0], [20700.0, 8.0], [20900.0, 7.0], [21500.0, 10.0], [22300.0, 14.0], [21900.0, 11.0], [21700.0, 5.0], [22500.0, 10.0], [22100.0, 4.0], [23500.0, 9.0], [22900.0, 6.0], [23100.0, 8.0], [23300.0, 9.0], [22700.0, 4.0], [23700.0, 6.0], [23900.0, 6.0], [24300.0, 10.0], [24500.0, 7.0], [24100.0, 11.0], [25300.0, 4.0], [25100.0, 4.0], [24700.0, 6.0], [25500.0, 7.0], [24900.0, 6.0], [25700.0, 6.0], [26500.0, 8.0], [26300.0, 13.0], [26100.0, 7.0], [25900.0, 13.0], [27300.0, 5.0], [26700.0, 9.0], [27500.0, 8.0], [26900.0, 2.0], [27100.0, 5.0], [28500.0, 3.0], [28100.0, 6.0], [27900.0, 7.0], [27700.0, 6.0], [28300.0, 3.0], [29500.0, 4.0], [29100.0, 3.0], [29300.0, 3.0], [28900.0, 2.0], [28700.0, 1.0], [29700.0, 1.0], [30700.0, 2.0], [29900.0, 1.0], [30300.0, 4.0], [30100.0, 3.0], [31500.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [31100.0, 3.0], [31700.0, 1.0], [32300.0, 3.0], [32700.0, 3.0], [32500.0, 4.0], [32100.0, 2.0], [31900.0, 3.0], [33000.0, 2.0], [33800.0, 2.0], [33400.0, 2.0], [35400.0, 2.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 36000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 81.39726027397255, "minX": 1.59338562E12, "maxY": 100.0, "series": [{"data": [[1.5933858E12, 81.39726027397255], [1.59338562E12, 100.0], [1.59338574E12, 100.0], [1.59338568E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933858E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5334.0, "minX": 1.0, "maxY": 26314.0, "series": [{"data": [[2.0, 7541.0], [3.0, 8382.0], [4.0, 9050.0], [5.0, 8103.0], [6.0, 13309.0], [7.0, 14744.0], [8.0, 11009.0], [9.0, 19176.0], [10.0, 10190.0], [11.0, 10120.0], [12.0, 15569.0], [13.0, 12362.0], [14.0, 15947.0], [15.0, 20047.0], [16.0, 13945.0], [17.0, 11500.0], [18.0, 20031.0], [19.0, 18282.0], [20.0, 9525.0], [21.0, 18932.0], [22.0, 19512.0], [23.0, 21325.0], [24.0, 17081.0], [25.0, 14324.0], [26.0, 18093.0], [27.0, 20827.0], [28.0, 19856.0], [29.0, 20603.0], [30.0, 21442.0], [31.0, 22039.0], [33.0, 16592.0], [32.0, 19538.0], [35.0, 21206.0], [34.0, 21518.0], [37.0, 21569.0], [36.0, 22444.0], [39.0, 20932.0], [38.0, 21257.0], [41.0, 22785.0], [40.0, 21901.0], [43.0, 22009.0], [42.0, 21230.0], [45.0, 21405.0], [47.0, 21506.0], [46.0, 21073.0], [49.0, 21209.0], [48.0, 21127.0], [51.0, 20833.0], [50.0, 20918.0], [53.0, 21588.0], [52.0, 20273.0], [57.0, 19281.0], [56.0, 22466.666666666668], [59.0, 22591.0], [58.0, 18816.0], [61.0, 21541.0], [60.0, 23974.0], [63.0, 19483.0], [62.0, 20073.0], [67.0, 22639.0], [66.0, 21641.0], [65.0, 23215.5], [64.0, 21539.0], [71.0, 19954.0], [70.0, 26314.0], [69.0, 25618.0], [68.0, 20668.0], [75.0, 19590.0], [74.0, 19694.0], [73.0, 23868.0], [72.0, 19599.0], [79.0, 22422.5], [77.0, 23196.5], [76.0, 24149.0], [83.0, 19368.0], [82.0, 22539.0], [81.0, 22633.0], [80.0, 24139.333333333332], [87.0, 24818.0], [86.0, 24294.0], [85.0, 24995.0], [84.0, 23926.5], [91.0, 22257.333333333332], [90.0, 23281.0], [89.0, 23076.666666666668], [88.0, 23351.0], [95.0, 20394.5], [94.0, 21426.0], [93.0, 21864.666666666668], [92.0, 21878.0], [99.0, 23487.19444444445], [98.0, 23269.04347826087], [97.0, 21654.25], [96.0, 22001.0], [100.0, 24062.128676470587], [1.0, 5334.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[94.56799999999998, 23567.30400000003]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2432.0, "minX": 1.59338562E12, "maxY": 9893.933333333332, "series": [{"data": [[1.5933858E12, 3698.6666666666665], [1.59338562E12, 2432.0], [1.59338574E12, 3242.6666666666665], [1.59338568E12, 3293.3333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5933858E12, 9893.933333333332], [1.59338562E12, 6505.6], [1.59338574E12, 8674.133333333333], [1.59338568E12, 8809.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933858E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22223.821917808236, "minX": 1.59338562E12, "maxY": 24801.330769230775, "series": [{"data": [[1.5933858E12, 22223.821917808236], [1.59338562E12, 24239.76562500002], [1.59338574E12, 23342.058593749996], [1.59338568E12, 24801.330769230775]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933858E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22223.777397260277, "minX": 1.59338562E12, "maxY": 24801.238461538458, "series": [{"data": [[1.5933858E12, 22223.777397260277], [1.59338562E12, 24239.57291666668], [1.59338574E12, 23341.953124999985], [1.59338568E12, 24801.238461538458]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933858E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5582191780821917, "minX": 1.59338562E12, "maxY": 14.880208333333321, "series": [{"data": [[1.5933858E12, 0.5582191780821917], [1.59338562E12, 14.880208333333321], [1.59338574E12, 0.6249999999999999], [1.59338568E12, 0.6961538461538456]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933858E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5334.0, "minX": 1.59338562E12, "maxY": 36075.0, "series": [{"data": [[1.5933858E12, 28652.0], [1.59338562E12, 36075.0], [1.59338574E12, 29823.0], [1.59338568E12, 34105.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5933858E12, 7898.993960740567], [1.59338562E12, 15690.662990843057], [1.59338574E12, 17303.891982598303], [1.59338568E12, 16494.927983074187]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5933858E12, 8047.193415703774], [1.59338562E12, 15725.229303662776], [1.59338574E12, 17369.581206960676], [1.59338568E12, 16558.820806770324]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5933858E12, 7981.326980370283], [1.59338562E12, 15709.86649542153], [1.59338574E12, 17340.385991299154], [1.59338568E12, 16530.423991537093]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.5933858E12, 5334.0], [1.59338562E12, 15544.0], [1.59338574E12, 16413.0], [1.59338568E12, 15767.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5933858E12, 22592.0], [1.59338562E12, 21195.5], [1.59338574E12, 23512.5], [1.59338568E12, 25711.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933858E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15156.5, "minX": 1.0, "maxY": 32378.5, "series": [{"data": [[8.0, 25524.0], [2.0, 22343.5], [9.0, 24675.0], [10.0, 24101.5], [11.0, 23377.0], [12.0, 24012.0], [3.0, 22622.0], [13.0, 23875.0], [14.0, 26901.0], [15.0, 32378.5], [16.0, 17639.0], [4.0, 22801.5], [1.0, 23570.5], [18.0, 31607.0], [5.0, 22259.5], [6.0, 23415.5], [7.0, 23023.5], [30.0, 15156.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15156.5, "minX": 1.0, "maxY": 32378.0, "series": [{"data": [[8.0, 25524.0], [2.0, 22343.0], [9.0, 24675.0], [10.0, 24101.5], [11.0, 23376.0], [12.0, 24012.0], [3.0, 22622.0], [13.0, 23875.0], [14.0, 26901.0], [15.0, 32378.0], [16.0, 17639.0], [4.0, 22801.5], [1.0, 23570.5], [18.0, 31607.0], [5.0, 22259.5], [6.0, 23415.5], [7.0, 23023.5], [30.0, 15156.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.59338556E12, "maxY": 4.333333333333333, "series": [{"data": [[1.5933858E12, 3.2], [1.59338562E12, 3.2], [1.59338556E12, 1.6666666666666667], [1.59338574E12, 4.266666666666667], [1.59338568E12, 4.333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933858E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.2, "minX": 1.59338562E12, "maxY": 4.866666666666666, "series": [{"data": [[1.5933858E12, 4.866666666666666], [1.59338562E12, 3.2], [1.59338574E12, 4.266666666666667], [1.59338568E12, 4.333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5933858E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.2, "minX": 1.59338562E12, "maxY": 4.866666666666666, "series": [{"data": [[1.5933858E12, 4.866666666666666], [1.59338562E12, 3.2], [1.59338574E12, 4.266666666666667], [1.59338568E12, 4.333333333333333]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933858E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.2, "minX": 1.59338562E12, "maxY": 4.866666666666666, "series": [{"data": [[1.5933858E12, 4.866666666666666], [1.59338562E12, 3.2], [1.59338574E12, 4.266666666666667], [1.59338568E12, 4.333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5933858E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

