/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 453.0, "minX": 0.0, "maxY": 21803.0, "series": [{"data": [[0.0, 453.0], [0.1, 739.0], [0.2, 1365.0], [0.3, 2214.0], [0.4, 2503.0], [0.5, 2675.0], [0.6, 3180.0], [0.7, 3230.0], [0.8, 3366.0], [0.9, 3614.0], [1.0, 3814.0], [1.1, 4149.0], [1.2, 4498.0], [1.3, 4948.0], [1.4, 5239.0], [1.5, 5406.0], [1.6, 5586.0], [1.7, 5884.0], [1.8, 6069.0], [1.9, 6135.0], [2.0, 6194.0], [2.1, 6230.0], [2.2, 6319.0], [2.3, 6445.0], [2.4, 6488.0], [2.5, 6549.0], [2.6, 6612.0], [2.7, 6685.0], [2.8, 6731.0], [2.9, 6821.0], [3.0, 6913.0], [3.1, 6957.0], [3.2, 7036.0], [3.3, 7059.0], [3.4, 7097.0], [3.5, 7123.0], [3.6, 7151.0], [3.7, 7183.0], [3.8, 7220.0], [3.9, 7261.0], [4.0, 7302.0], [4.1, 7355.0], [4.2, 7437.0], [4.3, 7530.0], [4.4, 7558.0], [4.5, 7583.0], [4.6, 7636.0], [4.7, 7655.0], [4.8, 7686.0], [4.9, 7731.0], [5.0, 7762.0], [5.1, 7791.0], [5.2, 7823.0], [5.3, 7857.0], [5.4, 7885.0], [5.5, 7912.0], [5.6, 7959.0], [5.7, 7996.0], [5.8, 8026.0], [5.9, 8038.0], [6.0, 8054.0], [6.1, 8080.0], [6.2, 8102.0], [6.3, 8169.0], [6.4, 8189.0], [6.5, 8207.0], [6.6, 8227.0], [6.7, 8268.0], [6.8, 8292.0], [6.9, 8314.0], [7.0, 8329.0], [7.1, 8356.0], [7.2, 8384.0], [7.3, 8401.0], [7.4, 8406.0], [7.5, 8433.0], [7.6, 8450.0], [7.7, 8454.0], [7.8, 8473.0], [7.9, 8496.0], [8.0, 8515.0], [8.1, 8544.0], [8.2, 8569.0], [8.3, 8587.0], [8.4, 8594.0], [8.5, 8604.0], [8.6, 8615.0], [8.7, 8631.0], [8.8, 8648.0], [8.9, 8658.0], [9.0, 8665.0], [9.1, 8676.0], [9.2, 8694.0], [9.3, 8710.0], [9.4, 8728.0], [9.5, 8740.0], [9.6, 8754.0], [9.7, 8761.0], [9.8, 8769.0], [9.9, 8798.0], [10.0, 8811.0], [10.1, 8827.0], [10.2, 8850.0], [10.3, 8866.0], [10.4, 8878.0], [10.5, 8886.0], [10.6, 8902.0], [10.7, 8931.0], [10.8, 8941.0], [10.9, 8957.0], [11.0, 8959.0], [11.1, 8975.0], [11.2, 8981.0], [11.3, 8993.0], [11.4, 9009.0], [11.5, 9014.0], [11.6, 9026.0], [11.7, 9034.0], [11.8, 9051.0], [11.9, 9060.0], [12.0, 9072.0], [12.1, 9080.0], [12.2, 9099.0], [12.3, 9114.0], [12.4, 9126.0], [12.5, 9147.0], [12.6, 9161.0], [12.7, 9181.0], [12.8, 9192.0], [12.9, 9200.0], [13.0, 9207.0], [13.1, 9228.0], [13.2, 9241.0], [13.3, 9247.0], [13.4, 9261.0], [13.5, 9285.0], [13.6, 9300.0], [13.7, 9307.0], [13.8, 9318.0], [13.9, 9325.0], [14.0, 9337.0], [14.1, 9357.0], [14.2, 9376.0], [14.3, 9389.0], [14.4, 9397.0], [14.5, 9404.0], [14.6, 9423.0], [14.7, 9430.0], [14.8, 9433.0], [14.9, 9445.0], [15.0, 9448.0], [15.1, 9456.0], [15.2, 9459.0], [15.3, 9478.0], [15.4, 9480.0], [15.5, 9486.0], [15.6, 9491.0], [15.7, 9497.0], [15.8, 9501.0], [15.9, 9510.0], [16.0, 9521.0], [16.1, 9531.0], [16.2, 9541.0], [16.3, 9547.0], [16.4, 9554.0], [16.5, 9559.0], [16.6, 9562.0], [16.7, 9576.0], [16.8, 9580.0], [16.9, 9586.0], [17.0, 9591.0], [17.1, 9597.0], [17.2, 9603.0], [17.3, 9606.0], [17.4, 9619.0], [17.5, 9625.0], [17.6, 9631.0], [17.7, 9636.0], [17.8, 9646.0], [17.9, 9648.0], [18.0, 9655.0], [18.1, 9661.0], [18.2, 9666.0], [18.3, 9671.0], [18.4, 9683.0], [18.5, 9693.0], [18.6, 9694.0], [18.7, 9703.0], [18.8, 9717.0], [18.9, 9735.0], [19.0, 9736.0], [19.1, 9741.0], [19.2, 9750.0], [19.3, 9756.0], [19.4, 9762.0], [19.5, 9768.0], [19.6, 9772.0], [19.7, 9792.0], [19.8, 9798.0], [19.9, 9805.0], [20.0, 9810.0], [20.1, 9811.0], [20.2, 9817.0], [20.3, 9833.0], [20.4, 9846.0], [20.5, 9848.0], [20.6, 9856.0], [20.7, 9860.0], [20.8, 9869.0], [20.9, 9874.0], [21.0, 9882.0], [21.1, 9890.0], [21.2, 9897.0], [21.3, 9903.0], [21.4, 9905.0], [21.5, 9911.0], [21.6, 9917.0], [21.7, 9925.0], [21.8, 9930.0], [21.9, 9942.0], [22.0, 9947.0], [22.1, 9951.0], [22.2, 9953.0], [22.3, 9961.0], [22.4, 9965.0], [22.5, 9968.0], [22.6, 9972.0], [22.7, 9976.0], [22.8, 9981.0], [22.9, 9983.0], [23.0, 9992.0], [23.1, 10003.0], [23.2, 10012.0], [23.3, 10018.0], [23.4, 10026.0], [23.5, 10030.0], [23.6, 10039.0], [23.7, 10047.0], [23.8, 10055.0], [23.9, 10062.0], [24.0, 10070.0], [24.1, 10074.0], [24.2, 10084.0], [24.3, 10087.0], [24.4, 10095.0], [24.5, 10097.0], [24.6, 10098.0], [24.7, 10103.0], [24.8, 10110.0], [24.9, 10120.0], [25.0, 10128.0], [25.1, 10133.0], [25.2, 10141.0], [25.3, 10149.0], [25.4, 10158.0], [25.5, 10163.0], [25.6, 10165.0], [25.7, 10168.0], [25.8, 10175.0], [25.9, 10181.0], [26.0, 10184.0], [26.1, 10192.0], [26.2, 10196.0], [26.3, 10200.0], [26.4, 10208.0], [26.5, 10211.0], [26.6, 10215.0], [26.7, 10223.0], [26.8, 10227.0], [26.9, 10231.0], [27.0, 10234.0], [27.1, 10240.0], [27.2, 10247.0], [27.3, 10253.0], [27.4, 10263.0], [27.5, 10278.0], [27.6, 10284.0], [27.7, 10289.0], [27.8, 10292.0], [27.9, 10294.0], [28.0, 10299.0], [28.1, 10303.0], [28.2, 10306.0], [28.3, 10310.0], [28.4, 10316.0], [28.5, 10326.0], [28.6, 10333.0], [28.7, 10336.0], [28.8, 10352.0], [28.9, 10357.0], [29.0, 10361.0], [29.1, 10364.0], [29.2, 10371.0], [29.3, 10379.0], [29.4, 10384.0], [29.5, 10388.0], [29.6, 10394.0], [29.7, 10400.0], [29.8, 10406.0], [29.9, 10411.0], [30.0, 10421.0], [30.1, 10429.0], [30.2, 10436.0], [30.3, 10439.0], [30.4, 10443.0], [30.5, 10445.0], [30.6, 10449.0], [30.7, 10455.0], [30.8, 10474.0], [30.9, 10478.0], [31.0, 10483.0], [31.1, 10487.0], [31.2, 10497.0], [31.3, 10502.0], [31.4, 10512.0], [31.5, 10535.0], [31.6, 10544.0], [31.7, 10552.0], [31.8, 10563.0], [31.9, 10576.0], [32.0, 10580.0], [32.1, 10583.0], [32.2, 10588.0], [32.3, 10592.0], [32.4, 10596.0], [32.5, 10600.0], [32.6, 10601.0], [32.7, 10602.0], [32.8, 10611.0], [32.9, 10613.0], [33.0, 10618.0], [33.1, 10626.0], [33.2, 10637.0], [33.3, 10642.0], [33.4, 10649.0], [33.5, 10653.0], [33.6, 10660.0], [33.7, 10669.0], [33.8, 10680.0], [33.9, 10687.0], [34.0, 10694.0], [34.1, 10704.0], [34.2, 10716.0], [34.3, 10723.0], [34.4, 10729.0], [34.5, 10732.0], [34.6, 10736.0], [34.7, 10738.0], [34.8, 10744.0], [34.9, 10752.0], [35.0, 10766.0], [35.1, 10774.0], [35.2, 10780.0], [35.3, 10788.0], [35.4, 10793.0], [35.5, 10802.0], [35.6, 10805.0], [35.7, 10812.0], [35.8, 10826.0], [35.9, 10830.0], [36.0, 10834.0], [36.1, 10842.0], [36.2, 10845.0], [36.3, 10850.0], [36.4, 10856.0], [36.5, 10866.0], [36.6, 10876.0], [36.7, 10877.0], [36.8, 10877.0], [36.9, 10882.0], [37.0, 10892.0], [37.1, 10899.0], [37.2, 10904.0], [37.3, 10914.0], [37.4, 10918.0], [37.5, 10922.0], [37.6, 10934.0], [37.7, 10940.0], [37.8, 10954.0], [37.9, 10958.0], [38.0, 10963.0], [38.1, 10969.0], [38.2, 10972.0], [38.3, 10981.0], [38.4, 10982.0], [38.5, 10992.0], [38.6, 10996.0], [38.7, 11001.0], [38.8, 11005.0], [38.9, 11007.0], [39.0, 11015.0], [39.1, 11021.0], [39.2, 11025.0], [39.3, 11029.0], [39.4, 11032.0], [39.5, 11040.0], [39.6, 11051.0], [39.7, 11056.0], [39.8, 11060.0], [39.9, 11067.0], [40.0, 11072.0], [40.1, 11078.0], [40.2, 11085.0], [40.3, 11088.0], [40.4, 11095.0], [40.5, 11099.0], [40.6, 11103.0], [40.7, 11106.0], [40.8, 11113.0], [40.9, 11119.0], [41.0, 11126.0], [41.1, 11130.0], [41.2, 11137.0], [41.3, 11145.0], [41.4, 11150.0], [41.5, 11158.0], [41.6, 11165.0], [41.7, 11173.0], [41.8, 11178.0], [41.9, 11184.0], [42.0, 11195.0], [42.1, 11200.0], [42.2, 11210.0], [42.3, 11214.0], [42.4, 11216.0], [42.5, 11219.0], [42.6, 11221.0], [42.7, 11223.0], [42.8, 11228.0], [42.9, 11233.0], [43.0, 11237.0], [43.1, 11242.0], [43.2, 11255.0], [43.3, 11262.0], [43.4, 11268.0], [43.5, 11273.0], [43.6, 11280.0], [43.7, 11285.0], [43.8, 11292.0], [43.9, 11297.0], [44.0, 11302.0], [44.1, 11306.0], [44.2, 11309.0], [44.3, 11312.0], [44.4, 11322.0], [44.5, 11340.0], [44.6, 11348.0], [44.7, 11352.0], [44.8, 11359.0], [44.9, 11366.0], [45.0, 11376.0], [45.1, 11377.0], [45.2, 11385.0], [45.3, 11390.0], [45.4, 11394.0], [45.5, 11396.0], [45.6, 11410.0], [45.7, 11414.0], [45.8, 11418.0], [45.9, 11429.0], [46.0, 11433.0], [46.1, 11437.0], [46.2, 11438.0], [46.3, 11454.0], [46.4, 11455.0], [46.5, 11461.0], [46.6, 11464.0], [46.7, 11473.0], [46.8, 11477.0], [46.9, 11486.0], [47.0, 11489.0], [47.1, 11494.0], [47.2, 11505.0], [47.3, 11508.0], [47.4, 11515.0], [47.5, 11524.0], [47.6, 11528.0], [47.7, 11533.0], [47.8, 11540.0], [47.9, 11551.0], [48.0, 11559.0], [48.1, 11563.0], [48.2, 11567.0], [48.3, 11572.0], [48.4, 11583.0], [48.5, 11592.0], [48.6, 11596.0], [48.7, 11599.0], [48.8, 11602.0], [48.9, 11605.0], [49.0, 11610.0], [49.1, 11619.0], [49.2, 11622.0], [49.3, 11627.0], [49.4, 11638.0], [49.5, 11646.0], [49.6, 11656.0], [49.7, 11662.0], [49.8, 11666.0], [49.9, 11670.0], [50.0, 11680.0], [50.1, 11687.0], [50.2, 11691.0], [50.3, 11695.0], [50.4, 11704.0], [50.5, 11710.0], [50.6, 11713.0], [50.7, 11718.0], [50.8, 11725.0], [50.9, 11727.0], [51.0, 11732.0], [51.1, 11737.0], [51.2, 11742.0], [51.3, 11748.0], [51.4, 11750.0], [51.5, 11753.0], [51.6, 11756.0], [51.7, 11766.0], [51.8, 11769.0], [51.9, 11779.0], [52.0, 11781.0], [52.1, 11782.0], [52.2, 11788.0], [52.3, 11792.0], [52.4, 11799.0], [52.5, 11802.0], [52.6, 11804.0], [52.7, 11807.0], [52.8, 11817.0], [52.9, 11828.0], [53.0, 11835.0], [53.1, 11841.0], [53.2, 11845.0], [53.3, 11852.0], [53.4, 11856.0], [53.5, 11858.0], [53.6, 11863.0], [53.7, 11865.0], [53.8, 11868.0], [53.9, 11874.0], [54.0, 11885.0], [54.1, 11892.0], [54.2, 11897.0], [54.3, 11903.0], [54.4, 11908.0], [54.5, 11918.0], [54.6, 11925.0], [54.7, 11931.0], [54.8, 11937.0], [54.9, 11938.0], [55.0, 11944.0], [55.1, 11945.0], [55.2, 11951.0], [55.3, 11959.0], [55.4, 11965.0], [55.5, 11973.0], [55.6, 11978.0], [55.7, 11982.0], [55.8, 11986.0], [55.9, 11988.0], [56.0, 11991.0], [56.1, 12001.0], [56.2, 12005.0], [56.3, 12009.0], [56.4, 12014.0], [56.5, 12016.0], [56.6, 12020.0], [56.7, 12024.0], [56.8, 12027.0], [56.9, 12033.0], [57.0, 12036.0], [57.1, 12043.0], [57.2, 12048.0], [57.3, 12052.0], [57.4, 12058.0], [57.5, 12069.0], [57.6, 12082.0], [57.7, 12086.0], [57.8, 12093.0], [57.9, 12099.0], [58.0, 12104.0], [58.1, 12107.0], [58.2, 12113.0], [58.3, 12118.0], [58.4, 12126.0], [58.5, 12128.0], [58.6, 12138.0], [58.7, 12148.0], [58.8, 12155.0], [58.9, 12159.0], [59.0, 12164.0], [59.1, 12173.0], [59.2, 12180.0], [59.3, 12189.0], [59.4, 12196.0], [59.5, 12205.0], [59.6, 12214.0], [59.7, 12220.0], [59.8, 12221.0], [59.9, 12225.0], [60.0, 12228.0], [60.1, 12234.0], [60.2, 12243.0], [60.3, 12248.0], [60.4, 12251.0], [60.5, 12258.0], [60.6, 12264.0], [60.7, 12271.0], [60.8, 12275.0], [60.9, 12284.0], [61.0, 12294.0], [61.1, 12301.0], [61.2, 12305.0], [61.3, 12319.0], [61.4, 12322.0], [61.5, 12334.0], [61.6, 12341.0], [61.7, 12349.0], [61.8, 12356.0], [61.9, 12361.0], [62.0, 12365.0], [62.1, 12382.0], [62.2, 12388.0], [62.3, 12400.0], [62.4, 12414.0], [62.5, 12419.0], [62.6, 12424.0], [62.7, 12431.0], [62.8, 12433.0], [62.9, 12442.0], [63.0, 12445.0], [63.1, 12453.0], [63.2, 12457.0], [63.3, 12468.0], [63.4, 12472.0], [63.5, 12478.0], [63.6, 12483.0], [63.7, 12493.0], [63.8, 12495.0], [63.9, 12500.0], [64.0, 12508.0], [64.1, 12523.0], [64.2, 12541.0], [64.3, 12545.0], [64.4, 12548.0], [64.5, 12561.0], [64.6, 12563.0], [64.7, 12568.0], [64.8, 12571.0], [64.9, 12573.0], [65.0, 12580.0], [65.1, 12591.0], [65.2, 12597.0], [65.3, 12599.0], [65.4, 12604.0], [65.5, 12611.0], [65.6, 12628.0], [65.7, 12636.0], [65.8, 12641.0], [65.9, 12643.0], [66.0, 12649.0], [66.1, 12651.0], [66.2, 12663.0], [66.3, 12665.0], [66.4, 12673.0], [66.5, 12675.0], [66.6, 12680.0], [66.7, 12692.0], [66.8, 12703.0], [66.9, 12707.0], [67.0, 12711.0], [67.1, 12726.0], [67.2, 12732.0], [67.3, 12742.0], [67.4, 12763.0], [67.5, 12766.0], [67.6, 12770.0], [67.7, 12777.0], [67.8, 12789.0], [67.9, 12795.0], [68.0, 12801.0], [68.1, 12805.0], [68.2, 12809.0], [68.3, 12811.0], [68.4, 12819.0], [68.5, 12828.0], [68.6, 12836.0], [68.7, 12840.0], [68.8, 12844.0], [68.9, 12847.0], [69.0, 12848.0], [69.1, 12864.0], [69.2, 12868.0], [69.3, 12872.0], [69.4, 12876.0], [69.5, 12879.0], [69.6, 12888.0], [69.7, 12895.0], [69.8, 12903.0], [69.9, 12911.0], [70.0, 12917.0], [70.1, 12932.0], [70.2, 12937.0], [70.3, 12943.0], [70.4, 12954.0], [70.5, 12967.0], [70.6, 12973.0], [70.7, 12986.0], [70.8, 12992.0], [70.9, 12998.0], [71.0, 13011.0], [71.1, 13019.0], [71.2, 13027.0], [71.3, 13033.0], [71.4, 13038.0], [71.5, 13046.0], [71.6, 13059.0], [71.7, 13063.0], [71.8, 13066.0], [71.9, 13072.0], [72.0, 13077.0], [72.1, 13082.0], [72.2, 13092.0], [72.3, 13101.0], [72.4, 13104.0], [72.5, 13114.0], [72.6, 13137.0], [72.7, 13147.0], [72.8, 13153.0], [72.9, 13159.0], [73.0, 13164.0], [73.1, 13168.0], [73.2, 13173.0], [73.3, 13177.0], [73.4, 13181.0], [73.5, 13196.0], [73.6, 13206.0], [73.7, 13214.0], [73.8, 13218.0], [73.9, 13222.0], [74.0, 13226.0], [74.1, 13239.0], [74.2, 13242.0], [74.3, 13244.0], [74.4, 13250.0], [74.5, 13256.0], [74.6, 13264.0], [74.7, 13269.0], [74.8, 13275.0], [74.9, 13283.0], [75.0, 13287.0], [75.1, 13290.0], [75.2, 13295.0], [75.3, 13305.0], [75.4, 13316.0], [75.5, 13330.0], [75.6, 13333.0], [75.7, 13340.0], [75.8, 13351.0], [75.9, 13362.0], [76.0, 13380.0], [76.1, 13398.0], [76.2, 13407.0], [76.3, 13410.0], [76.4, 13418.0], [76.5, 13424.0], [76.6, 13432.0], [76.7, 13440.0], [76.8, 13447.0], [76.9, 13462.0], [77.0, 13474.0], [77.1, 13477.0], [77.2, 13489.0], [77.3, 13499.0], [77.4, 13507.0], [77.5, 13513.0], [77.6, 13520.0], [77.7, 13525.0], [77.8, 13539.0], [77.9, 13544.0], [78.0, 13559.0], [78.1, 13563.0], [78.2, 13570.0], [78.3, 13579.0], [78.4, 13591.0], [78.5, 13600.0], [78.6, 13607.0], [78.7, 13619.0], [78.8, 13622.0], [78.9, 13635.0], [79.0, 13649.0], [79.1, 13654.0], [79.2, 13662.0], [79.3, 13667.0], [79.4, 13679.0], [79.5, 13688.0], [79.6, 13705.0], [79.7, 13721.0], [79.8, 13734.0], [79.9, 13738.0], [80.0, 13755.0], [80.1, 13762.0], [80.2, 13765.0], [80.3, 13769.0], [80.4, 13786.0], [80.5, 13796.0], [80.6, 13803.0], [80.7, 13806.0], [80.8, 13820.0], [80.9, 13824.0], [81.0, 13835.0], [81.1, 13846.0], [81.2, 13854.0], [81.3, 13870.0], [81.4, 13883.0], [81.5, 13891.0], [81.6, 13894.0], [81.7, 13902.0], [81.8, 13912.0], [81.9, 13926.0], [82.0, 13935.0], [82.1, 13942.0], [82.2, 13965.0], [82.3, 13968.0], [82.4, 13980.0], [82.5, 13990.0], [82.6, 13996.0], [82.7, 13997.0], [82.8, 14009.0], [82.9, 14016.0], [83.0, 14022.0], [83.1, 14035.0], [83.2, 14045.0], [83.3, 14057.0], [83.4, 14062.0], [83.5, 14076.0], [83.6, 14084.0], [83.7, 14107.0], [83.8, 14117.0], [83.9, 14136.0], [84.0, 14143.0], [84.1, 14150.0], [84.2, 14167.0], [84.3, 14175.0], [84.4, 14197.0], [84.5, 14224.0], [84.6, 14230.0], [84.7, 14231.0], [84.8, 14237.0], [84.9, 14244.0], [85.0, 14260.0], [85.1, 14266.0], [85.2, 14272.0], [85.3, 14286.0], [85.4, 14300.0], [85.5, 14306.0], [85.6, 14314.0], [85.7, 14319.0], [85.8, 14330.0], [85.9, 14333.0], [86.0, 14336.0], [86.1, 14347.0], [86.2, 14358.0], [86.3, 14372.0], [86.4, 14382.0], [86.5, 14401.0], [86.6, 14412.0], [86.7, 14422.0], [86.8, 14431.0], [86.9, 14436.0], [87.0, 14460.0], [87.1, 14471.0], [87.2, 14480.0], [87.3, 14490.0], [87.4, 14505.0], [87.5, 14521.0], [87.6, 14526.0], [87.7, 14544.0], [87.8, 14556.0], [87.9, 14567.0], [88.0, 14587.0], [88.1, 14595.0], [88.2, 14607.0], [88.3, 14618.0], [88.4, 14624.0], [88.5, 14632.0], [88.6, 14647.0], [88.7, 14656.0], [88.8, 14664.0], [88.9, 14673.0], [89.0, 14690.0], [89.1, 14704.0], [89.2, 14714.0], [89.3, 14736.0], [89.4, 14746.0], [89.5, 14766.0], [89.6, 14781.0], [89.7, 14822.0], [89.8, 14833.0], [89.9, 14849.0], [90.0, 14866.0], [90.1, 14872.0], [90.2, 14878.0], [90.3, 14894.0], [90.4, 14906.0], [90.5, 14914.0], [90.6, 14929.0], [90.7, 14944.0], [90.8, 14949.0], [90.9, 14960.0], [91.0, 14977.0], [91.1, 14988.0], [91.2, 15003.0], [91.3, 15019.0], [91.4, 15039.0], [91.5, 15054.0], [91.6, 15067.0], [91.7, 15074.0], [91.8, 15093.0], [91.9, 15113.0], [92.0, 15130.0], [92.1, 15140.0], [92.2, 15170.0], [92.3, 15200.0], [92.4, 15214.0], [92.5, 15231.0], [92.6, 15250.0], [92.7, 15262.0], [92.8, 15276.0], [92.9, 15301.0], [93.0, 15329.0], [93.1, 15356.0], [93.2, 15392.0], [93.3, 15407.0], [93.4, 15449.0], [93.5, 15464.0], [93.6, 15476.0], [93.7, 15500.0], [93.8, 15520.0], [93.9, 15548.0], [94.0, 15575.0], [94.1, 15617.0], [94.2, 15641.0], [94.3, 15653.0], [94.4, 15672.0], [94.5, 15693.0], [94.6, 15709.0], [94.7, 15738.0], [94.8, 15790.0], [94.9, 15804.0], [95.0, 15843.0], [95.1, 15852.0], [95.2, 15885.0], [95.3, 15906.0], [95.4, 15951.0], [95.5, 15986.0], [95.6, 16008.0], [95.7, 16023.0], [95.8, 16035.0], [95.9, 16055.0], [96.0, 16075.0], [96.1, 16109.0], [96.2, 16119.0], [96.3, 16185.0], [96.4, 16216.0], [96.5, 16236.0], [96.6, 16317.0], [96.7, 16363.0], [96.8, 16389.0], [96.9, 16421.0], [97.0, 16436.0], [97.1, 16476.0], [97.2, 16535.0], [97.3, 16597.0], [97.4, 16684.0], [97.5, 16762.0], [97.6, 16798.0], [97.7, 16838.0], [97.8, 16888.0], [97.9, 16959.0], [98.0, 16973.0], [98.1, 17015.0], [98.2, 17100.0], [98.3, 17167.0], [98.4, 17208.0], [98.5, 17306.0], [98.6, 17427.0], [98.7, 17613.0], [98.8, 17741.0], [98.9, 17849.0], [99.0, 17905.0], [99.1, 18003.0], [99.2, 18128.0], [99.3, 18158.0], [99.4, 18231.0], [99.5, 18446.0], [99.6, 18547.0], [99.7, 19123.0], [99.8, 19619.0], [99.9, 20234.0], [100.0, 21803.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 83.0, "series": [{"data": [[400.0, 1.0], [500.0, 2.0], [600.0, 1.0], [700.0, 2.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1700.0, 2.0], [2100.0, 1.0], [2300.0, 1.0], [2200.0, 2.0], [2500.0, 1.0], [2600.0, 4.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3200.0, 6.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 4.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 2.0], [4400.0, 2.0], [4500.0, 1.0], [4800.0, 1.0], [4700.0, 1.0], [5000.0, 1.0], [4900.0, 3.0], [5300.0, 3.0], [5200.0, 1.0], [5400.0, 3.0], [5500.0, 2.0], [5600.0, 2.0], [5800.0, 2.0], [5700.0, 1.0], [6100.0, 8.0], [6000.0, 3.0], [5900.0, 1.0], [6200.0, 6.0], [6300.0, 3.0], [6500.0, 7.0], [6600.0, 6.0], [6400.0, 6.0], [6700.0, 6.0], [6800.0, 3.0], [6900.0, 7.0], [7000.0, 11.0], [7100.0, 12.0], [7300.0, 9.0], [7200.0, 10.0], [7400.0, 3.0], [7500.0, 10.0], [7600.0, 13.0], [7700.0, 10.0], [7800.0, 15.0], [7900.0, 9.0], [8100.0, 10.0], [8000.0, 18.0], [8200.0, 16.0], [8300.0, 19.0], [8400.0, 25.0], [8700.0, 28.0], [8500.0, 22.0], [8600.0, 30.0], [8900.0, 31.0], [8800.0, 26.0], [9000.0, 35.0], [9200.0, 28.0], [9100.0, 27.0], [9300.0, 34.0], [9500.0, 54.0], [9700.0, 47.0], [9600.0, 61.0], [9400.0, 54.0], [10200.0, 70.0], [10100.0, 66.0], [10000.0, 61.0], [9800.0, 56.0], [9900.0, 75.0], [10300.0, 66.0], [10400.0, 64.0], [10500.0, 48.0], [10700.0, 56.0], [10600.0, 64.0], [10800.0, 67.0], [11000.0, 73.0], [11100.0, 61.0], [11200.0, 77.0], [10900.0, 62.0], [11700.0, 83.0], [11300.0, 62.0], [11600.0, 65.0], [11500.0, 62.0], [11400.0, 66.0], [11800.0, 74.0], [12000.0, 74.0], [12200.0, 67.0], [11900.0, 72.0], [12100.0, 60.0], [12600.0, 57.0], [12700.0, 49.0], [12400.0, 65.0], [12500.0, 57.0], [12300.0, 47.0], [12800.0, 71.0], [12900.0, 47.0], [13100.0, 50.0], [13300.0, 34.0], [13200.0, 69.0], [13000.0, 55.0], [13800.0, 44.0], [13700.0, 40.0], [13600.0, 42.0], [13500.0, 47.0], [13400.0, 48.0], [14000.0, 38.0], [13900.0, 43.0], [14300.0, 44.0], [14200.0, 39.0], [14100.0, 29.0], [14800.0, 28.0], [14700.0, 23.0], [14400.0, 35.0], [14600.0, 39.0], [14500.0, 30.0], [14900.0, 33.0], [15200.0, 25.0], [15000.0, 26.0], [15100.0, 17.0], [15300.0, 15.0], [15400.0, 17.0], [15800.0, 17.0], [15600.0, 19.0], [15500.0, 14.0], [15700.0, 13.0], [16000.0, 22.0], [16100.0, 12.0], [16200.0, 8.0], [16300.0, 9.0], [15900.0, 11.0], [16600.0, 6.0], [16500.0, 6.0], [16400.0, 14.0], [16800.0, 8.0], [16900.0, 8.0], [17000.0, 6.0], [17100.0, 7.0], [16700.0, 7.0], [17200.0, 5.0], [17400.0, 5.0], [17300.0, 2.0], [17900.0, 4.0], [17800.0, 5.0], [18200.0, 3.0], [17700.0, 4.0], [17600.0, 4.0], [18400.0, 5.0], [18100.0, 6.0], [18000.0, 4.0], [18500.0, 3.0], [18600.0, 2.0], [19200.0, 1.0], [18800.0, 1.0], [19100.0, 2.0], [19800.0, 2.0], [20300.0, 1.0], [19600.0, 1.0], [20200.0, 1.0], [20000.0, 1.0], [19500.0, 1.0], [20500.0, 1.0], [21300.0, 1.0], [21800.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3991.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3991.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 71.79056047197639, "minX": 1.59329478E12, "maxY": 100.0, "series": [{"data": [[1.59329514E12, 100.0], [1.59329496E12, 100.0], [1.59329502E12, 100.0], [1.59329484E12, 100.0], [1.5932949E12, 100.0], [1.5932952E12, 100.0], [1.59329478E12, 100.0], [1.59329526E12, 71.79056047197639], [1.59329508E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329526E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 506.0, "minX": 1.0, "maxY": 17475.333333333332, "series": [{"data": [[2.0, 580.0], [3.0, 769.0], [4.0, 506.0], [5.0, 1122.0], [6.0, 739.0], [7.0, 2668.5], [8.0, 3317.5], [9.0, 2169.0], [10.0, 2296.0], [11.0, 3660.0], [12.0, 3180.0], [13.0, 2248.0], [14.0, 3348.0], [15.0, 7048.0], [16.0, 3951.0], [17.0, 6135.0], [18.0, 3289.5], [19.0, 5239.0], [20.0, 3816.0], [21.0, 3234.0], [22.0, 12651.0], [23.0, 7298.0], [24.0, 5466.0], [25.0, 5329.0], [26.0, 11607.2], [27.0, 6472.0], [28.0, 5636.0], [29.0, 9717.333333333334], [30.0, 8072.666666666667], [31.0, 5994.0], [33.0, 5986.0], [32.0, 4256.5], [35.0, 7559.0], [34.0, 6413.0], [37.0, 8509.333333333334], [36.0, 3814.0], [39.0, 12997.0], [38.0, 6565.0], [41.0, 9295.5], [40.0, 5196.0], [43.0, 11183.0], [42.0, 4498.0], [45.0, 15056.0], [44.0, 6048.0], [47.0, 12566.0], [46.0, 6781.0], [49.0, 9024.0], [48.0, 9937.0], [51.0, 10473.333333333334], [50.0, 10403.0], [53.0, 10498.5], [52.0, 11436.0], [55.0, 10139.0], [54.0, 11659.333333333334], [57.0, 10844.0], [56.0, 10110.0], [59.0, 11387.0], [58.0, 6230.0], [61.0, 11537.333333333334], [60.0, 8587.5], [63.0, 14480.0], [62.0, 6341.0], [67.0, 11493.25], [66.0, 10780.0], [65.0, 9521.0], [64.0, 12076.0], [71.0, 11633.0], [70.0, 12055.0], [69.0, 10903.333333333334], [68.0, 12350.4], [75.0, 12196.142857142857], [74.0, 12521.57142857143], [73.0, 16667.0], [72.0, 11888.666666666666], [79.0, 11366.0], [78.0, 9898.0], [77.0, 10163.0], [76.0, 17475.333333333332], [83.0, 12307.0], [82.0, 13475.333333333332], [81.0, 10331.0], [80.0, 10112.5], [87.0, 6464.0], [86.0, 7563.5], [85.0, 12243.75], [84.0, 11478.2], [91.0, 14359.0], [90.0, 13229.466666666665], [89.0, 11620.0], [88.0, 11746.5], [95.0, 12674.666666666666], [94.0, 10876.0], [93.0, 11946.5], [92.0, 12827.666666666668], [99.0, 9952.0], [98.0, 7115.0], [97.0, 8635.0], [96.0, 12914.384615384615], [100.0, 11797.800855386251], [1.0, 556.5]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[97.60924999999996, 11697.503999999988]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 634.6666666666666, "minX": 1.59329478E12, "maxY": 16715.6, "series": [{"data": [[1.59329514E12, 15375.8], [1.59329496E12, 16715.6], [1.59329502E12, 15918.1], [1.59329484E12, 16077.6], [1.5932949E12, 16715.6], [1.5932952E12, 15343.9], [1.59329478E12, 4338.4], [1.59329526E12, 10814.1], [1.59329508E12, 16300.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59329514E12, 2249.3333333333335], [1.59329496E12, 2445.3333333333335], [1.59329502E12, 2328.6666666666665], [1.59329484E12, 2352.0], [1.5932949E12, 2445.3333333333335], [1.5932952E12, 2244.6666666666665], [1.59329478E12, 634.6666666666666], [1.59329526E12, 1582.0], [1.59329508E12, 2384.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329526E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8823.139705882355, "minX": 1.59329478E12, "maxY": 12653.987525987526, "series": [{"data": [[1.59329514E12, 12152.302904564316], [1.59329496E12, 11441.681297709922], [1.59329502E12, 12047.356713426867], [1.59329484E12, 11760.430555555553], [1.5932949E12, 11399.458015267162], [1.5932952E12, 12653.987525987526], [1.59329478E12, 8823.139705882355], [1.59329526E12, 10888.088495575224], [1.59329508E12, 11834.410958904115]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329526E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8823.0, "minX": 1.59329478E12, "maxY": 12653.93555093556, "series": [{"data": [[1.59329514E12, 12152.265560165974], [1.59329496E12, 11441.624045801549], [1.59329502E12, 12047.314629258519], [1.59329484E12, 11760.329365079357], [1.5932949E12, 11399.400763358779], [1.5932952E12, 12653.93555093556], [1.59329478E12, 8823.0], [1.59329526E12, 10888.041297935099], [1.59329508E12, 11834.36594911937]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329526E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1547619047619048, "minX": 1.59329478E12, "maxY": 19.22058823529412, "series": [{"data": [[1.59329514E12, 0.28423236514522837], [1.59329496E12, 0.2690839694656486], [1.59329502E12, 0.3907815631262521], [1.59329484E12, 0.1547619047619048], [1.5932949E12, 0.25190839694656547], [1.5932952E12, 0.26403326403326427], [1.59329478E12, 19.22058823529412], [1.59329526E12, 0.21828908554572268], [1.59329508E12, 0.279843444227006]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329526E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 453.0, "minX": 1.59329478E12, "maxY": 21803.0, "series": [{"data": [[1.59329514E12, 20545.0], [1.59329496E12, 18547.0], [1.59329502E12, 18209.0], [1.59329484E12, 19834.0], [1.5932949E12, 17007.0], [1.5932952E12, 20234.0], [1.59329478E12, 16194.0], [1.59329526E12, 21803.0], [1.59329508E12, 20372.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59329514E12, 7076.636991823912], [1.59329496E12, 6449.6749620735645], [1.59329502E12, 7397.999941110611], [1.59329484E12, 7533.969967973232], [1.5932949E12, 6692.949957191944], [1.5932952E12, 7264.177979199886], [1.59329478E12, 1246.1149949371816], [1.59329526E12, 584.7999935150146], [1.59329508E12, 7188.639990234375]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59329514E12, 7107.500703270435], [1.59329496E12, 6572.1050099134445], [1.59329502E12, 7620.300023555756], [1.59329484E12, 7654.867012810707], [1.5932949E12, 6818.205007910728], [1.5932952E12, 7342.695808320045], [1.59329478E12, 1265.2265020251275], [1.59329526E12, 609.2800025939941], [1.59329508E12, 7224.678403320312]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59329514E12, 7093.7834959119555], [1.59329496E12, 6529.212481036782], [1.59329502E12, 7521.4999705553055], [1.59329484E12, 7601.134983986616], [1.5932949E12, 6782.724978595972], [1.5932952E12, 7307.7989895999435], [1.59329478E12, 1256.7324974685907], [1.59329526E12, 598.3999967575073], [1.59329508E12, 7209.1199951171875]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59329514E12, 6656.0], [1.59329496E12, 5886.0], [1.59329502E12, 6319.0], [1.59329484E12, 6971.0], [1.5932949E12, 5390.0], [1.5932952E12, 6613.0], [1.59329478E12, 1210.0], [1.59329526E12, 453.0], [1.59329508E12, 6462.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59329514E12, 11945.5], [1.59329496E12, 11270.5], [1.59329502E12, 11924.0], [1.59329484E12, 11710.5], [1.5932949E12, 11282.0], [1.5932952E12, 12520.0], [1.59329478E12, 8397.5], [1.59329526E12, 11322.0], [1.59329508E12, 11678.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329526E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10576.0, "minX": 1.0, "maxY": 12281.5, "series": [{"data": [[2.0, 11026.5], [8.0, 11656.0], [9.0, 11515.0], [10.0, 11761.5], [11.0, 11983.0], [12.0, 11844.0], [3.0, 12004.5], [13.0, 11417.0], [14.0, 11703.0], [15.0, 12128.0], [1.0, 10576.0], [4.0, 11362.5], [16.0, 12281.5], [17.0, 11385.0], [18.0, 11365.0], [19.0, 11474.0], [5.0, 11836.0], [20.0, 10611.5], [21.0, 11781.0], [22.0, 10880.5], [23.0, 10694.0], [6.0, 11597.0], [7.0, 11606.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10576.0, "minX": 1.0, "maxY": 12281.5, "series": [{"data": [[2.0, 11026.5], [8.0, 11656.0], [9.0, 11514.0], [10.0, 11761.5], [11.0, 11982.0], [12.0, 11844.0], [3.0, 12004.5], [13.0, 11417.0], [14.0, 11703.0], [15.0, 12127.0], [1.0, 10576.0], [4.0, 11362.5], [16.0, 12281.5], [17.0, 11385.0], [18.0, 11365.0], [19.0, 11474.0], [5.0, 11836.0], [20.0, 10611.5], [21.0, 11781.0], [22.0, 10880.5], [23.0, 10694.0], [6.0, 11597.0], [7.0, 11606.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.933333333333333, "minX": 1.59329478E12, "maxY": 8.733333333333333, "series": [{"data": [[1.59329514E12, 8.033333333333333], [1.59329496E12, 8.733333333333333], [1.59329502E12, 8.316666666666666], [1.59329484E12, 8.4], [1.5932949E12, 8.733333333333333], [1.5932952E12, 8.016666666666667], [1.59329478E12, 3.933333333333333], [1.59329526E12, 3.9833333333333334], [1.59329508E12, 8.516666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329526E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.2666666666666666, "minX": 1.59329478E12, "maxY": 8.733333333333333, "series": [{"data": [[1.59329514E12, 8.033333333333333], [1.59329496E12, 8.733333333333333], [1.59329502E12, 8.316666666666666], [1.59329484E12, 8.4], [1.5932949E12, 8.733333333333333], [1.5932952E12, 8.016666666666667], [1.59329478E12, 2.2666666666666666], [1.59329526E12, 5.65], [1.59329508E12, 8.516666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329526E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.2666666666666666, "minX": 1.59329478E12, "maxY": 8.733333333333333, "series": [{"data": [[1.59329514E12, 8.033333333333333], [1.59329496E12, 8.733333333333333], [1.59329502E12, 8.316666666666666], [1.59329484E12, 8.4], [1.5932949E12, 8.733333333333333], [1.5932952E12, 8.016666666666667], [1.59329478E12, 2.2666666666666666], [1.59329526E12, 5.65], [1.59329508E12, 8.516666666666667]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329526E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.2666666666666666, "minX": 1.59329478E12, "maxY": 8.733333333333333, "series": [{"data": [[1.59329514E12, 8.033333333333333], [1.59329496E12, 8.733333333333333], [1.59329502E12, 8.316666666666666], [1.59329484E12, 8.4], [1.5932949E12, 8.733333333333333], [1.5932952E12, 8.016666666666667], [1.59329478E12, 2.2666666666666666], [1.59329526E12, 5.65], [1.59329508E12, 8.516666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329526E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

