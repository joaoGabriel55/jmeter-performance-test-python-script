/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 415.0, "minX": 0.0, "maxY": 33781.0, "series": [{"data": [[0.0, 415.0], [0.1, 2043.0], [0.2, 2894.0], [0.3, 3908.0], [0.4, 4556.0], [0.5, 4889.0], [0.6, 5680.0], [0.7, 6027.0], [0.8, 6417.0], [0.9, 6683.0], [1.0, 6836.0], [1.1, 7054.0], [1.2, 7295.0], [1.3, 7511.0], [1.4, 7714.0], [1.5, 7857.0], [1.6, 7997.0], [1.7, 8095.0], [1.8, 8142.0], [1.9, 8337.0], [2.0, 8495.0], [2.1, 8567.0], [2.2, 8687.0], [2.3, 8782.0], [2.4, 8828.0], [2.5, 8913.0], [2.6, 9035.0], [2.7, 9092.0], [2.8, 9172.0], [2.9, 9264.0], [3.0, 9322.0], [3.1, 9356.0], [3.2, 9395.0], [3.3, 9454.0], [3.4, 9499.0], [3.5, 9552.0], [3.6, 9586.0], [3.7, 9619.0], [3.8, 9654.0], [3.9, 9700.0], [4.0, 9727.0], [4.1, 9756.0], [4.2, 9827.0], [4.3, 9865.0], [4.4, 9896.0], [4.5, 9949.0], [4.6, 9994.0], [4.7, 10035.0], [4.8, 10074.0], [4.9, 10096.0], [5.0, 10130.0], [5.1, 10166.0], [5.2, 10198.0], [5.3, 10211.0], [5.4, 10228.0], [5.5, 10262.0], [5.6, 10286.0], [5.7, 10316.0], [5.8, 10329.0], [5.9, 10361.0], [6.0, 10394.0], [6.1, 10449.0], [6.2, 10466.0], [6.3, 10487.0], [6.4, 10517.0], [6.5, 10530.0], [6.6, 10564.0], [6.7, 10614.0], [6.8, 10648.0], [6.9, 10680.0], [7.0, 10702.0], [7.1, 10749.0], [7.2, 10776.0], [7.3, 10800.0], [7.4, 10833.0], [7.5, 10844.0], [7.6, 10861.0], [7.7, 10879.0], [7.8, 10893.0], [7.9, 10931.0], [8.0, 10952.0], [8.1, 10986.0], [8.2, 11004.0], [8.3, 11014.0], [8.4, 11045.0], [8.5, 11080.0], [8.6, 11092.0], [8.7, 11120.0], [8.8, 11130.0], [8.9, 11151.0], [9.0, 11165.0], [9.1, 11184.0], [9.2, 11202.0], [9.3, 11212.0], [9.4, 11228.0], [9.5, 11241.0], [9.6, 11264.0], [9.7, 11278.0], [9.8, 11294.0], [9.9, 11312.0], [10.0, 11352.0], [10.1, 11377.0], [10.2, 11415.0], [10.3, 11461.0], [10.4, 11477.0], [10.5, 11493.0], [10.6, 11521.0], [10.7, 11542.0], [10.8, 11557.0], [10.9, 11572.0], [11.0, 11590.0], [11.1, 11614.0], [11.2, 11631.0], [11.3, 11640.0], [11.4, 11674.0], [11.5, 11682.0], [11.6, 11702.0], [11.7, 11712.0], [11.8, 11725.0], [11.9, 11739.0], [12.0, 11754.0], [12.1, 11764.0], [12.2, 11783.0], [12.3, 11801.0], [12.4, 11812.0], [12.5, 11819.0], [12.6, 11827.0], [12.7, 11834.0], [12.8, 11852.0], [12.9, 11868.0], [13.0, 11908.0], [13.1, 11916.0], [13.2, 11933.0], [13.3, 11953.0], [13.4, 11968.0], [13.5, 11981.0], [13.6, 12001.0], [13.7, 12012.0], [13.8, 12025.0], [13.9, 12035.0], [14.0, 12057.0], [14.1, 12072.0], [14.2, 12085.0], [14.3, 12102.0], [14.4, 12113.0], [14.5, 12127.0], [14.6, 12143.0], [14.7, 12154.0], [14.8, 12166.0], [14.9, 12175.0], [15.0, 12201.0], [15.1, 12212.0], [15.2, 12225.0], [15.3, 12236.0], [15.4, 12242.0], [15.5, 12257.0], [15.6, 12274.0], [15.7, 12284.0], [15.8, 12303.0], [15.9, 12310.0], [16.0, 12321.0], [16.1, 12345.0], [16.2, 12364.0], [16.3, 12390.0], [16.4, 12410.0], [16.5, 12435.0], [16.6, 12445.0], [16.7, 12462.0], [16.8, 12482.0], [16.9, 12491.0], [17.0, 12504.0], [17.1, 12513.0], [17.2, 12528.0], [17.3, 12538.0], [17.4, 12547.0], [17.5, 12559.0], [17.6, 12566.0], [17.7, 12579.0], [17.8, 12598.0], [17.9, 12617.0], [18.0, 12625.0], [18.1, 12633.0], [18.2, 12651.0], [18.3, 12657.0], [18.4, 12664.0], [18.5, 12681.0], [18.6, 12693.0], [18.7, 12712.0], [18.8, 12715.0], [18.9, 12725.0], [19.0, 12735.0], [19.1, 12751.0], [19.2, 12767.0], [19.3, 12776.0], [19.4, 12789.0], [19.5, 12794.0], [19.6, 12805.0], [19.7, 12814.0], [19.8, 12827.0], [19.9, 12839.0], [20.0, 12850.0], [20.1, 12862.0], [20.2, 12868.0], [20.3, 12879.0], [20.4, 12889.0], [20.5, 12898.0], [20.6, 12910.0], [20.7, 12927.0], [20.8, 12937.0], [20.9, 12956.0], [21.0, 12966.0], [21.1, 12977.0], [21.2, 12998.0], [21.3, 13011.0], [21.4, 13023.0], [21.5, 13037.0], [21.6, 13048.0], [21.7, 13062.0], [21.8, 13072.0], [21.9, 13082.0], [22.0, 13085.0], [22.1, 13095.0], [22.2, 13104.0], [22.3, 13111.0], [22.4, 13116.0], [22.5, 13131.0], [22.6, 13139.0], [22.7, 13150.0], [22.8, 13158.0], [22.9, 13170.0], [23.0, 13178.0], [23.1, 13191.0], [23.2, 13197.0], [23.3, 13209.0], [23.4, 13223.0], [23.5, 13238.0], [23.6, 13244.0], [23.7, 13250.0], [23.8, 13260.0], [23.9, 13273.0], [24.0, 13287.0], [24.1, 13305.0], [24.2, 13315.0], [24.3, 13334.0], [24.4, 13344.0], [24.5, 13352.0], [24.6, 13359.0], [24.7, 13370.0], [24.8, 13378.0], [24.9, 13383.0], [25.0, 13399.0], [25.1, 13416.0], [25.2, 13427.0], [25.3, 13434.0], [25.4, 13442.0], [25.5, 13451.0], [25.6, 13462.0], [25.7, 13474.0], [25.8, 13493.0], [25.9, 13507.0], [26.0, 13527.0], [26.1, 13540.0], [26.2, 13555.0], [26.3, 13574.0], [26.4, 13584.0], [26.5, 13603.0], [26.6, 13612.0], [26.7, 13633.0], [26.8, 13649.0], [26.9, 13655.0], [27.0, 13665.0], [27.1, 13672.0], [27.2, 13681.0], [27.3, 13687.0], [27.4, 13699.0], [27.5, 13710.0], [27.6, 13729.0], [27.7, 13739.0], [27.8, 13753.0], [27.9, 13761.0], [28.0, 13774.0], [28.1, 13784.0], [28.2, 13800.0], [28.3, 13815.0], [28.4, 13827.0], [28.5, 13835.0], [28.6, 13844.0], [28.7, 13852.0], [28.8, 13857.0], [28.9, 13873.0], [29.0, 13883.0], [29.1, 13896.0], [29.2, 13906.0], [29.3, 13918.0], [29.4, 13927.0], [29.5, 13938.0], [29.6, 13948.0], [29.7, 13960.0], [29.8, 13967.0], [29.9, 13974.0], [30.0, 13980.0], [30.1, 13997.0], [30.2, 14006.0], [30.3, 14020.0], [30.4, 14034.0], [30.5, 14049.0], [30.6, 14060.0], [30.7, 14070.0], [30.8, 14081.0], [30.9, 14093.0], [31.0, 14105.0], [31.1, 14114.0], [31.2, 14125.0], [31.3, 14140.0], [31.4, 14152.0], [31.5, 14165.0], [31.6, 14195.0], [31.7, 14203.0], [31.8, 14209.0], [31.9, 14217.0], [32.0, 14237.0], [32.1, 14242.0], [32.2, 14257.0], [32.3, 14271.0], [32.4, 14280.0], [32.5, 14293.0], [32.6, 14299.0], [32.7, 14312.0], [32.8, 14317.0], [32.9, 14328.0], [33.0, 14337.0], [33.1, 14349.0], [33.2, 14356.0], [33.3, 14375.0], [33.4, 14388.0], [33.5, 14397.0], [33.6, 14404.0], [33.7, 14426.0], [33.8, 14436.0], [33.9, 14444.0], [34.0, 14460.0], [34.1, 14467.0], [34.2, 14476.0], [34.3, 14486.0], [34.4, 14495.0], [34.5, 14509.0], [34.6, 14520.0], [34.7, 14526.0], [34.8, 14537.0], [34.9, 14554.0], [35.0, 14564.0], [35.1, 14569.0], [35.2, 14582.0], [35.3, 14589.0], [35.4, 14597.0], [35.5, 14603.0], [35.6, 14610.0], [35.7, 14623.0], [35.8, 14638.0], [35.9, 14646.0], [36.0, 14659.0], [36.1, 14681.0], [36.2, 14690.0], [36.3, 14697.0], [36.4, 14702.0], [36.5, 14711.0], [36.6, 14719.0], [36.7, 14732.0], [36.8, 14742.0], [36.9, 14747.0], [37.0, 14761.0], [37.1, 14770.0], [37.2, 14785.0], [37.3, 14794.0], [37.4, 14804.0], [37.5, 14822.0], [37.6, 14828.0], [37.7, 14833.0], [37.8, 14843.0], [37.9, 14851.0], [38.0, 14870.0], [38.1, 14879.0], [38.2, 14884.0], [38.3, 14899.0], [38.4, 14904.0], [38.5, 14912.0], [38.6, 14922.0], [38.7, 14938.0], [38.8, 14943.0], [38.9, 14951.0], [39.0, 14959.0], [39.1, 14969.0], [39.2, 14983.0], [39.3, 14988.0], [39.4, 14992.0], [39.5, 15001.0], [39.6, 15009.0], [39.7, 15015.0], [39.8, 15024.0], [39.9, 15036.0], [40.0, 15047.0], [40.1, 15063.0], [40.2, 15071.0], [40.3, 15088.0], [40.4, 15096.0], [40.5, 15104.0], [40.6, 15113.0], [40.7, 15125.0], [40.8, 15140.0], [40.9, 15145.0], [41.0, 15153.0], [41.1, 15164.0], [41.2, 15177.0], [41.3, 15192.0], [41.4, 15199.0], [41.5, 15207.0], [41.6, 15218.0], [41.7, 15227.0], [41.8, 15231.0], [41.9, 15238.0], [42.0, 15244.0], [42.1, 15254.0], [42.2, 15264.0], [42.3, 15271.0], [42.4, 15280.0], [42.5, 15292.0], [42.6, 15303.0], [42.7, 15312.0], [42.8, 15320.0], [42.9, 15333.0], [43.0, 15347.0], [43.1, 15356.0], [43.2, 15364.0], [43.3, 15376.0], [43.4, 15382.0], [43.5, 15391.0], [43.6, 15399.0], [43.7, 15406.0], [43.8, 15414.0], [43.9, 15423.0], [44.0, 15429.0], [44.1, 15434.0], [44.2, 15441.0], [44.3, 15450.0], [44.4, 15467.0], [44.5, 15472.0], [44.6, 15481.0], [44.7, 15492.0], [44.8, 15509.0], [44.9, 15514.0], [45.0, 15525.0], [45.1, 15536.0], [45.2, 15545.0], [45.3, 15552.0], [45.4, 15560.0], [45.5, 15566.0], [45.6, 15574.0], [45.7, 15589.0], [45.8, 15597.0], [45.9, 15608.0], [46.0, 15624.0], [46.1, 15632.0], [46.2, 15648.0], [46.3, 15657.0], [46.4, 15667.0], [46.5, 15674.0], [46.6, 15685.0], [46.7, 15702.0], [46.8, 15715.0], [46.9, 15722.0], [47.0, 15731.0], [47.1, 15740.0], [47.2, 15748.0], [47.3, 15759.0], [47.4, 15765.0], [47.5, 15775.0], [47.6, 15780.0], [47.7, 15786.0], [47.8, 15791.0], [47.9, 15803.0], [48.0, 15811.0], [48.1, 15824.0], [48.2, 15831.0], [48.3, 15835.0], [48.4, 15848.0], [48.5, 15865.0], [48.6, 15876.0], [48.7, 15883.0], [48.8, 15890.0], [48.9, 15899.0], [49.0, 15916.0], [49.1, 15932.0], [49.2, 15939.0], [49.3, 15944.0], [49.4, 15949.0], [49.5, 15957.0], [49.6, 15967.0], [49.7, 15978.0], [49.8, 15984.0], [49.9, 15997.0], [50.0, 16003.0], [50.1, 16015.0], [50.2, 16026.0], [50.3, 16035.0], [50.4, 16044.0], [50.5, 16051.0], [50.6, 16061.0], [50.7, 16070.0], [50.8, 16078.0], [50.9, 16097.0], [51.0, 16107.0], [51.1, 16121.0], [51.2, 16129.0], [51.3, 16136.0], [51.4, 16150.0], [51.5, 16156.0], [51.6, 16162.0], [51.7, 16174.0], [51.8, 16187.0], [51.9, 16193.0], [52.0, 16203.0], [52.1, 16215.0], [52.2, 16220.0], [52.3, 16227.0], [52.4, 16239.0], [52.5, 16243.0], [52.6, 16249.0], [52.7, 16254.0], [52.8, 16264.0], [52.9, 16272.0], [53.0, 16278.0], [53.1, 16286.0], [53.2, 16293.0], [53.3, 16300.0], [53.4, 16307.0], [53.5, 16313.0], [53.6, 16320.0], [53.7, 16326.0], [53.8, 16333.0], [53.9, 16340.0], [54.0, 16353.0], [54.1, 16363.0], [54.2, 16375.0], [54.3, 16382.0], [54.4, 16392.0], [54.5, 16402.0], [54.6, 16415.0], [54.7, 16423.0], [54.8, 16430.0], [54.9, 16435.0], [55.0, 16449.0], [55.1, 16458.0], [55.2, 16472.0], [55.3, 16480.0], [55.4, 16487.0], [55.5, 16501.0], [55.6, 16507.0], [55.7, 16511.0], [55.8, 16518.0], [55.9, 16521.0], [56.0, 16536.0], [56.1, 16551.0], [56.2, 16564.0], [56.3, 16571.0], [56.4, 16581.0], [56.5, 16587.0], [56.6, 16596.0], [56.7, 16605.0], [56.8, 16612.0], [56.9, 16625.0], [57.0, 16630.0], [57.1, 16638.0], [57.2, 16648.0], [57.3, 16661.0], [57.4, 16676.0], [57.5, 16677.0], [57.6, 16687.0], [57.7, 16694.0], [57.8, 16708.0], [57.9, 16720.0], [58.0, 16735.0], [58.1, 16747.0], [58.2, 16753.0], [58.3, 16760.0], [58.4, 16770.0], [58.5, 16776.0], [58.6, 16782.0], [58.7, 16795.0], [58.8, 16804.0], [58.9, 16814.0], [59.0, 16820.0], [59.1, 16833.0], [59.2, 16845.0], [59.3, 16858.0], [59.4, 16867.0], [59.5, 16877.0], [59.6, 16887.0], [59.7, 16894.0], [59.8, 16904.0], [59.9, 16918.0], [60.0, 16927.0], [60.1, 16934.0], [60.2, 16938.0], [60.3, 16948.0], [60.4, 16955.0], [60.5, 16966.0], [60.6, 16977.0], [60.7, 16986.0], [60.8, 16994.0], [60.9, 17007.0], [61.0, 17016.0], [61.1, 17023.0], [61.2, 17033.0], [61.3, 17038.0], [61.4, 17049.0], [61.5, 17061.0], [61.6, 17069.0], [61.7, 17080.0], [61.8, 17085.0], [61.9, 17096.0], [62.0, 17107.0], [62.1, 17116.0], [62.2, 17132.0], [62.3, 17141.0], [62.4, 17156.0], [62.5, 17166.0], [62.6, 17178.0], [62.7, 17182.0], [62.8, 17201.0], [62.9, 17210.0], [63.0, 17220.0], [63.1, 17230.0], [63.2, 17244.0], [63.3, 17249.0], [63.4, 17259.0], [63.5, 17268.0], [63.6, 17275.0], [63.7, 17285.0], [63.8, 17297.0], [63.9, 17303.0], [64.0, 17313.0], [64.1, 17320.0], [64.2, 17325.0], [64.3, 17333.0], [64.4, 17339.0], [64.5, 17352.0], [64.6, 17360.0], [64.7, 17370.0], [64.8, 17380.0], [64.9, 17392.0], [65.0, 17404.0], [65.1, 17416.0], [65.2, 17435.0], [65.3, 17447.0], [65.4, 17452.0], [65.5, 17462.0], [65.6, 17474.0], [65.7, 17483.0], [65.8, 17494.0], [65.9, 17502.0], [66.0, 17514.0], [66.1, 17518.0], [66.2, 17525.0], [66.3, 17537.0], [66.4, 17545.0], [66.5, 17553.0], [66.6, 17566.0], [66.7, 17581.0], [66.8, 17590.0], [66.9, 17609.0], [67.0, 17622.0], [67.1, 17635.0], [67.2, 17649.0], [67.3, 17657.0], [67.4, 17668.0], [67.5, 17678.0], [67.6, 17688.0], [67.7, 17709.0], [67.8, 17725.0], [67.9, 17735.0], [68.0, 17742.0], [68.1, 17756.0], [68.2, 17763.0], [68.3, 17771.0], [68.4, 17782.0], [68.5, 17799.0], [68.6, 17813.0], [68.7, 17818.0], [68.8, 17824.0], [68.9, 17838.0], [69.0, 17848.0], [69.1, 17856.0], [69.2, 17862.0], [69.3, 17874.0], [69.4, 17888.0], [69.5, 17894.0], [69.6, 17903.0], [69.7, 17914.0], [69.8, 17920.0], [69.9, 17925.0], [70.0, 17944.0], [70.1, 17958.0], [70.2, 17972.0], [70.3, 17985.0], [70.4, 18000.0], [70.5, 18007.0], [70.6, 18011.0], [70.7, 18014.0], [70.8, 18030.0], [70.9, 18040.0], [71.0, 18054.0], [71.1, 18066.0], [71.2, 18076.0], [71.3, 18092.0], [71.4, 18108.0], [71.5, 18126.0], [71.6, 18144.0], [71.7, 18153.0], [71.8, 18163.0], [71.9, 18175.0], [72.0, 18190.0], [72.1, 18199.0], [72.2, 18209.0], [72.3, 18214.0], [72.4, 18225.0], [72.5, 18239.0], [72.6, 18245.0], [72.7, 18253.0], [72.8, 18261.0], [72.9, 18272.0], [73.0, 18277.0], [73.1, 18282.0], [73.2, 18291.0], [73.3, 18294.0], [73.4, 18300.0], [73.5, 18318.0], [73.6, 18330.0], [73.7, 18343.0], [73.8, 18365.0], [73.9, 18371.0], [74.0, 18389.0], [74.1, 18402.0], [74.2, 18416.0], [74.3, 18423.0], [74.4, 18437.0], [74.5, 18443.0], [74.6, 18463.0], [74.7, 18483.0], [74.8, 18496.0], [74.9, 18506.0], [75.0, 18511.0], [75.1, 18517.0], [75.2, 18523.0], [75.3, 18533.0], [75.4, 18545.0], [75.5, 18555.0], [75.6, 18573.0], [75.7, 18580.0], [75.8, 18587.0], [75.9, 18597.0], [76.0, 18606.0], [76.1, 18615.0], [76.2, 18629.0], [76.3, 18633.0], [76.4, 18639.0], [76.5, 18653.0], [76.6, 18665.0], [76.7, 18684.0], [76.8, 18694.0], [76.9, 18709.0], [77.0, 18716.0], [77.1, 18727.0], [77.2, 18745.0], [77.3, 18752.0], [77.4, 18762.0], [77.5, 18774.0], [77.6, 18793.0], [77.7, 18803.0], [77.8, 18807.0], [77.9, 18816.0], [78.0, 18823.0], [78.1, 18837.0], [78.2, 18849.0], [78.3, 18858.0], [78.4, 18872.0], [78.5, 18884.0], [78.6, 18895.0], [78.7, 18914.0], [78.8, 18921.0], [78.9, 18930.0], [79.0, 18935.0], [79.1, 18948.0], [79.2, 18956.0], [79.3, 18981.0], [79.4, 18991.0], [79.5, 19011.0], [79.6, 19040.0], [79.7, 19058.0], [79.8, 19078.0], [79.9, 19092.0], [80.0, 19106.0], [80.1, 19119.0], [80.2, 19128.0], [80.3, 19148.0], [80.4, 19157.0], [80.5, 19169.0], [80.6, 19187.0], [80.7, 19208.0], [80.8, 19218.0], [80.9, 19232.0], [81.0, 19248.0], [81.1, 19270.0], [81.2, 19288.0], [81.3, 19294.0], [81.4, 19301.0], [81.5, 19317.0], [81.6, 19330.0], [81.7, 19352.0], [81.8, 19380.0], [81.9, 19393.0], [82.0, 19409.0], [82.1, 19426.0], [82.2, 19443.0], [82.3, 19459.0], [82.4, 19470.0], [82.5, 19489.0], [82.6, 19511.0], [82.7, 19523.0], [82.8, 19549.0], [82.9, 19562.0], [83.0, 19576.0], [83.1, 19607.0], [83.2, 19613.0], [83.3, 19630.0], [83.4, 19652.0], [83.5, 19680.0], [83.6, 19693.0], [83.7, 19703.0], [83.8, 19725.0], [83.9, 19739.0], [84.0, 19759.0], [84.1, 19770.0], [84.2, 19781.0], [84.3, 19800.0], [84.4, 19811.0], [84.5, 19837.0], [84.6, 19850.0], [84.7, 19865.0], [84.8, 19887.0], [84.9, 19898.0], [85.0, 19925.0], [85.1, 19945.0], [85.2, 19961.0], [85.3, 19991.0], [85.4, 20016.0], [85.5, 20029.0], [85.6, 20046.0], [85.7, 20057.0], [85.8, 20071.0], [85.9, 20094.0], [86.0, 20107.0], [86.1, 20125.0], [86.2, 20137.0], [86.3, 20151.0], [86.4, 20169.0], [86.5, 20177.0], [86.6, 20191.0], [86.7, 20206.0], [86.8, 20211.0], [86.9, 20224.0], [87.0, 20234.0], [87.1, 20240.0], [87.2, 20255.0], [87.3, 20288.0], [87.4, 20307.0], [87.5, 20329.0], [87.6, 20350.0], [87.7, 20364.0], [87.8, 20386.0], [87.9, 20399.0], [88.0, 20422.0], [88.1, 20435.0], [88.2, 20465.0], [88.3, 20484.0], [88.4, 20516.0], [88.5, 20523.0], [88.6, 20545.0], [88.7, 20572.0], [88.8, 20597.0], [88.9, 20613.0], [89.0, 20634.0], [89.1, 20642.0], [89.2, 20667.0], [89.3, 20695.0], [89.4, 20718.0], [89.5, 20753.0], [89.6, 20789.0], [89.7, 20816.0], [89.8, 20839.0], [89.9, 20876.0], [90.0, 20890.0], [90.1, 20898.0], [90.2, 20912.0], [90.3, 20947.0], [90.4, 20959.0], [90.5, 20972.0], [90.6, 20995.0], [90.7, 21021.0], [90.8, 21036.0], [90.9, 21064.0], [91.0, 21083.0], [91.1, 21091.0], [91.2, 21131.0], [91.3, 21181.0], [91.4, 21193.0], [91.5, 21235.0], [91.6, 21272.0], [91.7, 21287.0], [91.8, 21309.0], [91.9, 21339.0], [92.0, 21357.0], [92.1, 21375.0], [92.2, 21416.0], [92.3, 21439.0], [92.4, 21477.0], [92.5, 21516.0], [92.6, 21542.0], [92.7, 21573.0], [92.8, 21596.0], [92.9, 21626.0], [93.0, 21649.0], [93.1, 21662.0], [93.2, 21688.0], [93.3, 21701.0], [93.4, 21760.0], [93.5, 21773.0], [93.6, 21804.0], [93.7, 21869.0], [93.8, 21936.0], [93.9, 21971.0], [94.0, 22005.0], [94.1, 22069.0], [94.2, 22098.0], [94.3, 22148.0], [94.4, 22190.0], [94.5, 22229.0], [94.6, 22241.0], [94.7, 22282.0], [94.8, 22341.0], [94.9, 22402.0], [95.0, 22444.0], [95.1, 22498.0], [95.2, 22535.0], [95.3, 22571.0], [95.4, 22603.0], [95.5, 22640.0], [95.6, 22693.0], [95.7, 22728.0], [95.8, 22791.0], [95.9, 22824.0], [96.0, 22886.0], [96.1, 22965.0], [96.2, 23011.0], [96.3, 23038.0], [96.4, 23083.0], [96.5, 23148.0], [96.6, 23186.0], [96.7, 23217.0], [96.8, 23272.0], [96.9, 23308.0], [97.0, 23374.0], [97.1, 23424.0], [97.2, 23470.0], [97.3, 23528.0], [97.4, 23563.0], [97.5, 23613.0], [97.6, 23689.0], [97.7, 23752.0], [97.8, 23785.0], [97.9, 23855.0], [98.0, 23946.0], [98.1, 24012.0], [98.2, 24069.0], [98.3, 24164.0], [98.4, 24264.0], [98.5, 24449.0], [98.6, 24611.0], [98.7, 24742.0], [98.8, 24938.0], [98.9, 25106.0], [99.0, 25238.0], [99.1, 25489.0], [99.2, 25704.0], [99.3, 25871.0], [99.4, 26047.0], [99.5, 26358.0], [99.6, 26857.0], [99.7, 27373.0], [99.8, 27968.0], [99.9, 29201.0], [100.0, 33781.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 90.0, "series": [{"data": [[33700.0, 1.0], [400.0, 2.0], [900.0, 2.0], [1000.0, 1.0], [1200.0, 1.0], [1600.0, 1.0], [2000.0, 2.0], [2200.0, 1.0], [2800.0, 3.0], [2700.0, 1.0], [3100.0, 2.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 2.0], [3900.0, 2.0], [4100.0, 1.0], [4300.0, 3.0], [4500.0, 3.0], [4600.0, 1.0], [4800.0, 4.0], [4700.0, 1.0], [4900.0, 3.0], [5300.0, 2.0], [5200.0, 2.0], [5600.0, 1.0], [5700.0, 2.0], [5800.0, 2.0], [5900.0, 1.0], [6000.0, 3.0], [6100.0, 2.0], [6300.0, 2.0], [6600.0, 4.0], [6400.0, 5.0], [6500.0, 1.0], [6800.0, 3.0], [6700.0, 4.0], [6900.0, 4.0], [7000.0, 4.0], [7100.0, 1.0], [7200.0, 4.0], [7300.0, 4.0], [7400.0, 2.0], [7500.0, 5.0], [7600.0, 2.0], [7800.0, 6.0], [7700.0, 3.0], [7900.0, 6.0], [8000.0, 7.0], [8100.0, 9.0], [8400.0, 5.0], [8500.0, 7.0], [8600.0, 5.0], [8700.0, 8.0], [8300.0, 6.0], [8200.0, 3.0], [8800.0, 12.0], [8900.0, 6.0], [9200.0, 7.0], [9100.0, 9.0], [9000.0, 9.0], [9400.0, 14.0], [9500.0, 17.0], [9600.0, 17.0], [9700.0, 18.0], [9300.0, 19.0], [9800.0, 18.0], [10000.0, 22.0], [10200.0, 31.0], [9900.0, 14.0], [10100.0, 21.0], [10500.0, 21.0], [10600.0, 21.0], [10400.0, 24.0], [10700.0, 23.0], [10300.0, 25.0], [10900.0, 22.0], [11200.0, 46.0], [11100.0, 39.0], [11000.0, 33.0], [10800.0, 38.0], [11400.0, 27.0], [11500.0, 36.0], [11700.0, 50.0], [11300.0, 22.0], [11600.0, 37.0], [11800.0, 49.0], [11900.0, 41.0], [12200.0, 55.0], [12100.0, 49.0], [12000.0, 49.0], [12300.0, 42.0], [12500.0, 59.0], [12700.0, 65.0], [12400.0, 41.0], [12600.0, 57.0], [13200.0, 58.0], [13100.0, 77.0], [13000.0, 65.0], [12800.0, 70.0], [12900.0, 46.0], [13300.0, 66.0], [13400.0, 58.0], [13500.0, 44.0], [13800.0, 68.0], [13700.0, 54.0], [13600.0, 66.0], [14300.0, 65.0], [13900.0, 68.0], [14200.0, 65.0], [14100.0, 52.0], [14000.0, 57.0], [14500.0, 70.0], [14800.0, 66.0], [14700.0, 71.0], [14400.0, 64.0], [14600.0, 63.0], [14900.0, 83.0], [15300.0, 75.0], [15100.0, 67.0], [15200.0, 80.0], [15000.0, 67.0], [15500.0, 74.0], [15800.0, 74.0], [15400.0, 80.0], [15700.0, 81.0], [15600.0, 61.0], [16200.0, 90.0], [16000.0, 70.0], [16300.0, 83.0], [15900.0, 71.0], [16100.0, 74.0], [17400.0, 62.0], [16400.0, 73.0], [16800.0, 71.0], [17000.0, 75.0], [17200.0, 74.0], [16600.0, 77.0], [17600.0, 56.0], [17800.0, 74.0], [18000.0, 65.0], [18400.0, 52.0], [18200.0, 89.0], [18600.0, 64.0], [19000.0, 35.0], [19400.0, 45.0], [18800.0, 66.0], [19200.0, 51.0], [20400.0, 33.0], [20200.0, 50.0], [19800.0, 43.0], [20000.0, 39.0], [19600.0, 41.0], [21000.0, 35.0], [20600.0, 36.0], [21200.0, 21.0], [21400.0, 17.0], [20800.0, 32.0], [21800.0, 12.0], [21600.0, 32.0], [22200.0, 22.0], [22000.0, 16.0], [22400.0, 15.0], [23400.0, 16.0], [22800.0, 13.0], [23200.0, 15.0], [23000.0, 19.0], [22600.0, 17.0], [24400.0, 6.0], [23800.0, 8.0], [24000.0, 13.0], [23600.0, 10.0], [24200.0, 7.0], [24800.0, 5.0], [25200.0, 4.0], [24600.0, 5.0], [25000.0, 4.0], [25400.0, 3.0], [25800.0, 5.0], [26600.0, 1.0], [25600.0, 2.0], [26200.0, 3.0], [26400.0, 2.0], [26000.0, 2.0], [27600.0, 2.0], [27400.0, 1.0], [26800.0, 2.0], [27200.0, 3.0], [27000.0, 1.0], [27800.0, 2.0], [28000.0, 1.0], [29200.0, 1.0], [29400.0, 1.0], [28800.0, 2.0], [16700.0, 69.0], [17100.0, 62.0], [17300.0, 78.0], [16900.0, 75.0], [16500.0, 82.0], [18100.0, 55.0], [18300.0, 49.0], [17700.0, 61.0], [17900.0, 58.0], [17500.0, 69.0], [18500.0, 76.0], [18700.0, 59.0], [19100.0, 47.0], [18900.0, 60.0], [19300.0, 40.0], [19700.0, 43.0], [20300.0, 38.0], [20100.0, 51.0], [19500.0, 36.0], [19900.0, 32.0], [20700.0, 23.0], [21300.0, 31.0], [20500.0, 31.0], [21100.0, 22.0], [21500.0, 28.0], [20900.0, 35.0], [22100.0, 15.0], [22500.0, 20.0], [21700.0, 21.0], [21900.0, 16.0], [22300.0, 11.0], [23300.0, 12.0], [23100.0, 12.0], [22900.0, 13.0], [23500.0, 17.0], [22700.0, 13.0], [24100.0, 5.0], [23900.0, 8.0], [23700.0, 14.0], [24300.0, 3.0], [24500.0, 3.0], [25300.0, 2.0], [25100.0, 8.0], [24700.0, 4.0], [25500.0, 4.0], [24900.0, 1.0], [25900.0, 5.0], [26300.0, 2.0], [25700.0, 4.0], [26100.0, 2.0], [26500.0, 1.0], [27500.0, 1.0], [27300.0, 1.0], [26900.0, 2.0], [27900.0, 1.0], [28300.0, 2.0], [28500.0, 1.0], [29300.0, 2.0], [30700.0, 2.0], [31900.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6932.0, "series": [{"data": [[0.0, 2.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6932.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 62.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 60.37412587412579, "minX": 1.59338124E12, "maxY": 100.0, "series": [{"data": [[1.59338232E12, 97.90624999999991], [1.59338136E12, 100.0], [1.59338202E12, 100.0], [1.59338172E12, 100.0], [1.59338238E12, 60.37412587412579], [1.59338142E12, 100.0], [1.5933816E12, 100.0], [1.59338226E12, 100.0], [1.5933813E12, 100.0], [1.59338196E12, 100.0], [1.59338166E12, 100.0], [1.59338184E12, 100.0], [1.59338154E12, 100.0], [1.5933822E12, 100.0], [1.59338124E12, 100.0], [1.5933819E12, 100.0], [1.59338208E12, 100.0], [1.59338178E12, 100.0], [1.59338148E12, 100.0], [1.59338214E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338238E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 628.6666666666666, "minX": 1.0, "maxY": 24203.0, "series": [{"data": [[2.0, 941.0], [3.0, 973.0], [4.0, 1671.0], [5.0, 1251.0], [6.0, 2263.0], [7.0, 3904.0], [8.0, 2674.3333333333335], [9.0, 3182.0], [10.0, 4879.0], [11.0, 2776.0], [12.0, 4734.333333333333], [13.0, 3492.0], [14.0, 4768.0], [15.0, 8472.5], [16.0, 8060.25], [17.0, 9700.0], [18.0, 5680.0], [19.0, 5221.0], [20.0, 10289.0], [21.0, 9085.0], [22.0, 9232.5], [23.0, 12237.0], [24.0, 4879.0], [25.0, 6754.0], [26.0, 10564.0], [27.0, 4308.0], [29.0, 10064.5], [30.0, 7252.571428571428], [31.0, 5628.333333333333], [33.0, 18927.0], [32.0, 10339.0], [35.0, 11698.5], [34.0, 13985.5], [37.0, 11719.333333333334], [36.0, 12454.0], [39.0, 13118.5], [38.0, 13703.0], [41.0, 13114.0], [40.0, 13106.0], [43.0, 10931.0], [42.0, 11334.0], [45.0, 19629.0], [44.0, 7821.0], [47.0, 16455.666666666668], [49.0, 16220.0], [48.0, 9586.0], [51.0, 16474.2], [50.0, 15576.666666666666], [53.0, 15268.0], [52.0, 11354.0], [55.0, 17751.0], [54.0, 11035.5], [57.0, 11739.5], [56.0, 22667.0], [59.0, 11692.0], [58.0, 16429.0], [61.0, 14129.333333333334], [60.0, 13231.0], [63.0, 14044.25], [62.0, 24203.0], [67.0, 17054.57142857143], [66.0, 18521.25], [65.0, 15320.2], [64.0, 9832.0], [71.0, 17018.5], [70.0, 16458.6], [69.0, 13905.0], [68.0, 14367.5], [75.0, 12390.0], [74.0, 16673.0], [73.0, 18377.0], [72.0, 12931.0], [79.0, 16353.5], [78.0, 18349.999999999996], [77.0, 17275.0], [76.0, 19393.833333333336], [83.0, 22109.333333333332], [82.0, 22576.0], [81.0, 15602.0], [80.0, 15931.25], [87.0, 17647.363636363636], [86.0, 16953.166666666664], [85.0, 23179.75], [84.0, 15641.666666666666], [91.0, 21920.333333333332], [90.0, 18374.2380952381], [89.0, 15426.5], [88.0, 15882.499999999996], [95.0, 20314.28571428571], [94.0, 18751.09090909091], [93.0, 17716.083333333332], [92.0, 21390.5], [99.0, 19031.0], [98.0, 20173.740740740745], [97.0, 18451.916666666668], [96.0, 18689.5], [100.0, 16027.617208878039], [1.0, 628.6666666666666]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[98.28528571428572, 16033.64242857139]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 270.75, "minX": 1.59338124E12, "maxY": 9130.683333333332, "series": [{"data": [[1.59338232E12, 6842.666666666667], [1.59338136E12, 9130.683333333332], [1.59338202E12, 7184.8], [1.59338172E12, 8061.516666666666], [1.59338238E12, 6115.633333333333], [1.59338142E12, 9002.383333333333], [1.5933816E12, 8531.95], [1.59338226E12, 6970.966666666666], [1.5933813E12, 9045.15], [1.59338196E12, 7008.666666666667], [1.59338166E12, 8082.9], [1.59338184E12, 7569.7], [1.59338154E12, 8724.4], [1.5933822E12, 6821.283333333334], [1.59338124E12, 1218.85], [1.5933819E12, 7148.266666666666], [1.59338208E12, 7163.416666666667], [1.59338178E12, 8339.5], [1.59338148E12, 8981.0], [1.59338214E12, 6842.666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59338232E12, 1520.0], [1.59338136E12, 2028.25], [1.59338202E12, 1596.0], [1.59338172E12, 1790.75], [1.59338238E12, 1358.5], [1.59338142E12, 1999.75], [1.5933816E12, 1895.25], [1.59338226E12, 1548.5], [1.5933813E12, 2009.25], [1.59338196E12, 1634.0], [1.59338166E12, 1795.5], [1.59338184E12, 1681.5], [1.59338154E12, 1938.0], [1.5933822E12, 1515.25], [1.59338124E12, 270.75], [1.5933819E12, 1710.0], [1.59338208E12, 1591.25], [1.59338178E12, 1852.5], [1.59338148E12, 1995.0], [1.59338214E12, 1520.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338238E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7278.122807017545, "minX": 1.59338124E12, "maxY": 19192.10312500001, "series": [{"data": [[1.59338232E12, 19192.10312500001], [1.59338136E12, 14145.75409836066], [1.59338202E12, 17736.934523809534], [1.59338172E12, 15621.63660477454], [1.59338238E12, 14538.07692307691], [1.59338142E12, 13974.997624703086], [1.5933816E12, 14917.571428571424], [1.59338226E12, 18178.046012269933], [1.5933813E12, 13912.45626477542], [1.59338196E12, 16951.093023255802], [1.59338166E12, 16008.087301587291], [1.59338184E12, 16502.807909604522], [1.59338154E12, 14827.887254901965], [1.5933822E12, 18414.27586206897], [1.59338124E12, 7278.122807017545], [1.5933819E12, 17075.583333333325], [1.59338208E12, 18268.256716417913], [1.59338178E12, 15661.141025641027], [1.59338148E12, 14367.554761904752], [1.59338214E12, 18525.084375000013]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338238E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7277.877192982457, "minX": 1.59338124E12, "maxY": 19192.078125000007, "series": [{"data": [[1.59338232E12, 19192.078125000007], [1.59338136E12, 14145.683840749403], [1.59338202E12, 17736.90773809525], [1.59338172E12, 15621.594164456237], [1.59338238E12, 14538.055944055937], [1.59338142E12, 13974.931116389553], [1.5933816E12, 14917.523809523813], [1.59338226E12, 18178.01840490801], [1.5933813E12, 13912.356973995269], [1.59338196E12, 16951.06395348838], [1.59338166E12, 16008.063492063491], [1.59338184E12, 16502.776836158188], [1.59338154E12, 14827.835784313722], [1.5933822E12, 18414.2476489028], [1.59338124E12, 7277.877192982457], [1.5933819E12, 17075.558333333327], [1.59338208E12, 18268.226865671644], [1.59338178E12, 15661.107692307693], [1.59338148E12, 14367.504761904767], [1.59338214E12, 18525.06250000001]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338238E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2485875706214689, "minX": 1.59338124E12, "maxY": 47.315789473684205, "series": [{"data": [[1.59338232E12, 0.35937500000000006], [1.59338136E12, 0.4004683840749413], [1.59338202E12, 0.33333333333333337], [1.59338172E12, 0.3050397877984086], [1.59338238E12, 0.2937062937062938], [1.59338142E12, 0.38242280285035624], [1.5933816E12, 0.36591478696741847], [1.59338226E12, 0.3282208588957055], [1.5933813E12, 0.8723404255319145], [1.59338196E12, 0.31104651162790703], [1.59338166E12, 0.30423280423280435], [1.59338184E12, 0.2485875706214689], [1.59338154E12, 0.41421568627450994], [1.5933822E12, 0.3134796238244515], [1.59338124E12, 47.315789473684205], [1.5933819E12, 0.35277777777777775], [1.59338208E12, 0.3044776119402985], [1.59338178E12, 0.25641025641025644], [1.59338148E12, 0.3833333333333331], [1.59338214E12, 0.3031249999999998]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338238E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 415.0, "minX": 1.59338124E12, "maxY": 33781.0, "series": [{"data": [[1.59338232E12, 30740.0], [1.59338136E12, 23177.0], [1.59338202E12, 31991.0], [1.59338172E12, 24450.0], [1.59338238E12, 33781.0], [1.59338142E12, 20788.0], [1.5933816E12, 24816.0], [1.59338226E12, 29201.0], [1.5933813E12, 25828.0], [1.59338196E12, 27609.0], [1.59338166E12, 25392.0], [1.59338184E12, 27839.0], [1.59338154E12, 23328.0], [1.5933822E12, 29375.0], [1.59338124E12, 10277.0], [1.5933819E12, 25940.0], [1.59338208E12, 27518.0], [1.59338178E12, 24800.0], [1.59338148E12, 22244.0], [1.59338214E12, 29301.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59338232E12, 11201.846952320337], [1.59338136E12, 8003.011915202141], [1.59338202E12, 9826.995982966422], [1.59338172E12, 9451.481996304989], [1.59338238E12, 745.0099678397179], [1.59338142E12, 8004.503954925537], [1.5933816E12, 7519.199979305267], [1.59338226E12, 10870.63199812889], [1.5933813E12, 8030.799994945526], [1.59338196E12, 8879.561995561124], [1.59338166E12, 8835.784960693121], [1.59338184E12, 9417.559982395172], [1.59338154E12, 9215.50694666028], [1.5933822E12, 10827.479996490478], [1.59338124E12, 2874.0], [1.5933819E12, 6395.144981902838], [1.59338208E12, 11149.551988143921], [1.59338178E12, 8546.309954321385], [1.59338148E12, 6677.7249974906445], [1.59338214E12, 11324.268891247511]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59338232E12, 11297.329204530715], [1.59338136E12, 8176.049208612442], [1.59338202E12, 9891.29560681343], [1.59338172E12, 9465.430201478004], [1.59338238E12, 866.4110128641129], [1.59338142E12, 8116.336004829407], [1.5933816E12, 7597.320008277893], [1.59338226E12, 10894.54350296259], [1.5933813E12, 8057.191203517914], [1.59338196E12, 8896.85190186739], [1.59338166E12, 8984.163515722752], [1.59338184E12, 9484.016007041932], [1.59338154E12, 9392.749602184296], [1.5933822E12, 10840.560001373291], [1.59338124E12, 2874.0], [1.5933819E12, 6469.785908224582], [1.59338208E12, 11194.307204742432], [1.59338178E12, 8718.741018271447], [1.59338148E12, 6729.004611001014], [1.59338214E12, 11541.240710194112]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59338232E12, 11278.325994336605], [1.59338136E12, 8139.925989234447], [1.59338202E12, 9862.717991483212], [1.59338172E12, 9459.230998152494], [1.59338238E12, 812.4549839198587], [1.59338142E12, 8096.079993963242], [1.5933816E12, 7562.599989652634], [1.59338226E12, 10882.117496296763], [1.5933813E12, 8042.435995602607], [1.59338196E12, 8889.019497665762], [1.59338166E12, 8918.21748034656], [1.59338184E12, 9454.479991197586], [1.59338154E12, 9327.36847333014], [1.5933822E12, 10834.799998283386], [1.59338124E12, 2874.0], [1.5933819E12, 6435.289489719272], [1.59338208E12, 11174.41599407196], [1.59338178E12, 8642.104977160692], [1.59338148E12, 6682.987498745322], [1.59338214E12, 11498.483487257361]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59338232E12, 9263.0], [1.59338136E12, 7131.0], [1.59338202E12, 8443.0], [1.59338172E12, 8825.0], [1.59338238E12, 415.0], [1.59338142E12, 7201.0], [1.5933816E12, 6432.0], [1.59338226E12, 10199.0], [1.5933813E12, 7511.0], [1.59338196E12, 8687.0], [1.59338166E12, 8462.0], [1.59338184E12, 8716.0], [1.59338154E12, 6312.0], [1.5933822E12, 7542.0], [1.59338124E12, 2874.0], [1.5933819E12, 6055.0], [1.59338208E12, 10133.0], [1.59338178E12, 6976.0], [1.59338148E12, 5992.0], [1.59338214E12, 7997.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59338232E12, 19194.5], [1.59338136E12, 14042.0], [1.59338202E12, 17803.5], [1.59338172E12, 15368.0], [1.59338238E12, 15083.5], [1.59338142E12, 13682.0], [1.5933816E12, 14988.0], [1.59338226E12, 18186.5], [1.5933813E12, 13600.0], [1.59338196E12, 16778.0], [1.59338166E12, 15935.0], [1.59338184E12, 16632.0], [1.59338154E12, 14613.5], [1.5933822E12, 18277.0], [1.59338124E12, 7852.0], [1.5933819E12, 17420.0], [1.59338208E12, 18003.0], [1.59338178E12, 15665.5], [1.59338148E12, 14512.0], [1.59338214E12, 18438.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338238E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11833.0, "minX": 1.0, "maxY": 22444.0, "series": [{"data": [[2.0, 16729.0], [8.0, 16230.0], [9.0, 15597.0], [10.0, 16247.5], [11.0, 15988.0], [3.0, 16497.0], [12.0, 15649.5], [13.0, 15172.0], [14.0, 15997.5], [15.0, 14679.0], [4.0, 16072.5], [1.0, 15967.0], [16.0, 15273.0], [17.0, 14244.0], [18.0, 15728.5], [19.0, 14499.0], [5.0, 16121.0], [21.0, 15593.0], [23.0, 19141.5], [6.0, 15953.0], [7.0, 16223.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 17560.5], [8.0, 22444.0], [11.0, 16921.0], [23.0, 17507.0], [3.0, 11833.0], [6.0, 16905.5], [13.0, 17893.0], [7.0, 15256.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11833.0, "minX": 1.0, "maxY": 22444.0, "series": [{"data": [[2.0, 16729.0], [8.0, 16230.0], [9.0, 15597.0], [10.0, 16247.5], [11.0, 15988.0], [3.0, 16497.0], [12.0, 15649.5], [13.0, 15172.0], [14.0, 15997.0], [15.0, 14679.0], [4.0, 16072.5], [1.0, 15967.0], [16.0, 15272.5], [17.0, 14244.0], [18.0, 15728.5], [19.0, 14499.0], [5.0, 16121.0], [21.0, 15593.0], [23.0, 19141.5], [6.0, 15953.0], [7.0, 16223.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 17560.5], [8.0, 22444.0], [11.0, 16921.0], [23.0, 17507.0], [3.0, 11833.0], [6.0, 16905.5], [13.0, 17893.0], [7.0, 15256.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.6166666666666667, "minX": 1.59338124E12, "maxY": 7.116666666666666, "series": [{"data": [[1.59338232E12, 5.166666666666667], [1.59338136E12, 7.116666666666666], [1.59338202E12, 5.6], [1.59338172E12, 6.283333333333333], [1.59338238E12, 3.2666666666666666], [1.59338142E12, 7.016666666666667], [1.5933816E12, 6.65], [1.59338226E12, 5.433333333333334], [1.5933813E12, 7.05], [1.59338196E12, 5.733333333333333], [1.59338166E12, 6.3], [1.59338184E12, 5.9], [1.59338154E12, 6.8], [1.5933822E12, 5.316666666666666], [1.59338124E12, 2.6166666666666667], [1.5933819E12, 6.0], [1.59338208E12, 5.583333333333333], [1.59338178E12, 6.5], [1.59338148E12, 7.0], [1.59338214E12, 5.333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338238E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.59338124E12, "maxY": 7.116666666666666, "series": [{"data": [[1.59338232E12, 5.333333333333333], [1.59338136E12, 7.116666666666666], [1.59338202E12, 5.6], [1.59338172E12, 6.283333333333333], [1.59338238E12, 4.766666666666667], [1.59338142E12, 7.016666666666667], [1.5933816E12, 6.65], [1.59338226E12, 5.433333333333334], [1.5933813E12, 7.05], [1.59338196E12, 5.333333333333333], [1.59338166E12, 6.3], [1.59338184E12, 5.9], [1.59338154E12, 6.8], [1.5933822E12, 5.316666666666666], [1.59338124E12, 0.95], [1.5933819E12, 5.366666666666666], [1.59338208E12, 5.583333333333333], [1.59338178E12, 6.5], [1.59338148E12, 7.0], [1.59338214E12, 5.333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5933819E12, 0.6333333333333333], [1.59338196E12, 0.4]], "isOverall": false, "label": "401", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338238E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.59338124E12, "maxY": 7.116666666666666, "series": [{"data": [[1.5933819E12, 0.6333333333333333], [1.59338196E12, 0.4]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-failure", "isController": false}, {"data": [[1.59338232E12, 5.333333333333333], [1.59338136E12, 7.116666666666666], [1.59338202E12, 5.6], [1.59338172E12, 6.283333333333333], [1.59338238E12, 4.766666666666667], [1.59338142E12, 7.016666666666667], [1.5933816E12, 6.65], [1.59338226E12, 5.433333333333334], [1.5933813E12, 7.05], [1.59338196E12, 5.333333333333333], [1.59338166E12, 6.3], [1.59338184E12, 5.9], [1.59338154E12, 6.8], [1.5933822E12, 5.316666666666666], [1.59338124E12, 0.95], [1.5933819E12, 5.366666666666666], [1.59338208E12, 5.583333333333333], [1.59338178E12, 6.5], [1.59338148E12, 7.0], [1.59338214E12, 5.333333333333333]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338238E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.59338124E12, "maxY": 7.116666666666666, "series": [{"data": [[1.59338232E12, 5.333333333333333], [1.59338136E12, 7.116666666666666], [1.59338202E12, 5.6], [1.59338172E12, 6.283333333333333], [1.59338238E12, 4.766666666666667], [1.59338142E12, 7.016666666666667], [1.5933816E12, 6.65], [1.59338226E12, 5.433333333333334], [1.5933813E12, 7.05], [1.59338196E12, 5.333333333333333], [1.59338166E12, 6.3], [1.59338184E12, 5.9], [1.59338154E12, 6.8], [1.5933822E12, 5.316666666666666], [1.59338124E12, 0.95], [1.5933819E12, 5.366666666666666], [1.59338208E12, 5.583333333333333], [1.59338178E12, 6.5], [1.59338148E12, 7.0], [1.59338214E12, 5.333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5933819E12, 0.6333333333333333], [1.59338196E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338238E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

