/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2178.0, "minX": 0.0, "maxY": 62725.0, "series": [{"data": [[0.0, 2178.0], [0.1, 5982.0], [0.2, 6141.0], [0.3, 6141.0], [0.4, 7730.0], [0.5, 12608.0], [0.6, 15466.0], [0.7, 16127.0], [0.8, 16449.0], [0.9, 16800.0], [1.0, 18451.0], [1.1, 19499.0], [1.2, 21106.0], [1.3, 21257.0], [1.4, 21257.0], [1.5, 21274.0], [1.6, 21497.0], [1.7, 21901.0], [1.8, 22597.0], [1.9, 22604.0], [2.0, 22681.0], [2.1, 22868.0], [2.2, 22982.0], [2.3, 22984.0], [2.4, 23142.0], [2.5, 23173.0], [2.6, 23232.0], [2.7, 23240.0], [2.8, 23616.0], [2.9, 23617.0], [3.0, 23883.0], [3.1, 24442.0], [3.2, 24949.0], [3.3, 25090.0], [3.4, 25100.0], [3.5, 25199.0], [3.6, 25342.0], [3.7, 25434.0], [3.8, 25483.0], [3.9, 25485.0], [4.0, 25487.0], [4.1, 25513.0], [4.2, 25513.0], [4.3, 25518.0], [4.4, 25540.0], [4.5, 25545.0], [4.6, 25609.0], [4.7, 25750.0], [4.8, 25805.0], [4.9, 25819.0], [5.0, 25986.0], [5.1, 26023.0], [5.2, 26027.0], [5.3, 26260.0], [5.4, 26318.0], [5.5, 26450.0], [5.6, 26645.0], [5.7, 26722.0], [5.8, 26884.0], [5.9, 26917.0], [6.0, 26936.0], [6.1, 27000.0], [6.2, 27083.0], [6.3, 27093.0], [6.4, 27141.0], [6.5, 27171.0], [6.6, 27188.0], [6.7, 27227.0], [6.8, 27355.0], [6.9, 27361.0], [7.0, 27378.0], [7.1, 27385.0], [7.2, 27470.0], [7.3, 27715.0], [7.4, 27783.0], [7.5, 27808.0], [7.6, 27860.0], [7.7, 27890.0], [7.8, 27941.0], [7.9, 27953.0], [8.0, 27975.0], [8.1, 28041.0], [8.2, 28142.0], [8.3, 28361.0], [8.4, 28374.0], [8.5, 28424.0], [8.6, 28432.0], [8.7, 28449.0], [8.8, 28482.0], [8.9, 28497.0], [9.0, 28630.0], [9.1, 28672.0], [9.2, 28690.0], [9.3, 28880.0], [9.4, 29028.0], [9.5, 29142.0], [9.6, 29248.0], [9.7, 29251.0], [9.8, 29398.0], [9.9, 29436.0], [10.0, 29451.0], [10.1, 29616.0], [10.2, 29628.0], [10.3, 29746.0], [10.4, 29749.0], [10.5, 29767.0], [10.6, 29774.0], [10.7, 29789.0], [10.8, 29848.0], [10.9, 29856.0], [11.0, 29869.0], [11.1, 29911.0], [11.2, 29916.0], [11.3, 29927.0], [11.4, 29990.0], [11.5, 30041.0], [11.6, 30084.0], [11.7, 30201.0], [11.8, 30207.0], [11.9, 30259.0], [12.0, 30259.0], [12.1, 30305.0], [12.2, 30382.0], [12.3, 30385.0], [12.4, 30406.0], [12.5, 30416.0], [12.6, 30449.0], [12.7, 30504.0], [12.8, 30510.0], [12.9, 30552.0], [13.0, 30566.0], [13.1, 30581.0], [13.2, 30790.0], [13.3, 30793.0], [13.4, 30807.0], [13.5, 30812.0], [13.6, 30816.0], [13.7, 30873.0], [13.8, 30881.0], [13.9, 30943.0], [14.0, 31069.0], [14.1, 31078.0], [14.2, 31084.0], [14.3, 31153.0], [14.4, 31424.0], [14.5, 31532.0], [14.6, 31549.0], [14.7, 31553.0], [14.8, 31606.0], [14.9, 31655.0], [15.0, 31670.0], [15.1, 31671.0], [15.2, 31693.0], [15.3, 31694.0], [15.4, 31757.0], [15.5, 31775.0], [15.6, 31806.0], [15.7, 31843.0], [15.8, 31890.0], [15.9, 31917.0], [16.0, 31986.0], [16.1, 31986.0], [16.2, 32079.0], [16.3, 32102.0], [16.4, 32142.0], [16.5, 32146.0], [16.6, 32151.0], [16.7, 32213.0], [16.8, 32303.0], [16.9, 32502.0], [17.0, 32532.0], [17.1, 32562.0], [17.2, 32615.0], [17.3, 32655.0], [17.4, 32663.0], [17.5, 32669.0], [17.6, 32791.0], [17.7, 32823.0], [17.8, 32845.0], [17.9, 32854.0], [18.0, 32886.0], [18.1, 32899.0], [18.2, 32899.0], [18.3, 32918.0], [18.4, 33004.0], [18.5, 33017.0], [18.6, 33040.0], [18.7, 33047.0], [18.8, 33085.0], [18.9, 33146.0], [19.0, 33179.0], [19.1, 33200.0], [19.2, 33211.0], [19.3, 33217.0], [19.4, 33217.0], [19.5, 33260.0], [19.6, 33272.0], [19.7, 33388.0], [19.8, 33399.0], [19.9, 33402.0], [20.0, 33450.0], [20.1, 33464.0], [20.2, 33512.0], [20.3, 33520.0], [20.4, 33551.0], [20.5, 33611.0], [20.6, 33637.0], [20.7, 33639.0], [20.8, 33653.0], [20.9, 33680.0], [21.0, 33684.0], [21.1, 33803.0], [21.2, 33861.0], [21.3, 33901.0], [21.4, 33920.0], [21.5, 33925.0], [21.6, 33927.0], [21.7, 33981.0], [21.8, 34004.0], [21.9, 34037.0], [22.0, 34047.0], [22.1, 34097.0], [22.2, 34109.0], [22.3, 34111.0], [22.4, 34130.0], [22.5, 34162.0], [22.6, 34176.0], [22.7, 34177.0], [22.8, 34179.0], [22.9, 34209.0], [23.0, 34236.0], [23.1, 34304.0], [23.2, 34330.0], [23.3, 34330.0], [23.4, 34365.0], [23.5, 34374.0], [23.6, 34387.0], [23.7, 34414.0], [23.8, 34415.0], [23.9, 34458.0], [24.0, 34468.0], [24.1, 34480.0], [24.2, 34518.0], [24.3, 34523.0], [24.4, 34526.0], [24.5, 34548.0], [24.6, 34554.0], [24.7, 34561.0], [24.8, 34597.0], [24.9, 34601.0], [25.0, 34650.0], [25.1, 34657.0], [25.2, 34713.0], [25.3, 34730.0], [25.4, 34754.0], [25.5, 34782.0], [25.6, 34783.0], [25.7, 34817.0], [25.8, 34875.0], [25.9, 34889.0], [26.0, 34895.0], [26.1, 34911.0], [26.2, 34915.0], [26.3, 34927.0], [26.4, 34987.0], [26.5, 35031.0], [26.6, 35050.0], [26.7, 35054.0], [26.8, 35065.0], [26.9, 35084.0], [27.0, 35086.0], [27.1, 35088.0], [27.2, 35088.0], [27.3, 35182.0], [27.4, 35187.0], [27.5, 35225.0], [27.6, 35234.0], [27.7, 35241.0], [27.8, 35250.0], [27.9, 35262.0], [28.0, 35266.0], [28.1, 35299.0], [28.2, 35306.0], [28.3, 35346.0], [28.4, 35348.0], [28.5, 35348.0], [28.6, 35355.0], [28.7, 35365.0], [28.8, 35373.0], [28.9, 35383.0], [29.0, 35393.0], [29.1, 35401.0], [29.2, 35411.0], [29.3, 35420.0], [29.4, 35436.0], [29.5, 35450.0], [29.6, 35483.0], [29.7, 35520.0], [29.8, 35561.0], [29.9, 35572.0], [30.0, 35603.0], [30.1, 35629.0], [30.2, 35677.0], [30.3, 35682.0], [30.4, 35692.0], [30.5, 35696.0], [30.6, 35701.0], [30.7, 35706.0], [30.8, 35756.0], [30.9, 35827.0], [31.0, 35831.0], [31.1, 35862.0], [31.2, 35863.0], [31.3, 35889.0], [31.4, 35926.0], [31.5, 35951.0], [31.6, 35960.0], [31.7, 35986.0], [31.8, 35989.0], [31.9, 35993.0], [32.0, 36056.0], [32.1, 36081.0], [32.2, 36140.0], [32.3, 36165.0], [32.4, 36167.0], [32.5, 36228.0], [32.6, 36335.0], [32.7, 36354.0], [32.8, 36393.0], [32.9, 36404.0], [33.0, 36436.0], [33.1, 36436.0], [33.2, 36439.0], [33.3, 36441.0], [33.4, 36448.0], [33.5, 36526.0], [33.6, 36567.0], [33.7, 36577.0], [33.8, 36584.0], [33.9, 36606.0], [34.0, 36628.0], [34.1, 36643.0], [34.2, 36665.0], [34.3, 36689.0], [34.4, 36690.0], [34.5, 36690.0], [34.6, 36691.0], [34.7, 36727.0], [34.8, 36763.0], [34.9, 36771.0], [35.0, 36792.0], [35.1, 36795.0], [35.2, 36800.0], [35.3, 36803.0], [35.4, 36829.0], [35.5, 36869.0], [35.6, 36899.0], [35.7, 36951.0], [35.8, 36969.0], [35.9, 36981.0], [36.0, 36984.0], [36.1, 36986.0], [36.2, 36995.0], [36.3, 37008.0], [36.4, 37015.0], [36.5, 37021.0], [36.6, 37028.0], [36.7, 37080.0], [36.8, 37124.0], [36.9, 37161.0], [37.0, 37171.0], [37.1, 37174.0], [37.2, 37177.0], [37.3, 37188.0], [37.4, 37191.0], [37.5, 37195.0], [37.6, 37201.0], [37.7, 37206.0], [37.8, 37211.0], [37.9, 37215.0], [38.0, 37228.0], [38.1, 37252.0], [38.2, 37264.0], [38.3, 37266.0], [38.4, 37279.0], [38.5, 37329.0], [38.6, 37345.0], [38.7, 37347.0], [38.8, 37355.0], [38.9, 37360.0], [39.0, 37362.0], [39.1, 37384.0], [39.2, 37401.0], [39.3, 37402.0], [39.4, 37405.0], [39.5, 37423.0], [39.6, 37448.0], [39.7, 37451.0], [39.8, 37464.0], [39.9, 37474.0], [40.0, 37476.0], [40.1, 37495.0], [40.2, 37502.0], [40.3, 37510.0], [40.4, 37561.0], [40.5, 37579.0], [40.6, 37590.0], [40.7, 37594.0], [40.8, 37605.0], [40.9, 37629.0], [41.0, 37710.0], [41.1, 37730.0], [41.2, 37767.0], [41.3, 37780.0], [41.4, 37782.0], [41.5, 37789.0], [41.6, 37794.0], [41.7, 37816.0], [41.8, 37838.0], [41.9, 37890.0], [42.0, 37890.0], [42.1, 37896.0], [42.2, 37908.0], [42.3, 37939.0], [42.4, 37957.0], [42.5, 37975.0], [42.6, 37978.0], [42.7, 37984.0], [42.8, 37990.0], [42.9, 37993.0], [43.0, 38000.0], [43.1, 38006.0], [43.2, 38017.0], [43.3, 38020.0], [43.4, 38029.0], [43.5, 38039.0], [43.6, 38039.0], [43.7, 38054.0], [43.8, 38057.0], [43.9, 38066.0], [44.0, 38101.0], [44.1, 38129.0], [44.2, 38132.0], [44.3, 38150.0], [44.4, 38164.0], [44.5, 38212.0], [44.6, 38213.0], [44.7, 38220.0], [44.8, 38252.0], [44.9, 38276.0], [45.0, 38291.0], [45.1, 38307.0], [45.2, 38308.0], [45.3, 38310.0], [45.4, 38332.0], [45.5, 38336.0], [45.6, 38370.0], [45.7, 38382.0], [45.8, 38402.0], [45.9, 38420.0], [46.0, 38429.0], [46.1, 38436.0], [46.2, 38448.0], [46.3, 38459.0], [46.4, 38491.0], [46.5, 38497.0], [46.6, 38502.0], [46.7, 38516.0], [46.8, 38517.0], [46.9, 38518.0], [47.0, 38538.0], [47.1, 38556.0], [47.2, 38559.0], [47.3, 38571.0], [47.4, 38578.0], [47.5, 38615.0], [47.6, 38675.0], [47.7, 38683.0], [47.8, 38697.0], [47.9, 38727.0], [48.0, 38731.0], [48.1, 38790.0], [48.2, 38790.0], [48.3, 38801.0], [48.4, 38841.0], [48.5, 38863.0], [48.6, 38895.0], [48.7, 38903.0], [48.8, 38922.0], [48.9, 38927.0], [49.0, 38927.0], [49.1, 38928.0], [49.2, 38943.0], [49.3, 38955.0], [49.4, 38956.0], [49.5, 38956.0], [49.6, 38956.0], [49.7, 38973.0], [49.8, 38974.0], [49.9, 38986.0], [50.0, 39010.0], [50.1, 39023.0], [50.2, 39042.0], [50.3, 39052.0], [50.4, 39058.0], [50.5, 39075.0], [50.6, 39079.0], [50.7, 39084.0], [50.8, 39108.0], [50.9, 39142.0], [51.0, 39169.0], [51.1, 39171.0], [51.2, 39205.0], [51.3, 39226.0], [51.4, 39226.0], [51.5, 39250.0], [51.6, 39276.0], [51.7, 39304.0], [51.8, 39305.0], [51.9, 39344.0], [52.0, 39348.0], [52.1, 39350.0], [52.2, 39373.0], [52.3, 39388.0], [52.4, 39398.0], [52.5, 39402.0], [52.6, 39404.0], [52.7, 39409.0], [52.8, 39419.0], [52.9, 39438.0], [53.0, 39450.0], [53.1, 39457.0], [53.2, 39461.0], [53.3, 39473.0], [53.4, 39496.0], [53.5, 39511.0], [53.6, 39576.0], [53.7, 39604.0], [53.8, 39609.0], [53.9, 39656.0], [54.0, 39693.0], [54.1, 39694.0], [54.2, 39728.0], [54.3, 39733.0], [54.4, 39777.0], [54.5, 39798.0], [54.6, 39827.0], [54.7, 39829.0], [54.8, 39831.0], [54.9, 39843.0], [55.0, 39851.0], [55.1, 39857.0], [55.2, 39868.0], [55.3, 39869.0], [55.4, 39920.0], [55.5, 39925.0], [55.6, 39950.0], [55.7, 39954.0], [55.8, 39956.0], [55.9, 39963.0], [56.0, 40003.0], [56.1, 40004.0], [56.2, 40010.0], [56.3, 40074.0], [56.4, 40081.0], [56.5, 40101.0], [56.6, 40121.0], [56.7, 40123.0], [56.8, 40171.0], [56.9, 40172.0], [57.0, 40220.0], [57.1, 40222.0], [57.2, 40227.0], [57.3, 40239.0], [57.4, 40308.0], [57.5, 40326.0], [57.6, 40329.0], [57.7, 40338.0], [57.8, 40351.0], [57.9, 40353.0], [58.0, 40358.0], [58.1, 40360.0], [58.2, 40389.0], [58.3, 40393.0], [58.4, 40454.0], [58.5, 40503.0], [58.6, 40514.0], [58.7, 40528.0], [58.8, 40539.0], [58.9, 40593.0], [59.0, 40609.0], [59.1, 40635.0], [59.2, 40644.0], [59.3, 40656.0], [59.4, 40657.0], [59.5, 40661.0], [59.6, 40703.0], [59.7, 40742.0], [59.8, 40744.0], [59.9, 40783.0], [60.0, 40805.0], [60.1, 40839.0], [60.2, 40870.0], [60.3, 40871.0], [60.4, 40874.0], [60.5, 40900.0], [60.6, 40935.0], [60.7, 40940.0], [60.8, 40941.0], [60.9, 40948.0], [61.0, 40949.0], [61.1, 40949.0], [61.2, 40953.0], [61.3, 40954.0], [61.4, 40955.0], [61.5, 41010.0], [61.6, 41016.0], [61.7, 41021.0], [61.8, 41027.0], [61.9, 41057.0], [62.0, 41075.0], [62.1, 41086.0], [62.2, 41117.0], [62.3, 41129.0], [62.4, 41129.0], [62.5, 41131.0], [62.6, 41140.0], [62.7, 41146.0], [62.8, 41179.0], [62.9, 41207.0], [63.0, 41218.0], [63.1, 41230.0], [63.2, 41280.0], [63.3, 41283.0], [63.4, 41354.0], [63.5, 41389.0], [63.6, 41405.0], [63.7, 41406.0], [63.8, 41418.0], [63.9, 41451.0], [64.0, 41455.0], [64.1, 41476.0], [64.2, 41487.0], [64.3, 41497.0], [64.4, 41573.0], [64.5, 41625.0], [64.6, 41667.0], [64.7, 41707.0], [64.8, 41720.0], [64.9, 41731.0], [65.0, 41774.0], [65.1, 41779.0], [65.2, 41781.0], [65.3, 41794.0], [65.4, 41823.0], [65.5, 41839.0], [65.6, 41842.0], [65.7, 41866.0], [65.8, 41919.0], [65.9, 41926.0], [66.0, 41932.0], [66.1, 41957.0], [66.2, 41965.0], [66.3, 41975.0], [66.4, 41975.0], [66.5, 41992.0], [66.6, 42014.0], [66.7, 42058.0], [66.8, 42060.0], [66.9, 42062.0], [67.0, 42068.0], [67.1, 42074.0], [67.2, 42090.0], [67.3, 42102.0], [67.4, 42113.0], [67.5, 42116.0], [67.6, 42135.0], [67.7, 42142.0], [67.8, 42200.0], [67.9, 42214.0], [68.0, 42215.0], [68.1, 42226.0], [68.2, 42232.0], [68.3, 42248.0], [68.4, 42250.0], [68.5, 42257.0], [68.6, 42300.0], [68.7, 42306.0], [68.8, 42317.0], [68.9, 42329.0], [69.0, 42343.0], [69.1, 42360.0], [69.2, 42364.0], [69.3, 42379.0], [69.4, 42401.0], [69.5, 42409.0], [69.6, 42418.0], [69.7, 42422.0], [69.8, 42441.0], [69.9, 42447.0], [70.0, 42448.0], [70.1, 42476.0], [70.2, 42491.0], [70.3, 42510.0], [70.4, 42542.0], [70.5, 42542.0], [70.6, 42554.0], [70.7, 42593.0], [70.8, 42653.0], [70.9, 42690.0], [71.0, 42712.0], [71.1, 42718.0], [71.2, 42726.0], [71.3, 42738.0], [71.4, 42740.0], [71.5, 42751.0], [71.6, 42784.0], [71.7, 42786.0], [71.8, 42789.0], [71.9, 42809.0], [72.0, 42832.0], [72.1, 42845.0], [72.2, 42885.0], [72.3, 42910.0], [72.4, 42925.0], [72.5, 42935.0], [72.6, 42944.0], [72.7, 42954.0], [72.8, 42961.0], [72.9, 43043.0], [73.0, 43074.0], [73.1, 43090.0], [73.2, 43095.0], [73.3, 43156.0], [73.4, 43161.0], [73.5, 43161.0], [73.6, 43179.0], [73.7, 43184.0], [73.8, 43186.0], [73.9, 43208.0], [74.0, 43212.0], [74.1, 43221.0], [74.2, 43239.0], [74.3, 43254.0], [74.4, 43280.0], [74.5, 43291.0], [74.6, 43313.0], [74.7, 43349.0], [74.8, 43372.0], [74.9, 43434.0], [75.0, 43450.0], [75.1, 43469.0], [75.2, 43475.0], [75.3, 43489.0], [75.4, 43610.0], [75.5, 43616.0], [75.6, 43627.0], [75.7, 43645.0], [75.8, 43669.0], [75.9, 43678.0], [76.0, 43682.0], [76.1, 43704.0], [76.2, 43734.0], [76.3, 43746.0], [76.4, 43755.0], [76.5, 43757.0], [76.6, 43839.0], [76.7, 43862.0], [76.8, 43874.0], [76.9, 43879.0], [77.0, 43903.0], [77.1, 43933.0], [77.2, 43951.0], [77.3, 43966.0], [77.4, 43973.0], [77.5, 43977.0], [77.6, 43978.0], [77.7, 44121.0], [77.8, 44162.0], [77.9, 44198.0], [78.0, 44231.0], [78.1, 44241.0], [78.2, 44245.0], [78.3, 44266.0], [78.4, 44287.0], [78.5, 44303.0], [78.6, 44304.0], [78.7, 44306.0], [78.8, 44316.0], [78.9, 44336.0], [79.0, 44364.0], [79.1, 44382.0], [79.2, 44404.0], [79.3, 44415.0], [79.4, 44420.0], [79.5, 44445.0], [79.6, 44446.0], [79.7, 44446.0], [79.8, 44462.0], [79.9, 44468.0], [80.0, 44468.0], [80.1, 44474.0], [80.2, 44491.0], [80.3, 44516.0], [80.4, 44517.0], [80.5, 44572.0], [80.6, 44583.0], [80.7, 44637.0], [80.8, 44641.0], [80.9, 44651.0], [81.0, 44671.0], [81.1, 44678.0], [81.2, 44719.0], [81.3, 44742.0], [81.4, 44776.0], [81.5, 44832.0], [81.6, 44848.0], [81.7, 44870.0], [81.8, 44893.0], [81.9, 44909.0], [82.0, 44927.0], [82.1, 44937.0], [82.2, 44938.0], [82.3, 44941.0], [82.4, 44947.0], [82.5, 44983.0], [82.6, 44987.0], [82.7, 44992.0], [82.8, 45039.0], [82.9, 45042.0], [83.0, 45049.0], [83.1, 45062.0], [83.2, 45092.0], [83.3, 45102.0], [83.4, 45127.0], [83.5, 45155.0], [83.6, 45193.0], [83.7, 45205.0], [83.8, 45237.0], [83.9, 45241.0], [84.0, 45247.0], [84.1, 45256.0], [84.2, 45304.0], [84.3, 45323.0], [84.4, 45383.0], [84.5, 45392.0], [84.6, 45487.0], [84.7, 45492.0], [84.8, 45505.0], [84.9, 45526.0], [85.0, 45540.0], [85.1, 45564.0], [85.2, 45579.0], [85.3, 45630.0], [85.4, 45648.0], [85.5, 45652.0], [85.6, 45664.0], [85.7, 45666.0], [85.8, 45684.0], [85.9, 45709.0], [86.0, 45725.0], [86.1, 45728.0], [86.2, 45806.0], [86.3, 45840.0], [86.4, 45845.0], [86.5, 45859.0], [86.6, 45913.0], [86.7, 45963.0], [86.8, 45975.0], [86.9, 46002.0], [87.0, 46005.0], [87.1, 46106.0], [87.2, 46174.0], [87.3, 46175.0], [87.4, 46272.0], [87.5, 46281.0], [87.6, 46305.0], [87.7, 46316.0], [87.8, 46333.0], [87.9, 46336.0], [88.0, 46342.0], [88.1, 46397.0], [88.2, 46398.0], [88.3, 46559.0], [88.4, 46601.0], [88.5, 46603.0], [88.6, 46608.0], [88.7, 46609.0], [88.8, 46693.0], [88.9, 46700.0], [89.0, 46713.0], [89.1, 46735.0], [89.2, 46735.0], [89.3, 46740.0], [89.4, 46787.0], [89.5, 46801.0], [89.6, 46801.0], [89.7, 46864.0], [89.8, 46892.0], [89.9, 46895.0], [90.0, 46909.0], [90.1, 46925.0], [90.2, 46975.0], [90.3, 47008.0], [90.4, 47013.0], [90.5, 47056.0], [90.6, 47085.0], [90.7, 47104.0], [90.8, 47206.0], [90.9, 47244.0], [91.0, 47252.0], [91.1, 47254.0], [91.2, 47266.0], [91.3, 47267.0], [91.4, 47283.0], [91.5, 47358.0], [91.6, 47376.0], [91.7, 47439.0], [91.8, 47495.0], [91.9, 47515.0], [92.0, 47593.0], [92.1, 47644.0], [92.2, 47709.0], [92.3, 47875.0], [92.4, 47881.0], [92.5, 47890.0], [92.6, 47925.0], [92.7, 47982.0], [92.8, 47984.0], [92.9, 47989.0], [93.0, 48001.0], [93.1, 48084.0], [93.2, 48090.0], [93.3, 48142.0], [93.4, 48150.0], [93.5, 48153.0], [93.6, 48155.0], [93.7, 48200.0], [93.8, 48223.0], [93.9, 48256.0], [94.0, 48257.0], [94.1, 48385.0], [94.2, 48466.0], [94.3, 48475.0], [94.4, 48479.0], [94.5, 48507.0], [94.6, 48509.0], [94.7, 48629.0], [94.8, 48636.0], [94.9, 48722.0], [95.0, 48790.0], [95.1, 48956.0], [95.2, 48987.0], [95.3, 49051.0], [95.4, 49074.0], [95.5, 49081.0], [95.6, 49140.0], [95.7, 49221.0], [95.8, 49276.0], [95.9, 49419.0], [96.0, 49581.0], [96.1, 49632.0], [96.2, 49655.0], [96.3, 49744.0], [96.4, 49936.0], [96.5, 50058.0], [96.6, 50094.0], [96.7, 50193.0], [96.8, 50259.0], [96.9, 50305.0], [97.0, 50472.0], [97.1, 50476.0], [97.2, 50555.0], [97.3, 50785.0], [97.4, 51075.0], [97.5, 51558.0], [97.6, 51847.0], [97.7, 52245.0], [97.8, 52309.0], [97.9, 52313.0], [98.0, 52434.0], [98.1, 52515.0], [98.2, 52526.0], [98.3, 52624.0], [98.4, 52795.0], [98.5, 52928.0], [98.6, 52938.0], [98.7, 53102.0], [98.8, 53121.0], [98.9, 53817.0], [99.0, 53866.0], [99.1, 54052.0], [99.2, 54723.0], [99.3, 54927.0], [99.4, 55006.0], [99.5, 55203.0], [99.6, 55522.0], [99.7, 56296.0], [99.8, 57269.0], [99.9, 62725.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 13.0, "series": [{"data": [[34500.0, 7.0], [34100.0, 7.0], [32900.0, 1.0], [33300.0, 2.0], [35300.0, 9.0], [35700.0, 3.0], [36100.0, 3.0], [34900.0, 4.0], [36500.0, 4.0], [38900.0, 13.0], [37300.0, 7.0], [37700.0, 7.0], [38100.0, 5.0], [38500.0, 9.0], [36900.0, 6.0], [39700.0, 4.0], [39300.0, 8.0], [40100.0, 5.0], [40900.0, 10.0], [40500.0, 5.0], [42100.0, 5.0], [42500.0, 5.0], [42900.0, 6.0], [41700.0, 7.0], [41300.0, 2.0], [44900.0, 9.0], [43300.0, 3.0], [44500.0, 4.0], [43700.0, 5.0], [44100.0, 3.0], [46100.0, 3.0], [45300.0, 4.0], [46500.0, 1.0], [45700.0, 3.0], [46900.0, 3.0], [48900.0, 2.0], [48100.0, 4.0], [47300.0, 2.0], [47700.0, 1.0], [48500.0, 2.0], [50100.0, 1.0], [50500.0, 1.0], [49700.0, 1.0], [52500.0, 2.0], [52900.0, 2.0], [54900.0, 1.0], [2100.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [12600.0, 1.0], [15400.0, 1.0], [16100.0, 1.0], [16400.0, 1.0], [16800.0, 1.0], [18400.0, 1.0], [19400.0, 1.0], [21200.0, 2.0], [21400.0, 1.0], [22600.0, 2.0], [22800.0, 1.0], [23200.0, 2.0], [23600.0, 2.0], [24400.0, 1.0], [23800.0, 1.0], [25000.0, 1.0], [25400.0, 4.0], [25600.0, 1.0], [25800.0, 2.0], [26000.0, 2.0], [26200.0, 1.0], [26600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [27000.0, 3.0], [27200.0, 1.0], [27400.0, 1.0], [27800.0, 3.0], [28400.0, 5.0], [28600.0, 3.0], [28000.0, 1.0], [29600.0, 2.0], [29400.0, 2.0], [29200.0, 2.0], [29000.0, 1.0], [28800.0, 1.0], [29800.0, 3.0], [30400.0, 3.0], [30200.0, 4.0], [30000.0, 2.0], [31000.0, 3.0], [31600.0, 6.0], [31400.0, 1.0], [30800.0, 5.0], [32000.0, 1.0], [32600.0, 4.0], [31800.0, 3.0], [32200.0, 1.0], [32800.0, 6.0], [34400.0, 5.0], [33200.0, 5.0], [34800.0, 4.0], [34000.0, 4.0], [33600.0, 6.0], [35200.0, 7.0], [36800.0, 5.0], [35600.0, 6.0], [36400.0, 6.0], [36000.0, 2.0], [37200.0, 9.0], [38400.0, 8.0], [38000.0, 10.0], [38800.0, 4.0], [37600.0, 2.0], [39600.0, 5.0], [40400.0, 1.0], [40000.0, 5.0], [40800.0, 5.0], [39200.0, 5.0], [42000.0, 7.0], [42400.0, 9.0], [41200.0, 5.0], [42800.0, 4.0], [41600.0, 2.0], [44400.0, 11.0], [43600.0, 8.0], [43200.0, 7.0], [44800.0, 4.0], [45200.0, 5.0], [46800.0, 5.0], [45600.0, 6.0], [46000.0, 2.0], [48000.0, 3.0], [48400.0, 3.0], [47200.0, 7.0], [47600.0, 1.0], [49200.0, 2.0], [50400.0, 2.0], [49600.0, 2.0], [50000.0, 2.0], [52400.0, 1.0], [54000.0, 1.0], [55200.0, 1.0], [57200.0, 1.0], [34700.0, 5.0], [33900.0, 5.0], [33500.0, 3.0], [34300.0, 6.0], [33100.0, 2.0], [35900.0, 6.0], [35500.0, 3.0], [35100.0, 2.0], [36700.0, 5.0], [36300.0, 3.0], [38300.0, 7.0], [37100.0, 8.0], [37500.0, 6.0], [38700.0, 4.0], [37900.0, 8.0], [40300.0, 10.0], [39900.0, 6.0], [40700.0, 4.0], [39500.0, 2.0], [39100.0, 4.0], [42700.0, 9.0], [41900.0, 8.0], [41500.0, 1.0], [42300.0, 8.0], [41100.0, 7.0], [43100.0, 6.0], [43900.0, 7.0], [44300.0, 7.0], [44700.0, 3.0], [45500.0, 5.0], [46300.0, 7.0], [46700.0, 6.0], [45900.0, 3.0], [45100.0, 4.0], [47100.0, 1.0], [47500.0, 2.0], [47900.0, 4.0], [48700.0, 2.0], [49100.0, 1.0], [48300.0, 1.0], [50300.0, 1.0], [50700.0, 1.0], [49500.0, 1.0], [49900.0, 1.0], [52300.0, 2.0], [53100.0, 2.0], [52700.0, 1.0], [51500.0, 1.0], [54700.0, 1.0], [55500.0, 1.0], [62700.0, 1.0], [21100.0, 1.0], [21900.0, 1.0], [22500.0, 1.0], [22900.0, 2.0], [23100.0, 2.0], [24900.0, 1.0], [25100.0, 2.0], [25500.0, 5.0], [25300.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [26300.0, 1.0], [26900.0, 2.0], [27100.0, 3.0], [27300.0, 4.0], [26700.0, 1.0], [28300.0, 2.0], [27900.0, 3.0], [27700.0, 2.0], [28100.0, 1.0], [29100.0, 1.0], [29300.0, 1.0], [29900.0, 4.0], [30300.0, 3.0], [29700.0, 5.0], [30500.0, 5.0], [30700.0, 2.0], [31500.0, 3.0], [31700.0, 2.0], [31100.0, 1.0], [30900.0, 1.0], [31900.0, 3.0], [32100.0, 4.0], [32300.0, 1.0], [32500.0, 3.0], [32700.0, 1.0], [33000.0, 5.0], [34200.0, 2.0], [34600.0, 3.0], [33400.0, 3.0], [33800.0, 2.0], [35000.0, 8.0], [36600.0, 8.0], [35400.0, 6.0], [35800.0, 5.0], [36200.0, 1.0], [37400.0, 10.0], [38200.0, 6.0], [37800.0, 5.0], [37000.0, 5.0], [38600.0, 4.0], [40200.0, 4.0], [40600.0, 6.0], [39800.0, 8.0], [39400.0, 10.0], [39000.0, 8.0], [42200.0, 8.0], [41400.0, 8.0], [41800.0, 4.0], [41000.0, 7.0], [43000.0, 4.0], [42600.0, 2.0], [44600.0, 5.0], [45000.0, 5.0], [44200.0, 5.0], [43800.0, 4.0], [43400.0, 5.0], [46200.0, 2.0], [47000.0, 4.0], [45400.0, 2.0], [46600.0, 5.0], [45800.0, 4.0], [49000.0, 3.0], [48200.0, 4.0], [48600.0, 2.0], [47400.0, 2.0], [47800.0, 3.0], [50200.0, 1.0], [51000.0, 1.0], [49400.0, 1.0], [51800.0, 1.0], [52200.0, 1.0], [52600.0, 1.0], [55000.0, 1.0], [53800.0, 2.0], [56200.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.47422680412374, "minX": 1.59329706E12, "maxY": 100.0, "series": [{"data": [[1.59329736E12, 97.27891156462586], [1.59329706E12, 100.0], [1.59329724E12, 100.0], [1.59329742E12, 45.47422680412374], [1.59329712E12, 100.0], [1.5932973E12, 100.0], [1.59329718E12, 100.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329742E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2178.0, "minX": 1.0, "maxY": 48200.0, "series": [{"data": [[2.0, 7730.0], [3.0, 5982.0], [4.0, 6141.0], [5.0, 7624.0], [6.0, 15466.0], [7.0, 19499.0], [8.0, 25805.0], [9.0, 16800.0], [10.0, 31606.0], [11.0, 16127.0], [12.0, 12608.0], [13.0, 27355.0], [14.0, 16449.0], [15.0, 23232.0], [16.0, 18451.0], [17.0, 32854.0], [18.0, 22984.0], [19.0, 22681.0], [20.0, 26450.0], [21.0, 35306.0], [22.0, 27361.0], [23.0, 26318.0], [24.0, 29789.0], [25.0, 33211.0], [26.0, 30943.0], [27.0, 33399.0], [28.0, 27093.0], [29.0, 28937.5], [30.0, 30807.0], [31.0, 28374.0], [33.0, 34657.0], [32.0, 27941.0], [35.0, 34915.0], [34.0, 34987.0], [37.0, 38164.0], [36.0, 31757.0], [39.0, 33450.0], [38.0, 45039.0], [41.0, 37174.0], [40.0, 44198.0], [43.0, 32694.0], [45.0, 42062.0], [44.0, 45963.0], [47.0, 36829.0], [46.0, 42068.0], [49.0, 43156.0], [48.0, 33653.0], [51.0, 37757.5], [50.0, 33179.0], [53.0, 38039.0], [52.0, 38435.5], [55.0, 46693.0], [54.0, 46713.0], [57.0, 43973.0], [56.0, 31655.0], [59.0, 40329.0], [58.0, 44187.0], [61.0, 35450.0], [60.0, 48200.0], [63.0, 38101.0], [62.0, 39829.0], [67.0, 37978.0], [66.0, 39458.0], [65.0, 42510.0], [64.0, 35989.0], [71.0, 38734.5], [70.0, 44117.5], [69.0, 41823.0], [68.0, 40900.0], [75.0, 38332.0], [74.0, 42495.5], [73.0, 37804.0], [72.0, 44121.0], [79.0, 37780.0], [78.0, 43054.0], [77.0, 37015.0], [76.0, 39439.0], [83.0, 44678.0], [82.0, 36995.0], [81.0, 35756.0], [80.0, 34330.0], [87.0, 38307.0], [86.0, 42922.5], [85.0, 36285.0], [84.0, 40252.5], [91.0, 41397.0], [90.0, 43824.75], [89.0, 41143.75], [88.0, 30259.0], [95.0, 42173.399999999994], [94.0, 35603.0], [93.0, 38943.0], [92.0, 38208.666666666664], [99.0, 41135.74418604651], [98.0, 42631.333333333336], [97.0, 40449.0], [96.0, 39431.5], [100.0, 38936.598773006095], [1.0, 2178.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[94.31099999999999, 38608.05699999993]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1891.5, "minX": 1.59329706E12, "maxY": 5445.0, "series": [{"data": [[1.59329736E12, 4851.0], [1.59329706E12, 4818.0], [1.59329724E12, 4983.0], [1.59329742E12, 3201.0], [1.59329712E12, 5445.0], [1.5932973E12, 4950.0], [1.59329718E12, 4752.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59329736E12, 2866.5], [1.59329706E12, 2847.0], [1.59329724E12, 2944.5], [1.59329742E12, 1891.5], [1.59329712E12, 3217.5], [1.5932973E12, 2925.0], [1.59329718E12, 2808.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329742E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 33772.41237113401, "minX": 1.59329706E12, "maxY": 41147.87074829932, "series": [{"data": [[1.59329736E12, 41147.87074829932], [1.59329706E12, 34895.02739726028], [1.59329724E12, 39710.82119205298], [1.59329742E12, 33772.41237113401], [1.59329712E12, 39239.1696969697], [1.5932973E12, 39710.880000000005], [1.59329718E12, 40008.979166666635]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329742E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 33772.26804123711, "minX": 1.59329706E12, "maxY": 41147.78911564628, "series": [{"data": [[1.59329736E12, 41147.78911564628], [1.59329706E12, 34894.78767123289], [1.59329724E12, 39710.76821192054], [1.59329742E12, 33772.26804123711], [1.59329712E12, 39239.07272727274], [1.5932973E12, 39710.79333333331], [1.59329718E12, 40008.90277777778]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329742E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4930555555555555, "minX": 1.59329706E12, "maxY": 19.16438356164386, "series": [{"data": [[1.59329736E12, 0.8775510204081631], [1.59329706E12, 19.16438356164386], [1.59329724E12, 1.1125827814569536], [1.59329742E12, 0.5154639175257731], [1.59329712E12, 0.8909090909090909], [1.5932973E12, 1.0066666666666664], [1.59329718E12, 0.4930555555555555]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329742E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2178.0, "minX": 1.59329706E12, "maxY": 62725.0, "series": [{"data": [[1.59329736E12, 50058.0], [1.59329706E12, 62725.0], [1.59329724E12, 53817.0], [1.59329742E12, 48385.0], [1.59329712E12, 55522.0], [1.5932973E12, 50555.0], [1.59329718E12, 56296.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59329736E12, 30800.491942448614], [1.59329706E12, 21154.772994707822], [1.59329724E12, 27869.455993947984], [1.59329742E12, 2178.0], [1.59329712E12, 26110.24595215082], [1.5932973E12, 28475.389956438543], [1.59329718E12, 29020.61996252537]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59329736E12, 31017.741223020552], [1.59329706E12, 21174.75030211687], [1.59329724E12, 27892.30160242081], [1.59329742E12, 2178.0], [1.59329712E12, 26290.87061913967], [1.5932973E12, 28639.829017424585], [1.59329718E12, 29162.082014989854]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59329736E12, 30921.18597122431], [1.59329706E12, 21165.87149735391], [1.59329724E12, 27882.147996973992], [1.59329742E12, 2178.0], [1.59329712E12, 26210.59297607541], [1.5932973E12, 28566.74497821927], [1.59329718E12, 29099.209981262684]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59329736E12, 30259.0], [1.59329706E12, 21106.0], [1.59329724E12, 27808.0], [1.59329742E12, 2178.0], [1.59329712E12, 25513.0], [1.5932973E12, 28041.0], [1.59329718E12, 28690.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59329736E12, 41179.0], [1.59329706E12, 30343.5], [1.59329724E12, 39276.0], [1.59329742E12, 36436.0], [1.59329712E12, 38436.0], [1.5932973E12, 39390.0], [1.59329718E12, 39405.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329742E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23142.0, "minX": 1.0, "maxY": 41849.0, "series": [{"data": [[8.0, 41849.0], [2.0, 39192.0], [9.0, 23142.0], [10.0, 27905.0], [11.0, 37609.5], [12.0, 27112.0], [3.0, 39847.0], [15.0, 26061.5], [4.0, 39144.5], [1.0, 40393.0], [5.0, 40101.0], [6.0, 39702.0], [7.0, 33981.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23142.0, "minX": 1.0, "maxY": 41848.5, "series": [{"data": [[8.0, 41848.5], [2.0, 39191.5], [9.0, 23142.0], [10.0, 27905.0], [11.0, 37609.5], [12.0, 27111.5], [3.0, 39847.0], [15.0, 26061.5], [4.0, 39144.5], [1.0, 40393.0], [5.0, 40101.0], [6.0, 39702.0], [7.0, 33981.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.593297E12, "maxY": 2.75, "series": [{"data": [[1.59329736E12, 2.183333333333333], [1.59329706E12, 2.433333333333333], [1.59329724E12, 2.5166666666666666], [1.59329742E12, 0.21666666666666667], [1.59329712E12, 2.75], [1.5932973E12, 2.5], [1.593297E12, 1.6666666666666667], [1.59329718E12, 2.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329742E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6166666666666667, "minX": 1.59329706E12, "maxY": 2.75, "series": [{"data": [[1.59329736E12, 2.45], [1.59329706E12, 2.433333333333333], [1.59329724E12, 2.5166666666666666], [1.59329742E12, 1.6166666666666667], [1.59329712E12, 2.75], [1.5932973E12, 2.5], [1.59329718E12, 2.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59329742E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6166666666666667, "minX": 1.59329706E12, "maxY": 2.75, "series": [{"data": [[1.59329736E12, 2.45], [1.59329706E12, 2.433333333333333], [1.59329724E12, 2.5166666666666666], [1.59329742E12, 1.6166666666666667], [1.59329712E12, 2.75], [1.5932973E12, 2.5], [1.59329718E12, 2.4]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329742E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6166666666666667, "minX": 1.59329706E12, "maxY": 2.75, "series": [{"data": [[1.59329736E12, 2.45], [1.59329706E12, 2.433333333333333], [1.59329724E12, 2.5166666666666666], [1.59329742E12, 1.6166666666666667], [1.59329712E12, 2.75], [1.5932973E12, 2.5], [1.59329718E12, 2.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59329742E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

