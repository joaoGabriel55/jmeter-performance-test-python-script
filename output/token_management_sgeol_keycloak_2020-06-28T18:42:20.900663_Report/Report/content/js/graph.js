/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 397.0, "minX": 0.0, "maxY": 20984.0, "series": [{"data": [[0.0, 397.0], [0.1, 1838.0], [0.2, 3050.0], [0.3, 3369.0], [0.4, 3637.0], [0.5, 3851.0], [0.6, 4306.0], [0.7, 4924.0], [0.8, 5133.0], [0.9, 5449.0], [1.0, 5573.0], [1.1, 5719.0], [1.2, 5791.0], [1.3, 5967.0], [1.4, 6073.0], [1.5, 6147.0], [1.6, 6298.0], [1.7, 6348.0], [1.8, 6489.0], [1.9, 6535.0], [2.0, 6561.0], [2.1, 6702.0], [2.2, 6816.0], [2.3, 6970.0], [2.4, 7000.0], [2.5, 7038.0], [2.6, 7079.0], [2.7, 7112.0], [2.8, 7221.0], [2.9, 7267.0], [3.0, 7318.0], [3.1, 7385.0], [3.2, 7455.0], [3.3, 7502.0], [3.4, 7552.0], [3.5, 7605.0], [3.6, 7635.0], [3.7, 7677.0], [3.8, 7712.0], [3.9, 7766.0], [4.0, 7812.0], [4.1, 7850.0], [4.2, 7896.0], [4.3, 7930.0], [4.4, 7946.0], [4.5, 7970.0], [4.6, 7994.0], [4.7, 8011.0], [4.8, 8052.0], [4.9, 8078.0], [5.0, 8115.0], [5.1, 8134.0], [5.2, 8162.0], [5.3, 8188.0], [5.4, 8205.0], [5.5, 8241.0], [5.6, 8285.0], [5.7, 8314.0], [5.8, 8333.0], [5.9, 8359.0], [6.0, 8383.0], [6.1, 8396.0], [6.2, 8410.0], [6.3, 8430.0], [6.4, 8446.0], [6.5, 8456.0], [6.6, 8481.0], [6.7, 8493.0], [6.8, 8519.0], [6.9, 8537.0], [7.0, 8546.0], [7.1, 8555.0], [7.2, 8563.0], [7.3, 8588.0], [7.4, 8598.0], [7.5, 8605.0], [7.6, 8630.0], [7.7, 8659.0], [7.8, 8674.0], [7.9, 8697.0], [8.0, 8711.0], [8.1, 8720.0], [8.2, 8739.0], [8.3, 8755.0], [8.4, 8774.0], [8.5, 8790.0], [8.6, 8795.0], [8.7, 8803.0], [8.8, 8812.0], [8.9, 8827.0], [9.0, 8840.0], [9.1, 8853.0], [9.2, 8868.0], [9.3, 8877.0], [9.4, 8891.0], [9.5, 8898.0], [9.6, 8908.0], [9.7, 8930.0], [9.8, 8944.0], [9.9, 8957.0], [10.0, 8967.0], [10.1, 8974.0], [10.2, 8983.0], [10.3, 8993.0], [10.4, 9011.0], [10.5, 9017.0], [10.6, 9031.0], [10.7, 9045.0], [10.8, 9061.0], [10.9, 9075.0], [11.0, 9078.0], [11.1, 9087.0], [11.2, 9093.0], [11.3, 9104.0], [11.4, 9117.0], [11.5, 9124.0], [11.6, 9130.0], [11.7, 9141.0], [11.8, 9161.0], [11.9, 9176.0], [12.0, 9184.0], [12.1, 9203.0], [12.2, 9212.0], [12.3, 9227.0], [12.4, 9240.0], [12.5, 9247.0], [12.6, 9262.0], [12.7, 9277.0], [12.8, 9289.0], [12.9, 9302.0], [13.0, 9307.0], [13.1, 9315.0], [13.2, 9329.0], [13.3, 9337.0], [13.4, 9344.0], [13.5, 9354.0], [13.6, 9361.0], [13.7, 9368.0], [13.8, 9379.0], [13.9, 9392.0], [14.0, 9399.0], [14.1, 9406.0], [14.2, 9413.0], [14.3, 9422.0], [14.4, 9437.0], [14.5, 9447.0], [14.6, 9455.0], [14.7, 9465.0], [14.8, 9483.0], [14.9, 9488.0], [15.0, 9497.0], [15.1, 9503.0], [15.2, 9519.0], [15.3, 9524.0], [15.4, 9534.0], [15.5, 9544.0], [15.6, 9555.0], [15.7, 9564.0], [15.8, 9569.0], [15.9, 9576.0], [16.0, 9583.0], [16.1, 9593.0], [16.2, 9609.0], [16.3, 9616.0], [16.4, 9620.0], [16.5, 9628.0], [16.6, 9639.0], [16.7, 9643.0], [16.8, 9652.0], [16.9, 9661.0], [17.0, 9664.0], [17.1, 9671.0], [17.2, 9684.0], [17.3, 9688.0], [17.4, 9698.0], [17.5, 9706.0], [17.6, 9712.0], [17.7, 9723.0], [17.8, 9727.0], [17.9, 9729.0], [18.0, 9732.0], [18.1, 9742.0], [18.2, 9748.0], [18.3, 9763.0], [18.4, 9768.0], [18.5, 9778.0], [18.6, 9789.0], [18.7, 9796.0], [18.8, 9803.0], [18.9, 9809.0], [19.0, 9817.0], [19.1, 9828.0], [19.2, 9834.0], [19.3, 9837.0], [19.4, 9840.0], [19.5, 9849.0], [19.6, 9858.0], [19.7, 9862.0], [19.8, 9872.0], [19.9, 9878.0], [20.0, 9885.0], [20.1, 9887.0], [20.2, 9893.0], [20.3, 9902.0], [20.4, 9907.0], [20.5, 9912.0], [20.6, 9918.0], [20.7, 9924.0], [20.8, 9932.0], [20.9, 9941.0], [21.0, 9946.0], [21.1, 9955.0], [21.2, 9959.0], [21.3, 9967.0], [21.4, 9972.0], [21.5, 9979.0], [21.6, 9989.0], [21.7, 9992.0], [21.8, 9997.0], [21.9, 10007.0], [22.0, 10012.0], [22.1, 10019.0], [22.2, 10030.0], [22.3, 10036.0], [22.4, 10043.0], [22.5, 10052.0], [22.6, 10057.0], [22.7, 10063.0], [22.8, 10072.0], [22.9, 10085.0], [23.0, 10090.0], [23.1, 10098.0], [23.2, 10102.0], [23.3, 10106.0], [23.4, 10114.0], [23.5, 10120.0], [23.6, 10127.0], [23.7, 10133.0], [23.8, 10139.0], [23.9, 10141.0], [24.0, 10146.0], [24.1, 10149.0], [24.2, 10154.0], [24.3, 10160.0], [24.4, 10165.0], [24.5, 10169.0], [24.6, 10174.0], [24.7, 10184.0], [24.8, 10186.0], [24.9, 10191.0], [25.0, 10199.0], [25.1, 10209.0], [25.2, 10214.0], [25.3, 10224.0], [25.4, 10229.0], [25.5, 10235.0], [25.6, 10242.0], [25.7, 10248.0], [25.8, 10251.0], [25.9, 10255.0], [26.0, 10259.0], [26.1, 10264.0], [26.2, 10267.0], [26.3, 10272.0], [26.4, 10280.0], [26.5, 10289.0], [26.6, 10295.0], [26.7, 10301.0], [26.8, 10307.0], [26.9, 10315.0], [27.0, 10320.0], [27.1, 10329.0], [27.2, 10334.0], [27.3, 10340.0], [27.4, 10348.0], [27.5, 10352.0], [27.6, 10359.0], [27.7, 10363.0], [27.8, 10368.0], [27.9, 10376.0], [28.0, 10379.0], [28.1, 10385.0], [28.2, 10393.0], [28.3, 10400.0], [28.4, 10411.0], [28.5, 10416.0], [28.6, 10423.0], [28.7, 10430.0], [28.8, 10435.0], [28.9, 10444.0], [29.0, 10447.0], [29.1, 10453.0], [29.2, 10456.0], [29.3, 10460.0], [29.4, 10469.0], [29.5, 10477.0], [29.6, 10484.0], [29.7, 10494.0], [29.8, 10499.0], [29.9, 10505.0], [30.0, 10511.0], [30.1, 10515.0], [30.2, 10527.0], [30.3, 10536.0], [30.4, 10547.0], [30.5, 10552.0], [30.6, 10557.0], [30.7, 10564.0], [30.8, 10568.0], [30.9, 10577.0], [31.0, 10585.0], [31.1, 10593.0], [31.2, 10602.0], [31.3, 10606.0], [31.4, 10609.0], [31.5, 10618.0], [31.6, 10621.0], [31.7, 10624.0], [31.8, 10632.0], [31.9, 10635.0], [32.0, 10640.0], [32.1, 10642.0], [32.2, 10651.0], [32.3, 10654.0], [32.4, 10657.0], [32.5, 10663.0], [32.6, 10671.0], [32.7, 10680.0], [32.8, 10685.0], [32.9, 10688.0], [33.0, 10696.0], [33.1, 10702.0], [33.2, 10710.0], [33.3, 10718.0], [33.4, 10723.0], [33.5, 10728.0], [33.6, 10731.0], [33.7, 10739.0], [33.8, 10746.0], [33.9, 10753.0], [34.0, 10763.0], [34.1, 10769.0], [34.2, 10776.0], [34.3, 10782.0], [34.4, 10789.0], [34.5, 10793.0], [34.6, 10801.0], [34.7, 10811.0], [34.8, 10814.0], [34.9, 10820.0], [35.0, 10829.0], [35.1, 10833.0], [35.2, 10842.0], [35.3, 10847.0], [35.4, 10851.0], [35.5, 10854.0], [35.6, 10864.0], [35.7, 10868.0], [35.8, 10872.0], [35.9, 10877.0], [36.0, 10883.0], [36.1, 10885.0], [36.2, 10896.0], [36.3, 10906.0], [36.4, 10911.0], [36.5, 10920.0], [36.6, 10931.0], [36.7, 10940.0], [36.8, 10948.0], [36.9, 10954.0], [37.0, 10963.0], [37.1, 10970.0], [37.2, 10972.0], [37.3, 10979.0], [37.4, 10982.0], [37.5, 10986.0], [37.6, 10991.0], [37.7, 10996.0], [37.8, 11004.0], [37.9, 11009.0], [38.0, 11016.0], [38.1, 11021.0], [38.2, 11024.0], [38.3, 11030.0], [38.4, 11035.0], [38.5, 11038.0], [38.6, 11047.0], [38.7, 11055.0], [38.8, 11065.0], [38.9, 11069.0], [39.0, 11079.0], [39.1, 11087.0], [39.2, 11094.0], [39.3, 11101.0], [39.4, 11102.0], [39.5, 11108.0], [39.6, 11116.0], [39.7, 11126.0], [39.8, 11128.0], [39.9, 11133.0], [40.0, 11141.0], [40.1, 11144.0], [40.2, 11150.0], [40.3, 11154.0], [40.4, 11158.0], [40.5, 11161.0], [40.6, 11164.0], [40.7, 11169.0], [40.8, 11181.0], [40.9, 11184.0], [41.0, 11191.0], [41.1, 11194.0], [41.2, 11207.0], [41.3, 11212.0], [41.4, 11215.0], [41.5, 11219.0], [41.6, 11227.0], [41.7, 11233.0], [41.8, 11242.0], [41.9, 11247.0], [42.0, 11250.0], [42.1, 11253.0], [42.2, 11258.0], [42.3, 11265.0], [42.4, 11270.0], [42.5, 11274.0], [42.6, 11280.0], [42.7, 11286.0], [42.8, 11290.0], [42.9, 11294.0], [43.0, 11302.0], [43.1, 11308.0], [43.2, 11312.0], [43.3, 11315.0], [43.4, 11318.0], [43.5, 11327.0], [43.6, 11332.0], [43.7, 11339.0], [43.8, 11344.0], [43.9, 11351.0], [44.0, 11357.0], [44.1, 11365.0], [44.2, 11368.0], [44.3, 11372.0], [44.4, 11381.0], [44.5, 11387.0], [44.6, 11390.0], [44.7, 11396.0], [44.8, 11402.0], [44.9, 11402.0], [45.0, 11406.0], [45.1, 11410.0], [45.2, 11414.0], [45.3, 11418.0], [45.4, 11424.0], [45.5, 11426.0], [45.6, 11429.0], [45.7, 11434.0], [45.8, 11440.0], [45.9, 11443.0], [46.0, 11445.0], [46.1, 11455.0], [46.2, 11461.0], [46.3, 11467.0], [46.4, 11471.0], [46.5, 11478.0], [46.6, 11482.0], [46.7, 11486.0], [46.8, 11497.0], [46.9, 11501.0], [47.0, 11508.0], [47.1, 11512.0], [47.2, 11520.0], [47.3, 11527.0], [47.4, 11534.0], [47.5, 11542.0], [47.6, 11546.0], [47.7, 11553.0], [47.8, 11556.0], [47.9, 11558.0], [48.0, 11569.0], [48.1, 11574.0], [48.2, 11580.0], [48.3, 11588.0], [48.4, 11592.0], [48.5, 11600.0], [48.6, 11605.0], [48.7, 11608.0], [48.8, 11613.0], [48.9, 11624.0], [49.0, 11633.0], [49.1, 11642.0], [49.2, 11647.0], [49.3, 11653.0], [49.4, 11656.0], [49.5, 11661.0], [49.6, 11666.0], [49.7, 11670.0], [49.8, 11673.0], [49.9, 11680.0], [50.0, 11684.0], [50.1, 11691.0], [50.2, 11698.0], [50.3, 11704.0], [50.4, 11711.0], [50.5, 11717.0], [50.6, 11723.0], [50.7, 11730.0], [50.8, 11735.0], [50.9, 11738.0], [51.0, 11741.0], [51.1, 11746.0], [51.2, 11755.0], [51.3, 11761.0], [51.4, 11767.0], [51.5, 11773.0], [51.6, 11779.0], [51.7, 11786.0], [51.8, 11790.0], [51.9, 11798.0], [52.0, 11802.0], [52.1, 11804.0], [52.2, 11807.0], [52.3, 11813.0], [52.4, 11821.0], [52.5, 11828.0], [52.6, 11835.0], [52.7, 11838.0], [52.8, 11846.0], [52.9, 11851.0], [53.0, 11855.0], [53.1, 11859.0], [53.2, 11864.0], [53.3, 11873.0], [53.4, 11883.0], [53.5, 11887.0], [53.6, 11893.0], [53.7, 11898.0], [53.8, 11908.0], [53.9, 11913.0], [54.0, 11916.0], [54.1, 11919.0], [54.2, 11931.0], [54.3, 11942.0], [54.4, 11946.0], [54.5, 11956.0], [54.6, 11962.0], [54.7, 11970.0], [54.8, 11976.0], [54.9, 11979.0], [55.0, 11991.0], [55.1, 11995.0], [55.2, 12003.0], [55.3, 12011.0], [55.4, 12018.0], [55.5, 12022.0], [55.6, 12024.0], [55.7, 12032.0], [55.8, 12037.0], [55.9, 12040.0], [56.0, 12051.0], [56.1, 12054.0], [56.2, 12058.0], [56.3, 12062.0], [56.4, 12070.0], [56.5, 12079.0], [56.6, 12085.0], [56.7, 12090.0], [56.8, 12092.0], [56.9, 12097.0], [57.0, 12102.0], [57.1, 12108.0], [57.2, 12113.0], [57.3, 12118.0], [57.4, 12124.0], [57.5, 12127.0], [57.6, 12130.0], [57.7, 12134.0], [57.8, 12142.0], [57.9, 12149.0], [58.0, 12160.0], [58.1, 12164.0], [58.2, 12167.0], [58.3, 12173.0], [58.4, 12178.0], [58.5, 12188.0], [58.6, 12197.0], [58.7, 12202.0], [58.8, 12206.0], [58.9, 12214.0], [59.0, 12220.0], [59.1, 12228.0], [59.2, 12232.0], [59.3, 12237.0], [59.4, 12245.0], [59.5, 12253.0], [59.6, 12258.0], [59.7, 12261.0], [59.8, 12266.0], [59.9, 12273.0], [60.0, 12280.0], [60.1, 12287.0], [60.2, 12291.0], [60.3, 12296.0], [60.4, 12303.0], [60.5, 12309.0], [60.6, 12312.0], [60.7, 12320.0], [60.8, 12327.0], [60.9, 12333.0], [61.0, 12337.0], [61.1, 12344.0], [61.2, 12348.0], [61.3, 12353.0], [61.4, 12359.0], [61.5, 12362.0], [61.6, 12366.0], [61.7, 12374.0], [61.8, 12380.0], [61.9, 12385.0], [62.0, 12389.0], [62.1, 12397.0], [62.2, 12404.0], [62.3, 12407.0], [62.4, 12415.0], [62.5, 12421.0], [62.6, 12429.0], [62.7, 12433.0], [62.8, 12446.0], [62.9, 12453.0], [63.0, 12455.0], [63.1, 12469.0], [63.2, 12476.0], [63.3, 12485.0], [63.4, 12492.0], [63.5, 12510.0], [63.6, 12514.0], [63.7, 12522.0], [63.8, 12532.0], [63.9, 12536.0], [64.0, 12541.0], [64.1, 12550.0], [64.2, 12554.0], [64.3, 12568.0], [64.4, 12576.0], [64.5, 12589.0], [64.6, 12602.0], [64.7, 12611.0], [64.8, 12616.0], [64.9, 12624.0], [65.0, 12632.0], [65.1, 12641.0], [65.2, 12651.0], [65.3, 12656.0], [65.4, 12659.0], [65.5, 12668.0], [65.6, 12674.0], [65.7, 12681.0], [65.8, 12692.0], [65.9, 12703.0], [66.0, 12710.0], [66.1, 12720.0], [66.2, 12727.0], [66.3, 12732.0], [66.4, 12739.0], [66.5, 12745.0], [66.6, 12753.0], [66.7, 12758.0], [66.8, 12764.0], [66.9, 12768.0], [67.0, 12779.0], [67.1, 12783.0], [67.2, 12790.0], [67.3, 12799.0], [67.4, 12802.0], [67.5, 12805.0], [67.6, 12816.0], [67.7, 12820.0], [67.8, 12824.0], [67.9, 12830.0], [68.0, 12834.0], [68.1, 12839.0], [68.2, 12845.0], [68.3, 12850.0], [68.4, 12855.0], [68.5, 12863.0], [68.6, 12866.0], [68.7, 12869.0], [68.8, 12878.0], [68.9, 12887.0], [69.0, 12891.0], [69.1, 12900.0], [69.2, 12906.0], [69.3, 12913.0], [69.4, 12916.0], [69.5, 12921.0], [69.6, 12930.0], [69.7, 12934.0], [69.8, 12940.0], [69.9, 12949.0], [70.0, 12954.0], [70.1, 12960.0], [70.2, 12968.0], [70.3, 12972.0], [70.4, 12978.0], [70.5, 12985.0], [70.6, 12997.0], [70.7, 13003.0], [70.8, 13014.0], [70.9, 13025.0], [71.0, 13036.0], [71.1, 13045.0], [71.2, 13051.0], [71.3, 13056.0], [71.4, 13063.0], [71.5, 13071.0], [71.6, 13080.0], [71.7, 13086.0], [71.8, 13096.0], [71.9, 13102.0], [72.0, 13111.0], [72.1, 13116.0], [72.2, 13126.0], [72.3, 13131.0], [72.4, 13141.0], [72.5, 13149.0], [72.6, 13157.0], [72.7, 13167.0], [72.8, 13181.0], [72.9, 13184.0], [73.0, 13192.0], [73.1, 13195.0], [73.2, 13204.0], [73.3, 13208.0], [73.4, 13212.0], [73.5, 13229.0], [73.6, 13232.0], [73.7, 13242.0], [73.8, 13246.0], [73.9, 13265.0], [74.0, 13273.0], [74.1, 13280.0], [74.2, 13286.0], [74.3, 13291.0], [74.4, 13305.0], [74.5, 13315.0], [74.6, 13329.0], [74.7, 13342.0], [74.8, 13355.0], [74.9, 13359.0], [75.0, 13365.0], [75.1, 13373.0], [75.2, 13382.0], [75.3, 13388.0], [75.4, 13395.0], [75.5, 13400.0], [75.6, 13409.0], [75.7, 13421.0], [75.8, 13425.0], [75.9, 13429.0], [76.0, 13439.0], [76.1, 13446.0], [76.2, 13452.0], [76.3, 13459.0], [76.4, 13464.0], [76.5, 13474.0], [76.6, 13490.0], [76.7, 13493.0], [76.8, 13500.0], [76.9, 13508.0], [77.0, 13520.0], [77.1, 13525.0], [77.2, 13533.0], [77.3, 13545.0], [77.4, 13553.0], [77.5, 13565.0], [77.6, 13571.0], [77.7, 13581.0], [77.8, 13586.0], [77.9, 13595.0], [78.0, 13603.0], [78.1, 13609.0], [78.2, 13616.0], [78.3, 13622.0], [78.4, 13633.0], [78.5, 13647.0], [78.6, 13654.0], [78.7, 13664.0], [78.8, 13674.0], [78.9, 13691.0], [79.0, 13699.0], [79.1, 13708.0], [79.2, 13711.0], [79.3, 13717.0], [79.4, 13722.0], [79.5, 13737.0], [79.6, 13750.0], [79.7, 13756.0], [79.8, 13766.0], [79.9, 13774.0], [80.0, 13790.0], [80.1, 13798.0], [80.2, 13810.0], [80.3, 13820.0], [80.4, 13826.0], [80.5, 13836.0], [80.6, 13843.0], [80.7, 13847.0], [80.8, 13855.0], [80.9, 13859.0], [81.0, 13874.0], [81.1, 13883.0], [81.2, 13897.0], [81.3, 13906.0], [81.4, 13925.0], [81.5, 13933.0], [81.6, 13947.0], [81.7, 13955.0], [81.8, 13963.0], [81.9, 13983.0], [82.0, 13993.0], [82.1, 14001.0], [82.2, 14011.0], [82.3, 14018.0], [82.4, 14026.0], [82.5, 14031.0], [82.6, 14042.0], [82.7, 14055.0], [82.8, 14060.0], [82.9, 14069.0], [83.0, 14081.0], [83.1, 14100.0], [83.2, 14115.0], [83.3, 14123.0], [83.4, 14133.0], [83.5, 14142.0], [83.6, 14152.0], [83.7, 14156.0], [83.8, 14172.0], [83.9, 14186.0], [84.0, 14194.0], [84.1, 14209.0], [84.2, 14223.0], [84.3, 14230.0], [84.4, 14243.0], [84.5, 14247.0], [84.6, 14260.0], [84.7, 14271.0], [84.8, 14284.0], [84.9, 14294.0], [85.0, 14312.0], [85.1, 14323.0], [85.2, 14331.0], [85.3, 14340.0], [85.4, 14348.0], [85.5, 14361.0], [85.6, 14378.0], [85.7, 14390.0], [85.8, 14409.0], [85.9, 14421.0], [86.0, 14434.0], [86.1, 14446.0], [86.2, 14465.0], [86.3, 14476.0], [86.4, 14488.0], [86.5, 14501.0], [86.6, 14508.0], [86.7, 14525.0], [86.8, 14533.0], [86.9, 14544.0], [87.0, 14566.0], [87.1, 14589.0], [87.2, 14602.0], [87.3, 14611.0], [87.4, 14618.0], [87.5, 14623.0], [87.6, 14638.0], [87.7, 14655.0], [87.8, 14669.0], [87.9, 14680.0], [88.0, 14693.0], [88.1, 14719.0], [88.2, 14732.0], [88.3, 14748.0], [88.4, 14756.0], [88.5, 14777.0], [88.6, 14791.0], [88.7, 14810.0], [88.8, 14821.0], [88.9, 14835.0], [89.0, 14847.0], [89.1, 14859.0], [89.2, 14877.0], [89.3, 14901.0], [89.4, 14913.0], [89.5, 14921.0], [89.6, 14932.0], [89.7, 14945.0], [89.8, 14963.0], [89.9, 14978.0], [90.0, 14989.0], [90.1, 15002.0], [90.2, 15006.0], [90.3, 15027.0], [90.4, 15036.0], [90.5, 15043.0], [90.6, 15068.0], [90.7, 15087.0], [90.8, 15108.0], [90.9, 15115.0], [91.0, 15125.0], [91.1, 15139.0], [91.2, 15159.0], [91.3, 15174.0], [91.4, 15199.0], [91.5, 15215.0], [91.6, 15230.0], [91.7, 15265.0], [91.8, 15284.0], [91.9, 15305.0], [92.0, 15323.0], [92.1, 15338.0], [92.2, 15373.0], [92.3, 15396.0], [92.4, 15406.0], [92.5, 15422.0], [92.6, 15440.0], [92.7, 15447.0], [92.8, 15471.0], [92.9, 15491.0], [93.0, 15510.0], [93.1, 15528.0], [93.2, 15541.0], [93.3, 15571.0], [93.4, 15591.0], [93.5, 15608.0], [93.6, 15639.0], [93.7, 15658.0], [93.8, 15679.0], [93.9, 15726.0], [94.0, 15754.0], [94.1, 15791.0], [94.2, 15820.0], [94.3, 15840.0], [94.4, 15861.0], [94.5, 15877.0], [94.6, 15899.0], [94.7, 15920.0], [94.8, 15941.0], [94.9, 15975.0], [95.0, 16013.0], [95.1, 16041.0], [95.2, 16072.0], [95.3, 16092.0], [95.4, 16117.0], [95.5, 16132.0], [95.6, 16161.0], [95.7, 16199.0], [95.8, 16211.0], [95.9, 16248.0], [96.0, 16311.0], [96.1, 16338.0], [96.2, 16364.0], [96.3, 16392.0], [96.4, 16399.0], [96.5, 16428.0], [96.6, 16461.0], [96.7, 16503.0], [96.8, 16564.0], [96.9, 16587.0], [97.0, 16669.0], [97.1, 16699.0], [97.2, 16728.0], [97.3, 16786.0], [97.4, 16821.0], [97.5, 16875.0], [97.6, 16923.0], [97.7, 16977.0], [97.8, 17010.0], [97.9, 17057.0], [98.0, 17106.0], [98.1, 17166.0], [98.2, 17199.0], [98.3, 17262.0], [98.4, 17310.0], [98.5, 17365.0], [98.6, 17445.0], [98.7, 17537.0], [98.8, 17594.0], [98.9, 17740.0], [99.0, 17851.0], [99.1, 17900.0], [99.2, 18042.0], [99.3, 18286.0], [99.4, 18383.0], [99.5, 18509.0], [99.6, 18621.0], [99.7, 18822.0], [99.8, 19244.0], [99.9, 19923.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 126.0, "series": [{"data": [[300.0, 1.0], [700.0, 1.0], [800.0, 1.0], [1000.0, 1.0], [1500.0, 2.0], [1800.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2500.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 4.0], [3400.0, 2.0], [3500.0, 1.0], [3600.0, 5.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4200.0, 1.0], [4100.0, 1.0], [4300.0, 1.0], [4600.0, 2.0], [4700.0, 1.0], [4800.0, 2.0], [5000.0, 5.0], [5100.0, 3.0], [4900.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5600.0, 2.0], [5500.0, 6.0], [5400.0, 2.0], [5700.0, 9.0], [5800.0, 2.0], [6000.0, 7.0], [6100.0, 9.0], [5900.0, 4.0], [6200.0, 4.0], [6300.0, 8.0], [6400.0, 3.0], [6500.0, 16.0], [6600.0, 1.0], [6900.0, 6.0], [6800.0, 8.0], [6700.0, 4.0], [7000.0, 17.0], [7100.0, 6.0], [7200.0, 13.0], [7400.0, 11.0], [7300.0, 7.0], [7500.0, 11.0], [7600.0, 19.0], [7800.0, 15.0], [7900.0, 25.0], [7700.0, 10.0], [8000.0, 21.0], [8100.0, 25.0], [8400.0, 36.0], [8700.0, 45.0], [8300.0, 28.0], [8200.0, 16.0], [8600.0, 29.0], [8500.0, 42.0], [9000.0, 54.0], [9100.0, 49.0], [9200.0, 48.0], [8900.0, 50.0], [8800.0, 51.0], [9400.0, 63.0], [9300.0, 68.0], [9600.0, 79.0], [9700.0, 77.0], [9500.0, 63.0], [10200.0, 99.0], [10000.0, 81.0], [9900.0, 92.0], [9800.0, 94.0], [10100.0, 111.0], [10300.0, 98.0], [10400.0, 91.0], [10700.0, 91.0], [10500.0, 83.0], [10600.0, 112.0], [11000.0, 94.0], [10900.0, 90.0], [11100.0, 110.0], [10800.0, 100.0], [11200.0, 110.0], [11400.0, 126.0], [11700.0, 104.0], [11300.0, 109.0], [11500.0, 96.0], [11600.0, 105.0], [12000.0, 108.0], [11900.0, 85.0], [12100.0, 104.0], [11800.0, 106.0], [12200.0, 102.0], [12300.0, 107.0], [12600.0, 76.0], [12500.0, 68.0], [12700.0, 88.0], [12400.0, 78.0], [12800.0, 106.0], [12900.0, 93.0], [13300.0, 69.0], [13100.0, 75.0], [13200.0, 73.0], [13000.0, 74.0], [13400.0, 77.0], [13700.0, 67.0], [13800.0, 69.0], [13600.0, 63.0], [13500.0, 71.0], [14200.0, 55.0], [14100.0, 56.0], [13900.0, 49.0], [14000.0, 60.0], [14300.0, 48.0], [14500.0, 41.0], [14400.0, 44.0], [14600.0, 53.0], [14800.0, 38.0], [14700.0, 36.0], [15000.0, 42.0], [15300.0, 28.0], [15100.0, 38.0], [14900.0, 48.0], [15200.0, 27.0], [15600.0, 25.0], [15800.0, 29.0], [15500.0, 31.0], [15400.0, 36.0], [15700.0, 16.0], [16100.0, 24.0], [16200.0, 15.0], [16000.0, 22.0], [15900.0, 21.0], [16300.0, 26.0], [16600.0, 11.0], [16400.0, 17.0], [16500.0, 14.0], [17000.0, 12.0], [17400.0, 6.0], [17300.0, 10.0], [17200.0, 11.0], [16700.0, 14.0], [17100.0, 13.0], [16900.0, 15.0], [16800.0, 12.0], [18300.0, 4.0], [17800.0, 9.0], [18000.0, 4.0], [17900.0, 4.0], [18100.0, 3.0], [17700.0, 4.0], [18400.0, 4.0], [17500.0, 9.0], [18200.0, 4.0], [17600.0, 4.0], [18500.0, 4.0], [19400.0, 1.0], [18800.0, 2.0], [18700.0, 2.0], [18900.0, 1.0], [18600.0, 7.0], [19100.0, 3.0], [19300.0, 1.0], [19200.0, 2.0], [19600.0, 1.0], [19700.0, 1.0], [19900.0, 2.0], [20400.0, 1.0], [20000.0, 1.0], [20500.0, 1.0], [20900.0, 1.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5996.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5996.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 53.39999999999997, "minX": 1.59338052E12, "maxY": 100.0, "series": [{"data": [[1.59338106E12, 100.0], [1.59338076E12, 100.0], [1.59338064E12, 100.0], [1.593381E12, 100.0], [1.5933807E12, 100.0], [1.59338088E12, 100.0], [1.59338058E12, 100.0], [1.59338124E12, 53.39999999999997], [1.59338094E12, 100.0], [1.59338112E12, 100.0], [1.59338082E12, 100.0], [1.59338052E12, 100.0], [1.59338118E12, 97.43046357615891]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338124E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 397.0, "minX": 1.0, "maxY": 15597.333333333334, "series": [{"data": [[2.0, 888.0], [3.0, 897.0], [4.0, 1596.0], [6.0, 1870.0], [7.0, 2241.0], [8.0, 2746.6666666666665], [9.0, 3839.0], [10.0, 3344.0], [11.0, 6027.0], [12.0, 3619.0], [13.0, 5881.0], [14.0, 5007.0], [15.0, 5342.0], [16.0, 3642.0], [17.0, 3374.0], [18.0, 4924.0], [19.0, 10460.0], [20.0, 6899.0], [21.0, 5140.0], [22.0, 7515.0], [23.0, 5532.0], [24.0, 6617.0], [25.0, 5703.0], [26.0, 5449.0], [27.0, 6328.0], [28.0, 9715.0], [29.0, 5062.0], [30.0, 5903.333333333333], [31.0, 5837.0], [33.0, 6299.0], [32.0, 4648.0], [35.0, 4803.333333333333], [34.0, 5671.5], [37.0, 10877.0], [36.0, 5377.5], [39.0, 8474.5], [38.0, 8867.0], [41.0, 6036.0], [40.0, 9092.0], [43.0, 7492.333333333333], [42.0, 7011.0], [45.0, 7810.0], [44.0, 8639.75], [47.0, 7807.666666666667], [49.0, 10241.666666666666], [48.0, 9779.0], [51.0, 11027.857142857143], [50.0, 10852.5], [53.0, 10757.666666666666], [52.0, 13319.5], [55.0, 11119.0], [54.0, 7012.666666666667], [57.0, 8669.0], [56.0, 10929.0], [59.0, 11892.0], [58.0, 12820.0], [61.0, 11122.57142857143], [60.0, 12413.0], [63.0, 10189.5], [62.0, 5133.0], [67.0, 11744.0], [66.0, 12490.6], [65.0, 11665.0], [64.0, 6970.0], [71.0, 11840.923076923078], [70.0, 10455.666666666666], [69.0, 10182.0], [68.0, 13832.4], [75.0, 15218.666666666666], [74.0, 9403.0], [73.0, 12081.0], [72.0, 9430.666666666666], [79.0, 12499.0], [78.0, 8175.5], [77.0, 12582.0], [76.0, 12139.0], [83.0, 12419.857142857143], [82.0, 12447.0], [81.0, 10869.0], [80.0, 14212.5], [87.0, 12004.6], [86.0, 13928.199999999999], [85.0, 11877.833333333332], [84.0, 14439.4], [91.0, 12568.5], [90.0, 12632.75], [89.0, 9111.0], [88.0, 13360.4], [95.0, 13062.647058823532], [94.0, 11665.25], [93.0, 12221.1], [92.0, 15597.333333333334], [99.0, 12731.884615384617], [98.0, 12707.7], [97.0, 14979.0], [96.0, 14359.347826086958], [100.0, 11845.897784131495], [1.0, 397.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[98.21383333333326, 11802.888999999972]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 973.75, "minX": 1.59338052E12, "maxY": 12038.816666666668, "series": [{"data": [[1.59338106E12, 10092.933333333332], [1.59338076E12, 10926.883333333333], [1.59338064E12, 11696.683333333332], [1.593381E12, 10648.9], [1.5933807E12, 10541.983333333334], [1.59338088E12, 10563.366666666667], [1.59338058E12, 12038.816666666668], [1.59338124E12, 4383.583333333333], [1.59338094E12, 10413.683333333332], [1.59338112E12, 9943.25], [1.59338082E12, 10563.366666666667], [1.59338052E12, 6799.9], [1.59338118E12, 9686.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59338106E12, 2242.0], [1.59338076E12, 2427.25], [1.59338064E12, 2598.25], [1.593381E12, 2365.5], [1.5933807E12, 2341.75], [1.59338088E12, 2346.5], [1.59338058E12, 2674.25], [1.59338124E12, 973.75], [1.59338094E12, 2313.25], [1.59338112E12, 2208.75], [1.59338082E12, 2346.5], [1.59338052E12, 1510.5], [1.59338118E12, 2151.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338124E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9466.907317073168, "minX": 1.59338052E12, "maxY": 13204.470198675494, "series": [{"data": [[1.59338106E12, 12499.902542372874], [1.59338076E12, 11779.348336594905], [1.59338064E12, 10968.914076782457], [1.593381E12, 12118.546184738962], [1.5933807E12, 11935.176470588234], [1.59338088E12, 12015.78340080971], [1.59338058E12, 10722.085257548846], [1.59338124E12, 9466.907317073168], [1.59338094E12, 12299.071868583165], [1.59338112E12, 13000.946236559143], [1.59338082E12, 12170.07489878543], [1.59338052E12, 9551.201257861632], [1.59338118E12, 13204.470198675494]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338124E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9466.863414634148, "minX": 1.59338052E12, "maxY": 13204.43708609272, "series": [{"data": [[1.59338106E12, 12499.860169491525], [1.59338076E12, 11779.289628180039], [1.59338064E12, 10968.873857404038], [1.593381E12, 12118.508032128511], [1.5933807E12, 11935.133874239345], [1.59338088E12, 12015.751012145742], [1.59338058E12, 10722.014209591469], [1.59338124E12, 9466.863414634148], [1.59338094E12, 12299.045174537983], [1.59338112E12, 13000.916129032252], [1.59338082E12, 12170.028340080973], [1.59338052E12, 9551.097484276737], [1.59338118E12, 13204.43708609272]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338124E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0926829268292683, "minX": 1.59338052E12, "maxY": 5.867924528301884, "series": [{"data": [[1.59338106E12, 0.2584745762711863], [1.59338076E12, 0.21135029354207435], [1.59338064E12, 0.26508226691042036], [1.593381E12, 0.21686746987951808], [1.5933807E12, 0.2636916835699798], [1.59338088E12, 0.22874493927125508], [1.59338058E12, 0.3676731793960922], [1.59338124E12, 0.0926829268292683], [1.59338094E12, 0.242299794661191], [1.59338112E12, 0.2903225806451612], [1.59338082E12, 0.22469635627530346], [1.59338052E12, 5.867924528301884], [1.59338118E12, 0.2693156732891832]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338124E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 397.0, "minX": 1.59338052E12, "maxY": 20984.0, "series": [{"data": [[1.59338106E12, 19398.0], [1.59338076E12, 17113.0], [1.59338064E12, 17403.0], [1.593381E12, 18703.0], [1.5933807E12, 19608.0], [1.59338088E12, 19756.0], [1.59338058E12, 17467.0], [1.59338124E12, 17900.0], [1.59338094E12, 19928.0], [1.59338112E12, 20590.0], [1.59338082E12, 18500.0], [1.59338052E12, 16184.0], [1.59338118E12, 20984.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59338106E12, 7668.0559990978245], [1.59338076E12, 7432.5759942626955], [1.59338064E12, 6301.119979095459], [1.593381E12, 7345.8219712090495], [1.5933807E12, 7793.815988693237], [1.59338088E12, 7236.454952675104], [1.59338058E12, 6990.075999865532], [1.59338124E12, 711.2719819259644], [1.59338094E12, 7084.38399394989], [1.59338112E12, 7924.311994667053], [1.59338082E12, 7699.0699818253515], [1.59338052E12, 3207.4519990873337], [1.59338118E12, 7675.515999350548]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59338106E12, 7671.461600360871], [1.59338076E12, 7462.558408203125], [1.59338064E12, 6352.81920501709], [1.593381E12, 7454.504211516381], [1.5933807E12, 7836.497604522705], [1.59338088E12, 7415.1005189299585], [1.59338058E12, 6990.583600053787], [1.59338124E12, 770.2008025932312], [1.59338094E12, 7107.222402420044], [1.59338112E12, 7944.443202133179], [1.59338082E12, 7767.677007269859], [1.59338052E12, 3221.015602312088], [1.59338118E12, 7677.967600259781]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59338106E12, 7669.947999548912], [1.59338076E12, 7444.6079971313475], [1.59338064E12, 6331.775993728637], [1.593381E12, 7406.200985604524], [1.5933807E12, 7817.5279943466185], [1.59338088E12, 7335.702476337552], [1.59338058E12, 6990.357999932766], [1.59338124E12, 749.175990962982], [1.59338094E12, 7097.071996974945], [1.59338112E12, 7935.495997333526], [1.59338082E12, 7737.184990912676], [1.59338052E12, 3211.31799710989], [1.59338118E12, 7676.877999675274]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59338106E12, 7124.0], [1.59338076E12, 6757.0], [1.59338064E12, 5573.0], [1.593381E12, 5041.0], [1.5933807E12, 7012.0], [1.59338088E12, 6853.0], [1.59338058E12, 6254.0], [1.59338124E12, 397.0], [1.59338094E12, 4674.0], [1.59338112E12, 6509.0], [1.59338082E12, 6561.0], [1.59338052E12, 3050.0], [1.59338118E12, 5769.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59338106E12, 12330.5], [1.59338076E12, 11633.0], [1.59338064E12, 10889.0], [1.593381E12, 11975.5], [1.5933807E12, 11813.0], [1.59338088E12, 11779.5], [1.59338058E12, 10416.0], [1.59338124E12, 9837.0], [1.59338094E12, 12122.0], [1.59338112E12, 12960.0], [1.59338082E12, 12128.5], [1.59338052E12, 9618.0], [1.59338118E12, 13016.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338124E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6137.0, "minX": 1.0, "maxY": 12193.0, "series": [{"data": [[8.0, 11732.0], [2.0, 11724.5], [9.0, 12193.0], [10.0, 11533.5], [11.0, 12069.5], [3.0, 11543.0], [12.0, 11791.5], [13.0, 11812.0], [14.0, 11215.5], [15.0, 11164.5], [4.0, 11400.5], [16.0, 11670.0], [1.0, 10985.0], [17.0, 11511.0], [18.0, 11515.5], [19.0, 9794.5], [5.0, 11755.0], [20.0, 11023.5], [21.0, 10508.5], [22.0, 11114.5], [23.0, 6137.0], [6.0, 11715.5], [24.0, 10520.0], [7.0, 11738.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6137.0, "minX": 1.0, "maxY": 12193.0, "series": [{"data": [[8.0, 11732.0], [2.0, 11724.5], [9.0, 12193.0], [10.0, 11533.5], [11.0, 12069.0], [3.0, 11543.0], [12.0, 11791.5], [13.0, 11812.0], [14.0, 11215.0], [15.0, 11164.5], [4.0, 11400.5], [16.0, 11670.0], [1.0, 10984.5], [17.0, 11511.0], [18.0, 11515.0], [19.0, 9794.5], [5.0, 11755.0], [20.0, 11023.5], [21.0, 10508.5], [22.0, 11114.5], [23.0, 6137.0], [6.0, 11715.5], [24.0, 10520.0], [7.0, 11738.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9833333333333334, "minX": 1.59338052E12, "maxY": 9.383333333333333, "series": [{"data": [[1.59338106E12, 7.866666666666666], [1.59338076E12, 8.516666666666667], [1.59338064E12, 9.116666666666667], [1.593381E12, 8.3], [1.5933807E12, 8.216666666666667], [1.59338088E12, 8.233333333333333], [1.59338058E12, 9.383333333333333], [1.59338124E12, 1.9833333333333334], [1.59338094E12, 8.116666666666667], [1.59338112E12, 7.75], [1.59338082E12, 8.233333333333333], [1.59338052E12, 6.966666666666667], [1.59338118E12, 7.316666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338124E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.59338052E12, "maxY": 9.383333333333333, "series": [{"data": [[1.59338106E12, 7.866666666666666], [1.59338076E12, 8.516666666666667], [1.59338064E12, 9.116666666666667], [1.593381E12, 8.3], [1.5933807E12, 8.216666666666667], [1.59338088E12, 8.233333333333333], [1.59338058E12, 9.383333333333333], [1.59338124E12, 3.4166666666666665], [1.59338094E12, 8.116666666666667], [1.59338112E12, 7.75], [1.59338082E12, 8.233333333333333], [1.59338052E12, 5.3], [1.59338118E12, 7.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59338124E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.59338052E12, "maxY": 9.383333333333333, "series": [{"data": [[1.59338106E12, 7.866666666666666], [1.59338076E12, 8.516666666666667], [1.59338064E12, 9.116666666666667], [1.593381E12, 8.3], [1.5933807E12, 8.216666666666667], [1.59338088E12, 8.233333333333333], [1.59338058E12, 9.383333333333333], [1.59338124E12, 3.4166666666666665], [1.59338094E12, 8.116666666666667], [1.59338112E12, 7.75], [1.59338082E12, 8.233333333333333], [1.59338052E12, 5.3], [1.59338118E12, 7.55]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338124E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.4166666666666665, "minX": 1.59338052E12, "maxY": 9.383333333333333, "series": [{"data": [[1.59338106E12, 7.866666666666666], [1.59338076E12, 8.516666666666667], [1.59338064E12, 9.116666666666667], [1.593381E12, 8.3], [1.5933807E12, 8.216666666666667], [1.59338088E12, 8.233333333333333], [1.59338058E12, 9.383333333333333], [1.59338124E12, 3.4166666666666665], [1.59338094E12, 8.116666666666667], [1.59338112E12, 7.75], [1.59338082E12, 8.233333333333333], [1.59338052E12, 5.3], [1.59338118E12, 7.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59338124E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

